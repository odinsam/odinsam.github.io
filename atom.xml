<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OdinSam&#39;s blogs-一个热爱编程性格开朗的Coder</title>
  
  
  <link href="https://www.odinsam.com/atom.xml" rel="self"/>
  
  <link href="https://www.odinsam.com/"/>
  <updated>2022-10-14T19:05:15.892Z</updated>
  <id>https://www.odinsam.com/</id>
  
  <author>
    <name>OdinSam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue2.0 - 06. 数据代理-Object.defineProperty</title>
    <link href="https://www.odinsam.com/articles/7c3d.html"/>
    <id>https://www.odinsam.com/articles/7c3d.html</id>
    <published>2022-10-14T18:12:00.000Z</published>
    <updated>2022-10-14T19:05:15.892Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第6章: 数据代理-Object.defineProperty</p><span id="more"></span><h3 id="objectdefineproperty的基本用法"><a class="markdownIt-Anchor" href="#objectdefineproperty的基本用法"></a> Object.defineProperty的基本用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user=&#123;<span class="attr">name</span>:<span class="string">&#x27;odinsam&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(user,<span class="string">&#x27;age&#x27;</span>,&#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="attr">writable</span>:<span class="literal">true</span>,<span class="attr">configurable</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line"><span class="comment">// user的key-value    key:name    value:odinsam</span></span><br><span class="line"><span class="comment">// user的key-value    key:sex    value:男</span></span><br><span class="line"><span class="comment">//user的key-value    key:age    value:20</span></span><br><span class="line"></span><br><span class="line">user.age=<span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">user.age</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="keyword">delete</span> user.age</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line">user的key-value    key:name    value:odinsam</span><br><span class="line">user的key-value    key:sex    value:男</span><br></pre></td></tr></table></figure><h3 id="objectdefineproperty的-get-set-用法"><a class="markdownIt-Anchor" href="#objectdefineproperty的-get-set-用法"></a> Object.defineProperty的 get set 用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> user=&#123;<span class="attr">name</span>:<span class="string">&#x27;odinsam&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(user,<span class="string">&#x27;age&#x27;</span>,&#123; <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> number &#125; <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123; number=value &#125; &#125;)</span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line"><span class="comment">// user的key-value    key:name    value:odinsam</span></span><br><span class="line"><span class="comment">// user的key-value    key:sex    value:男</span></span><br><span class="line"><span class="comment">//user的key-value    key:age    value:20</span></span><br><span class="line"></span><br><span class="line">user.age=<span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">user.age</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="keyword">delete</span> user.age</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line">user的key-value    key:name    value:odinsam</span><br><span class="line">user的key-value    key:sex    value:男</span><br></pre></td></tr></table></figure><h3 id="原始的数据代理-obj2通过数据代理获取obj1的x属性"><a class="markdownIt-Anchor" href="#原始的数据代理-obj2通过数据代理获取obj1的x属性"></a> 原始的数据代理 obj2通过数据代理获取obj1的x属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原始的数据代理</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">y</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj1.x;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        obj1.x = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="vue中的数据代理"><a class="markdownIt-Anchor" href="#vue中的数据代理"></a> vue中的数据代理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>06.数据代理-Object.defineProperty<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        vue中的数据代理</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        1. 通过vm对象来代理data对象中属性的操作 getter setter</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        2. 更加方便的操作data中的数据</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        3. 通过Object.defineProperty()把data对象中所有的属性添加到vm上</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        4. 为每一个添加到wm上的属性都指定 getter、setter方法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        5. 在getter、setter内部操作data中对应的属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        6. vm._data中的属性不是数据代理而是数据劫持，通过数据劫持监听数据改变从而render页面</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第6章: 数据代理-Object.defineProperty&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="原型链" scheme="https://www.odinsam.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 05. mvvm模型</title>
    <link href="https://www.odinsam.com/articles/a38e.html"/>
    <id>https://www.odinsam.com/articles/a38e.html</id>
    <published>2022-10-14T17:52:00.000Z</published>
    <updated>2022-10-14T18:19:05.587Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第5章: mvvm模型</p><span id="more"></span><img src="/images/05.mvvm.png" style="width:700px;height:300px"><figure class="highlight plaintext"><figcaption><span>MVVM 解释</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M - 模型 即 data 中的数据</span><br><span class="line">V - 视图 即 模板 </span><br><span class="line">VM - viewModel 即 vue的实例对象</span><br></pre></td></tr></table></figure><h4 id="data-bindings-数据以对象的形式存储在data中通过databindings将数据绑定在-view-页面中"><a class="markdownIt-Anchor" href="#data-bindings-数据以对象的形式存储在data中通过databindings将数据绑定在-view-页面中"></a> data bindings 数据以对象的形式存储在data中，通过databindings将数据绑定在 view 页面中</h4><h4 id="view页面改变通过-dom-listeners-修改-data中的数据"><a class="markdownIt-Anchor" href="#view页面改变通过-dom-listeners-修改-data中的数据"></a> view页面改变，通过 dom listeners 修改 data中的数据</h4><h4 id="data中所有的属性最后都出现在vm立"><a class="markdownIt-Anchor" href="#data中所有的属性最后都出现在vm立"></a> data中所有的属性，最后都出现在vm立</h4><h4 id="vm所有的属性即vue原型的属性在vue模板中都可以直接使用"><a class="markdownIt-Anchor" href="#vm所有的属性即vue原型的属性在vue模板中都可以直接使用"></a> vm所有的属性即vue原型的属性，在vue模板中都可以直接使用</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第5章: mvvm模型&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 04. el与data的两种写法</title>
    <link href="https://www.odinsam.com/articles/3899.html"/>
    <id>https://www.odinsam.com/articles/3899.html</id>
    <published>2022-10-14T17:26:00.000Z</published>
    <updated>2022-10-14T18:19:00.807Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第4章: el 与 data的两种写法</p><span id="more"></span><h3 id="font-colorred重点注意font"><a class="markdownIt-Anchor" href="#font-colorred重点注意font"></a> <font color="red">重点注意</font>:</h3><h4 id="font-colorred由vue管理的函数例如-data-的函数式写法一定不能写箭头函数否则this指向的实例就会是window对象font"><a class="markdownIt-Anchor" href="#font-colorred由vue管理的函数例如-data-的函数式写法一定不能写箭头函数否则this指向的实例就会是window对象font"></a> <font color="red">由vue管理的函数(例如 data 的函数式写法)，一定不能写箭头函数，否则this指向的实例就会是window对象</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>04.el与data的两种写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>通过vue的实例对象挂载数据:&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            el 与 data 有两种写法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            el 的两种写法:</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 在new vue(&#123; el:&#x27;#root&#x27; &#125;) 时同时指定el的容器 </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 在创建vue后 通过实例对象指定el的值  vm.$mount(&#x27;#root&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            data 的两种写法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 通过对象的形式 data:&#123; title:&#x27;hello vue&#x27; &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 使用函数的形式 data() &#123; return &#123; title:&#x27;hello vue&#x27;  &#125; &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            后期使用函数式组件时，data必须使用函数形式</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            重点注意: 由vue管理的函数(例如 data 的函数式写法)，一定不能写箭头函数，否则this指向的实例就会是window对象</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 写法1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// el: &#x27;#root&#x27;,    // 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用data对象形式</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data: &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     title: &#x27;hello vue&#x27;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     url: &#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用函数式</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">title</span>: <span class="string">&#x27;hello vue !!&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 写法2</span></span></span><br><span class="line"><span class="javascript">        vm.$mount(<span class="string">&#x27;#root&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第4章: el 与 data的两种写法&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 03. 数据绑定</title>
    <link href="https://www.odinsam.com/articles/f50b.html"/>
    <id>https://www.odinsam.com/articles/f50b.html</id>
    <published>2022-10-14T16:43:00.000Z</published>
    <updated>2022-10-14T18:18:07.813Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第3章: vue 的数据绑定</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>03.数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            vue有单向数据绑定和双向数据绑定两种</span></span><br><span class="line"><span class="comment">            1. 单向绑定 v-bind 数据只能从data流向页面</span></span><br><span class="line"><span class="comment">            2. 双向绑定 v-model 数据不仅可以从data流向页面，当页面发生改变同样可以修改data的内容</span></span><br><span class="line"><span class="comment">            备注：</span></span><br><span class="line"><span class="comment">                1. 双向绑定一般都应用在表单元素 如 input select 等</span></span><br><span class="line"><span class="comment">                2. v-model:value 可以简写为 v-model 因为 v-model默认收集的就是valuede值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>单向数据绑定 : v-bind 的简写<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>双向数据绑定 v-model<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                如下代码是错误的： [Vue warn]: Failed to resolve directive: modle</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-modle:value</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果如图"><a class="markdownIt-Anchor" href="#效果如图"></a> 效果如图</h4><img src="/images/03.databind.gif" style="width:900px;height:700px">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第3章: vue 的数据绑定&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="数据绑定" scheme="https://www.odinsam.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 02. 模板语法</title>
    <link href="https://www.odinsam.com/articles/1660.html"/>
    <id>https://www.odinsam.com/articles/1660.html</id>
    <published>2022-10-14T16:26:00.000Z</published>
    <updated>2022-10-14T18:18:55.279Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第2章: vue 的模板语法.</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>02.模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模板语法有插值语法和指令语法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插值语法一般用于显示标签的内容 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法: &#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                指令语法常用语解析标签 包括标签属性、标签内容、标签事件</span></span><br><span class="line"><span class="comment">                v-bind绑定</span></span><br><span class="line"><span class="comment">                1. 将 “”中的内容即 url 当做js表达式， url在data中找到对应的链接，所以绑定在a标签的href属性上</span></span><br><span class="line"><span class="comment">                2. v-bind 可以简写为 : </span></span><br><span class="line"><span class="comment">                3. v-bind 仅可以绑定数据，单向数据绑定（从data中获取数据绑定到页面中），页面中的数据发生变化，无法修改data中的内容</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>odinsam 的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;Date.now()&quot;</span>&gt;</span>当前时间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第2章: vue 的模板语法.&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 01. hello vue</title>
    <link href="https://www.odinsam.com/articles/deab.html"/>
    <id>https://www.odinsam.com/articles/deab.html</id>
    <published>2022-10-14T16:18:00.000Z</published>
    <updated>2022-10-14T18:19:45.067Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第2章: 初始 vue.</p><span id="more"></span><h3 id="01-hello-vue"><a class="markdownIt-Anchor" href="#01-hello-vue"></a> 01. hello vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>01.hello案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1.  需要创建vue实例，且传入一个配置对象 </span></span><br><span class="line"><span class="comment">            2.  root容器中的代码需要符合html规范，只是加入了vue语法</span></span><br><span class="line"><span class="comment">            3.  root容器立的代码被称为 vue 模板</span></span><br><span class="line"><span class="comment">            4.  插值语法 &#123;&#123; $1 &#125;&#125; 中的内容需要是 js 表达式，且内容可以直接读取到配置的data中所有的属性</span></span><br><span class="line"><span class="comment">            5.  vue实例和容器需要时一一对应</span></span><br><span class="line"><span class="comment">            6.  一旦 data 中的数据发生变化，页面会自动更新</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当前语法为 vue 的插值语法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建vue实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//指定当前vue实例为那个容器服务， css选择器选择对应容器</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义对应的数据，可以在对应的容器 el 中使用</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第2章: 初始 vue.&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 系列</title>
    <link href="https://www.odinsam.com/articles/da3d.html"/>
    <id>https://www.odinsam.com/articles/da3d.html</id>
    <published>2022-10-14T16:16:00.000Z</published>
    <updated>2022-10-14T18:18:48.030Z</updated>
    
    <content type="html"><![CDATA[<p>vue 学习系列的目录.</p><span id="more"></span><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><h4 id="01-hello-vue"><a class="markdownIt-Anchor" href="#01-hello-vue"></a> <a href="deab.html">[01] hello vue</a></h4><h4 id="02-模板语法"><a class="markdownIt-Anchor" href="#02-模板语法"></a> <a href="1660.html">[02] 模板语法</a></h4><h4 id="03-数据绑定"><a class="markdownIt-Anchor" href="#03-数据绑定"></a> <a href="f50b.html">[03] 数据绑定</a></h4><h4 id="04-el与data的两种写法"><a class="markdownIt-Anchor" href="#04-el与data的两种写法"></a> <a href="3899.html">[04] el与data的两种写法</a></h4><h4 id="05-mvvm模型"><a class="markdownIt-Anchor" href="#05-mvvm模型"></a> <a href="a38e.html">[05] mvvm模型</a></h4><h4 id="06-数据代理-objectdefineproperty"><a class="markdownIt-Anchor" href="#06-数据代理-objectdefineproperty"></a> <a href="7c3d.html">[06] 数据代理-Object.defineProperty</a></h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue 学习系列的目录.&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>OdinLog 组件</title>
    <link href="https://www.odinsam.com/articles/86b2.html"/>
    <id>https://www.odinsam.com/articles/86b2.html</id>
    <published>2022-07-03T10:37:10.000Z</published>
    <updated>2022-07-05T13:17:00.246Z</updated>
    
    <content type="html"><![CDATA[<p>自定义简单的一个日志组件。可以存储本地文件，也可以存储到数据库(目前仅支持 mysql 和 sqlServer 数据库)。后期扩展和ELK结合。具体源代码在github可以查看。</p><span id="more"></span><h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>组件可以生成对应日志文件( bin 目录下)，可用于winform、webapi项目。如果存储在本地，以日志级别 Info、Debug、Error生成文件夹，内部以 yyyy-MM-dd 格式生成文件夹。日志文件以数字标识，如果单个日志文件大小超过5M则另生成日志文件。</p><h4 id="2-组件使用"><a class="markdownIt-Anchor" href="#2-组件使用"></a> 2. 组件使用</h4><p>可以使用依赖注入，也可以在配置Config后直接使用</p><pre><code><figure class="highlight csharp"><figcaption><span>依赖注入</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddOdinSingletonOdinLogs(opt=&gt;</span><br><span class="line">  opt.Config=<span class="keyword">new</span> LogConfig &#123;</span><br><span class="line">      LogSaveType=<span class="keyword">new</span> EnumLogSaveType[]&#123;EnumLogSaveType.All&#125;,</span><br><span class="line">      ConnectionString = <span class="string">&quot;server=xxxx;Database=xxxx;Uid=xxx;Pwd=xxx;&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></code></pre>   <figure class="highlight csharp"><figcaption><span>直接配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OdinLog.Core.OdinLogs = <span class="keyword">new</span> OdinLogs(<span class="keyword">new</span> LogConfig &#123;</span><br><span class="line">       LogSaveType=<span class="keyword">new</span> EnumLogSaveType[]&#123;EnumLogSaveType.All&#125;,</span><br><span class="line">       ConnectionString = <span class="string">&quot;server=xxxx;Database=xxxx;Uid=xxx;Pwd=xxx;&quot;</span>&#125;);)</span><br></pre></td></tr></table></figure>   <figure class="highlight csharp"><figcaption><span>调用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OdinLogs.Info(<span class="keyword">new</span> LogInfo()&#123;LogContent = <span class="string">&quot;log info test&quot;</span>,LogMark=<span class="string">&quot;log mark&quot;</span>, &#125;);</span><br><span class="line">     OdinLogs.Error(</span><br><span class="line">         <span class="keyword">new</span> ExceptionLog()&#123;</span><br><span class="line">             LogContent = <span class="string">&quot;log exception test&quot;</span>,</span><br><span class="line">             LogMark=<span class="string">&quot;log mark&quot;</span>,</span><br><span class="line">             LogException = <span class="keyword">new</span> Exception(<span class="string">&quot;custom exceptioni&quot;</span>)&#125;);</span><br></pre></td></tr></table></figure><pre><code>具体配置参看 LogConfig 结构</code></pre><h4 id="3-存储表结构"><a class="markdownIt-Anchor" href="#3-存储表结构"></a> 3. 存储表结构</h4><p><a href="https://github.com/odinsam/OdinLog/tree/master/OdinLog/doc/DDL/scripts">https://github.com/odinsam/OdinLog/tree/master/OdinLog/doc/DDL/scripts</a></p><h4 id="4-文件夹结构-文件内容格式如下"><a class="markdownIt-Anchor" href="#4-文件夹结构-文件内容格式如下"></a> 4. 文件夹结构、文件内容格式如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- logs</span><br><span class="line">--Info</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">0.txt</span><br><span class="line">1.txt</span><br><span class="line">--Debug</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">0.txt</span><br><span class="line">--Error</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">0.txt</span><br></pre></td></tr></table></figure><p>Info、Debug 文件内容格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【 LogId 】: 766c769d349d494daf82fca503666d5d </span><br><span class="line">【 Log Level 】: Info </span><br><span class="line">【 LogTime 】: 2022-07-03 17:59:44 </span><br><span class="line">【 LogContent 】:</span><br><span class="line">log info test</span><br><span class="line">****************************************************************************************************</span><br></pre></td></tr></table></figure><p>Error 文件内容格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">【 LogId 】: 57c2978db92a44959e613f7a1e733d8b </span><br><span class="line">【 Log Level 】: Error </span><br><span class="line">【 LogTime 】: 2022-07-03 18:10:51 </span><br><span class="line">【 Exception Message 】: custom exceptioni</span><br><span class="line">【 Exception Info 】: </span><br><span class="line">&#123;</span><br><span class="line">    &quot;ClassName&quot;: &quot;System.Exception&quot;,</span><br><span class="line">    &quot;Message&quot;: &quot;custom exceptioni&quot;,</span><br><span class="line">    &quot;Data&quot;: null,</span><br><span class="line">    &quot;InnerException&quot;: null,</span><br><span class="line">    &quot;HelpURL&quot;: null,</span><br><span class="line">    &quot;StackTraceString&quot;: null,</span><br><span class="line">    &quot;RemoteStackTraceString&quot;: null,</span><br><span class="line">    &quot;RemoteStackIndex&quot;: 0,</span><br><span class="line">    &quot;ExceptionMethod&quot;: null,</span><br><span class="line">    &quot;HResult&quot;: -2146233088,</span><br><span class="line">    &quot;Source&quot;: null,</span><br><span class="line">    &quot;WatsonBuckets&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">****************************************************************************************************</span><br></pre></td></tr></table></figure><p>具体的代码在 <a href="https://github.com/odinsam/OdinLog">GitHub</a> <a href="https://www.nuget.org/packages/OdinLog"><img src="https://img.shields.io/nuget/v/OdinLog" alt></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自定义简单的一个日志组件。可以存储本地文件，也可以存储到数据库(目前仅支持 mysql 和 sqlServer 数据库)。后期扩展和ELK结合。具体源代码在github可以查看。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql8 远程连接解决办法</title>
    <link href="https://www.odinsam.com/articles/8b92.html"/>
    <id>https://www.odinsam.com/articles/8b92.html</id>
    <published>2022-06-30T07:41:00.000Z</published>
    <updated>2022-06-30T07:43:43.878Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; ;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="mysql" scheme="https://www.odinsam.com/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://www.odinsam.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ApiLinkMonitor 单服务链路追踪框架</title>
    <link href="https://www.odinsam.com/articles/5b4d.html"/>
    <id>https://www.odinsam.com/articles/5b4d.html</id>
    <published>2021-07-24T12:01:00.000Z</published>
    <updated>2021-07-24T12:07:26.510Z</updated>
    
    <content type="html"><![CDATA[<p>在平时的开发中，虽然我们有日志信息、报错信息等等，但是我们依然在某些时候需要查看项目中方法调用的来龙去脉，这种信息一般叫做链路信息。这里介绍一个单服务用于中小型项目的链路追踪框架。</p><span id="more"></span><p><strong>服务调用链路监控框架</strong></p><ol><li>简介</li></ol><p>项目基于 <a href="https://github.com/odinsam/OdinPlugs.OdinInject">OdinInjectCore</a> 和 <a href="https://github.com/odinsam/OdinPlugs.SnowFlake">SnowFlake</a> 框架开发，使用 .net core 中间件实现，主要用到了 AspectCore.Core 第三方框架为底层服务类方法调用的链路监控。监控的项目调用的链路信息入库 mongo，所以需要搭配 mongo 一起使用.<br>并且</p><ol start="2"><li>使用</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入链路监控</span></span><br><span class="line">services</span><br><span class="line">    .AddSingletonSnowFlake(dataCenterId, workerId)</span><br><span class="line">    .AddOdinTransientMongoDb(</span><br><span class="line">        opt =&gt; &#123; opt.ConnectionString = mongoConnection; opt.DbName = databaseName; &#125;)</span><br><span class="line">    .AddOdinTransientInject&lt;IOdinApiLinkMonitor&gt;();</span><br><span class="line"></span><br><span class="line">services.ConfigureDynamicProxy(config =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ~ 使用通配符的特定全局拦截器</span></span><br><span class="line">        config.Interceptors.AddTyped&lt;OdinAspectCoreInterceptorAttribute&gt;(Predicates.ForService(<span class="string">&quot;*Service&quot;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>链路数据</li></ol><p>controller 调用的 service 类需要以 Service 结尾,例如 接口 ITestService 和 实现类 TestService,controller 的 api 方法被调用后生成链路数据.<br>所有数据均进入 mongo。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 链路的 雪花Id，本次链路唯一</span></span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="comment">// 链路 当前的雪花Id</span></span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324387245330432</span>,</span><br><span class="line">    <span class="comment">// 链路状态</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路状态描述 start 表示本次链路开始</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Start&quot;</span>,</span><br><span class="line">    <span class="comment">// 上层链路雪花Id 0代表没有上层链路</span></span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态描述</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 下级链路雪花Id</span></span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324387245330433</span>,</span><br><span class="line">    <span class="comment">// 链路耗时</span></span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 链路调用的完整类名</span></span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 链路调用的类名</span></span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 调用的方法名</span></span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 本次链路的需要 从小到大排序</span></span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324394790883328</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 链路状态描述  Invoker 表示链路调用中</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="comment">// 与上一层链路的 LinkNext 对应</span></span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324387245330433</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324394790883329</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324394962849792</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324394790883329</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324394962849793</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395122233344</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324394962849793</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395122233345</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395277422592</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="comment">//  链路状态描述  ToEndReturn 表示链路调用返回</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395122233345</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态描述 CatchReturn 表示调用出现异常 但是被catch捕获</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395277422593</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">37</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395520692224</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395277422593</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395520692225</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">133</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395667492864</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395520692225</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395667492865</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">210</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324396925784064</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//  链路状态描述  Over 表示本次链路调用结束</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Over&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395667492865</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 调用成功结束</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;Success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 本次调用 2558 ms</span></span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">2558</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>解析</li></ol><p>通过链路数据得出结论：<br>本次 api 调用：<br>首先 调用 OdinCore.Services.InterfaceServices.ITestService 类的 show 方法,方法内部调用 OdinCore.Services.InterfaceServices.IInerService 类的 show 方法，<br>然后又调用 OdinCore.Services.InterfaceServices.ITTService 类的 show 方法，结果调用出错，但是被 catch 捕获最后返回。</p><p>swagger 调用返回信息如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;SnowFlakeId&quot;</span>: <span class="string">&quot;206324387228553216&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ClassName&quot;</span>: <span class="string">&quot;System.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;ttservice throw&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Data&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;InnerException&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;HelpURL&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;StackTraceString&quot;</span>: <span class="string">&quot;   at OdinPlugs.OdinMvcCore.OdinFilter.ApiInvokerFilterAttribute.OnActionExecuted(ActionExecutedContext context) in /Users/odin/workSpace/github/odinmaf/OdinPlugs/OdinMvcCore/OdinFilter/ApiInvokFilterAttribute.cs:line 109\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextExceptionFilterAsync&gt;g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ExceptionContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeNextResourceFilter()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at OdinPlugs.ApiLinkMonitor.OdinMiddleware.OdinExceptionMiddleware.Invoke(HttpContext context) in /Users/odin/workSpace/github/odinmaf/OdinPlugs.ApiLinkMonitor/OdinMiddleware/OdinExceptionMiddleware.cs:line 34&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;RemoteStackTraceString&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;RemoteStackIndex&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;ExceptionMethod&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;HResult&quot;</span>: <span class="number">-2146233088</span>,</span><br><span class="line">        <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;AspectCore.Core&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;WatsonBuckets&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;StatusCode&quot;</span>: <span class="string">&quot;sys-error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ErrorMessage&quot;</span>: <span class="string">&quot;系统异常，请联系管理员&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;系统异常:[sys-error]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过相同的雪花 Id 最后会清晰的分析出整个调用过程中的过程，并且如果能够结合 <a href="https://github.com/odinsam/OdinPlugs.OdinPlugs">OdinPlugs</a> 框架,可以监控到 controller 中 api 的调用记录，包括入参、时间、返回信息等会更加详细。</p><p>具体的代码在 <a href="https://github.com/odinsam/OdinPlugs.ApiLinkMonitor">GitHub</a> <a href="https://www.nuget.org/packages/OdinPlugs.ApiLinkMonitor"><img src="https://img.shields.io/nuget/v/OdinPlugs.ApiLinkMonitor" alt></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在平时的开发中，虽然我们有日志信息、报错信息等等，但是我们依然在某些时候需要查看项目中方法调用的来龙去脉，这种信息一般叫做链路信息。这里介绍一个单服务用于中小型项目的链路追踪框架。&lt;/p&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term="链路追踪" scheme="https://www.odinsam.com/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
    <category term="ApiLinkMonitor" scheme="https://www.odinsam.com/tags/ApiLinkMonitor/"/>
    
  </entry>
  
  <entry>
    <title>利用BackgroundService封装后台服务</title>
    <link href="https://www.odinsam.com/articles/c075.html"/>
    <id>https://www.odinsam.com/articles/c075.html</id>
    <published>2021-07-22T15:21:00.000Z</published>
    <updated>2021-07-24T11:59:28.373Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章 <a href="https://odinsam.com/articles/2893.html">使用 BackgroundService 类在微服务中实现后台任务</a> 中有介绍到如何利用 BackgroundService 来实现后台服务，这里我们依旧利用 BackgroundService 来进行类似 hangfire 的封装。</p><span id="more"></span><h1 id="odinplugsodinhostedservice"><a class="markdownIt-Anchor" href="#odinplugsodinhostedservice"></a> OdinPlugs.OdinHostedService</h1><h3 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h3><p>1.1 后台任务 - 普通任务，立即执行，只执行一次</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceNomalJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - Nomal - Job - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.2 后台任务 - 延迟调用，只执行一次</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.3 后台任务 - 循环任务执行：重复执行的任务，使用常见的时间循环模式</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.4 后台任务 - 循环任务执行：重复执行的任务(任务执行完后继续自动执行)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceLoopJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - LoopJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.5 后台任务 - 自定义任务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Timer timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">worker</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    opt.StartAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer = <span class="keyword">new</span> Timer(worker, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">2000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    opt.ExecuteAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    opt.StopAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    opt.DisposeAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer?.Dispose();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.6 后台任务 - 多任务执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">services</span><br><span class="line">    .AddOdinBgServiceJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Timer timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">worker</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        opt.StartAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer = <span class="keyword">new</span> Timer(worker, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">2000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        opt.ExecuteAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        opt.StopAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        opt.DisposeAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer?.Dispose();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceLoopJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// new ReceiveRabbitMQHelper().ReceiveMQ(_Options);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - LoopJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceRecurringJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.Period = TimeSpan.FromSeconds(<span class="number">1</span>);</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// new ReceiveRabbitMQHelper().ReceiveMQ(_Options);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - RecurringJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceNomalJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - Nomal- Job - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>具体的代码在 <a href="https://github.com/odinsam/OdinPlugs.OdinHostedService">GitHub</a> <a href="https://www.nuget.org/packages/OdinPlugs.OdinHostedService"><img src="https://img.shields.io/nuget/v/OdinPlugs.OdinHostedService" alt></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前的文章 &lt;a href=&quot;https://odinsam.com/articles/2893.html&quot;&gt;使用 BackgroundService 类在微服务中实现后台任务&lt;/a&gt; 中有介绍到如何利用 BackgroundService 来实现后台服务，这里我们依旧利用 BackgroundService 来进行类似 hangfire 的封装。&lt;/p&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/tags/Net-Core/"/>
    
    <category term="微服务" scheme="https://www.odinsam.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="BackgroundService" scheme="https://www.odinsam.com/tags/BackgroundService/"/>
    
    <category term="后台服务" scheme="https://www.odinsam.com/tags/%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于Mapster对象映射器的封装和使用</title>
    <link href="https://www.odinsam.com/articles/9cc8.html"/>
    <id>https://www.odinsam.com/articles/9cc8.html</id>
    <published>2021-07-15T11:41:00.000Z</published>
    <updated>2021-07-15T11:53:29.822Z</updated>
    
    <content type="html"><![CDATA[<p>说到 .NET 中的对象映射框架，大部分人的第一映像就是 AutoMapper ，而 Mapster 相对知道的人较少。但其实 Mapster 是一个高性能的对象映射框架，与 AutoMapper 相比，Mapster 在速度和内存占用方面表现更加优秀，可以在只使用1/3内存的情况下获得4倍的性能提升。</p><span id="more"></span><ol><li>基础类</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StuName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StuAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student_DbModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Startup.cs 注册全局映射Config，也可以不注册</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 OdinInjectCore 注入</span></span><br><span class="line">services.AddOdinTypeAdapter(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ForType&lt;ErrorCode_DbModel, ErrorCode_Model&gt;()</span><br><span class="line">                .Map(dest =&gt; dest.ShowMessage, src =&gt; src.CodeShowMessage);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 使用 .net core DI 注入</span></span><br><span class="line">services.AddSingleton&lt;ITypeAdapterMapster&gt;(provider =&gt; <span class="keyword">new</span> TypeAdapterMapster(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ForType&lt;ErrorCode_DbModel, ErrorCode_Model&gt;()</span><br><span class="line">                .Map(dest =&gt; dest.ShowMessage, src =&gt; src.CodeShowMessage);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><ol start="3"><li>使用时获取全局注册Config</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 OdinInjectCore 获取 TypeAdapterMapster</span></span><br><span class="line"><span class="keyword">var</span> mapsterConfig = OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig();</span><br><span class="line"><span class="comment">// 使用 .net core 默认 DI 获取 TypeAdapterMapster</span></span><br><span class="line"><span class="keyword">var</span> mapsterConfig = services.BuildServiceProvider().GetService&lt;ITypeAdapterMapster&gt;().GetConfig();</span><br></pre></td></tr></table></figure><ol start="4"><li>获取数据准备映射转换对象</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 SqlSugar 获取数据库中的数据</span></span><br><span class="line">List&lt;Student_DbModel&gt; stuDbModels = DbScoped.Sugar.Queryable&lt;Student_DbModel&gt;().ToList();</span><br><span class="line">Student_DbModel stuDbModel = stuDbModels[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><ol start="6"><li>对象映射转换</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用全局映射配置转换目标对象类型</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射配置转换目标对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为没有传全局映射配置, 此时虽然全局配置也有 StudentName 属性映射 StuName 的配置，但是会以当前自定义配置为准</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射+全局映射配置转换目标对象对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为全局映射配置中有 StudentName 属性映射 StuName 的配置，所以当自定义配置与全局配置都存在时，以全局配置为准</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">            opt.Map(dest =&gt; dest.StuAddress, src =&gt; src.StudentAddress);</span><br><span class="line">        &#125;,</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><ol start="7"><li><p>集合映射转换</p><p>将 stuDbModels List&lt;ErrorCode_DbModel&gt; 集合映射转换为 stuLst List<Student> 类型的集合</Student></p></li></ol><p>泛型参数说明:</p><table><thead><tr><th style="text-align:left">参数名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Student_DbModel</td><td style="text-align:left">映射的源类型</td></tr><tr><td style="text-align:left">Student</td><td style="text-align:left">转换的目标类型</td></tr><tr><td style="text-align:left">List<Student></Student></td><td style="text-align:left">最终转换后的集合类型</td></tr></tbody></table><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用全局映射配置转换目标对象类型</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射配置转换目标对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为没有传全局映射配置, 此时虽然全局配置也有 StudentName 属性映射 StuName 的配置，但是会以当前自定义配置为准</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射+全局映射配置转换目标对象对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为全局映射配置中有 StudentName 属性映射 StuName 的配置，所以当自定义配置与全局配置都存在时，以全局配置为准</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">            opt.Map(dest =&gt; dest.StuAddress, src =&gt; src.StudentAddress);</span><br><span class="line">        &#125;,</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>关于 Mapster 更详细的用法，请参照 <a href="https://github.com/MapsterMapper/Mapster">Mapster</a> 官网。</p><p>具体封装代码详见 <a href="https://github.com/odinsam/OdinPlugs.Utils">Github</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;说到 .NET 中的对象映射框架，大部分人的第一映像就是 AutoMapper ，而 Mapster 相对知道的人较少。但其实 Mapster 是一个高性能的对象映射框架，与 AutoMapper 相比，Mapster 在速度和内存占用方面表现更加优秀，可以在只使用1/3内存的情况下获得4倍的性能提升。&lt;/p&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/tags/Net-Core/"/>
    
    <category term="Mapster" scheme="https://www.odinsam.com/tags/Mapster/"/>
    
  </entry>
  
  <entry>
    <title>.Net中关于Json序列化Long类型数据的解决办法</title>
    <link href="https://www.odinsam.com/articles/4ad7.html"/>
    <id>https://www.odinsam.com/articles/4ad7.html</id>
    <published>2021-07-06T15:11:09.000Z</published>
    <updated>2021-07-06T16:06:53.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在分布式的项目中，我们的数据库Id不能再像以前一样使用int类型自动增长，这时候我们需要一个在网络当中都要能够保持唯一的值，通常情况我们会使用Guid来解决这个问题，但是作为string类型，他并不适合作为主键。尤其是在查询等需要索引操作的时候显得尤为重要。</p></blockquote><span id="more"></span><blockquote><ol><li>这时候我们通常会选择使用雪花Id来解决这个问题，他是一个能在网络当中能够保证唯一的数值number类型的数字，对应在csharp中是long类型。具体雪花Id的原理网上都有，这里直接上生成雪花Id的代码：</li></ol></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinSnowFlake</span> : <span class="title">IOdinSnowFlake</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 开始时间截((new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Utc)-Jan1st1970).TotalMilliseconds)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">long</span> twepoch;</span><br><span class="line">    <span class="comment">// 机器id所占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> workerIdBits = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 数据标识id所占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> datacenterIdBits = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> maxWorkerId = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="comment">// 支持的最大数据标识id，结果是31</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> maxDatacenterId = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="comment">// 序列在id中占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> sequenceBits = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">// 数据标识id向左移17位(12+5)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="comment">// 机器ID向左移12位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="comment">// 时间截向左移22位(5+5+12)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line">    <span class="comment">// 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> sequenceMask = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; sequenceBits);</span><br><span class="line">    <span class="comment">// 数据中心ID(0~31)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> datacenterId &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 工作机器ID(0~31)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> workerId &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 毫秒内序列(0~4095)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> sequence &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 上次生成ID的时间截</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> lastTimestamp &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt; dicContainer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 雪花ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;datacenterId&quot;&gt;</span>数据中心ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;workerId&quot;&gt;</span>工作机器ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSnowFlake</span>(<span class="params"><span class="built_in">long</span> datacenterId, <span class="built_in">long</span> workerId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.twepoch = (<span class="built_in">long</span>)((<span class="keyword">new</span> DateTime(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc) - Jan1st1970).TotalMilliseconds);</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="built_in">string</span>.Format(<span class="string">&quot;datacenter Id can&#x27;t be greater than &#123;0&#125; or less than 0&quot;</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="built_in">string</span>.Format(<span class="string">&quot;worker Id can&#x27;t be greater than &#123;0&#125; or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">        <span class="keyword">this</span>.sequence = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">this</span>.lastTimestamp = <span class="number">-1L</span>;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer == <span class="literal">null</span>)</span><br><span class="line">            dicContainer = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitDic</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer == <span class="literal">null</span>)</span><br><span class="line">            dicContainer = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearDic</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer != <span class="literal">null</span>)</span><br><span class="line">            dicContainer.Clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获得下一个ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">NextId</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (<span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span> timestamp = GetCurrentTimestamp();</span><br><span class="line">            <span class="keyword">if</span> (timestamp &gt; lastTimestamp) <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = <span class="number">0L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (timestamp == lastTimestamp) <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">                <span class="keyword">if</span> (sequence == <span class="number">0</span>) <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = GetNextTimestamp(lastTimestamp); <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//当前时间小于上一次ID生成的时间戳，证明系统时钟被回拨，此时需要做回拨处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">                <span class="keyword">if</span> (sequence &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = lastTimestamp; <span class="comment">//停留在最后一次时间戳上，等待系统时间追上后即完全度过了时钟回拨问题。</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = lastTimestamp + <span class="number">1</span>; <span class="comment">//直接进位到下一个毫秒</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//throw new Exception(string.Format(&quot;Clock moved backwards.  Refusing to generate id for &#123;0&#125; milliseconds&quot;, lastTimestamp - timestamp));</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lastTimestamp = timestamp; <span class="comment">//上次生成ID的时间截</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">            <span class="keyword">var</span> id = ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |</span><br><span class="line">                (datacenterId &lt;&lt; datacenterIdShift) |</span><br><span class="line">                (workerId &lt;&lt; workerIdShift) |</span><br><span class="line">                sequence;</span><br><span class="line">            <span class="keyword">if</span> (!dicContainer.ContainsKey(id))</span><br><span class="line">            &#123;</span><br><span class="line">                dicContainer.Add(id, id);</span><br><span class="line">                <span class="keyword">return</span> id;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> NextId();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解析雪花ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">AnalyzeId</span>(<span class="params"><span class="built_in">long</span> Id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">var</span> timestamp = (Id &gt;&gt; timestampLeftShift);</span><br><span class="line">        <span class="keyword">var</span> time = Jan1st1970.AddMilliseconds(timestamp + twepoch);</span><br><span class="line">        sb.Append(time.ToLocalTime().ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:fff&quot;</span>));</span><br><span class="line">        <span class="keyword">var</span> datacenterId = (Id ^ (timestamp &lt;&lt; timestampLeftShift)) &gt;&gt; datacenterIdShift;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + datacenterId);</span><br><span class="line">        <span class="keyword">var</span> workerId = (Id ^ ((timestamp &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift))) &gt;&gt; workerIdShift;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + workerId);</span><br><span class="line">        <span class="keyword">var</span> sequence = Id &amp; sequenceMask;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + sequence);</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lastTimestamp&quot;&gt;</span>上次生成ID的时间截<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>当前时间戳<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">GetNextTimestamp</span>(<span class="params"><span class="built_in">long</span> lastTimestamp</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">long</span> timestamp = GetCurrentTimestamp();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            timestamp = GetCurrentTimestamp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取当前时间戳</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">GetCurrentTimestamp</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">long</span>)(DateTime.UtcNow - Jan1st1970).TotalMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DateTime Jan1st1970 = <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码解释：</strong></p><ol><li><p>提供了构造函数，其中datacenterId为当前数据中心Id:一般从1开始。workerId是机器Id,<font color="red">需要注意的是在网络节点当中的服务器，这个Id不能重复</font></p></li><li><p>代码的 NextId() 方法将会生成一个 18位长的long类型的雪花Id。</p></li><li><p>AnalyzeId() 方法可以简单的解析一个long的数值是不是符合雪花Id的规范。<font color="red">这个解析不精准，只能判断格式大致是否正确</font>具体解析规则可以看代码。</p></li><li><p>有了这个Id，我们通常可以开心的在代码当中以application/json格式返回一个对象，比如</p></li></ol><p><img src="/images/4ad7/code.png" alt="code"></p><p>输出的结果是</p><p><img src="/images/4ad7/result.png" alt="result"></p><p><strong>这是因为 JavaScript 数值精度是32位，如果整数数度超过32位，就会被当作浮点数处理。换句话说，如果从服务端生成的JSON，某个值是64位整数，传到前端JavaScript，再传回服务端，不做任何运算，都可能出现失真。</strong></p><p>解决问题的办法：将long作为string类型序列化输出 代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Stu</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">JsonConverter(typeof(JsonConverterLong))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JsonConverterLong 类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonConverterLong</span> : <span class="title">JsonConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否可以转换</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;objectType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">CanConvert</span>(<span class="params">Type objectType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 读json</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;reader&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;objectType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;existingValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serializer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ReadJson</span>(<span class="params">JsonReader reader, Type objectType, <span class="built_in">object</span> existingValue, JsonSerializer serializer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((reader.ValueType == <span class="literal">null</span> || reader.ValueType == <span class="keyword">typeof</span>(<span class="built_in">long</span>?)) &amp;&amp; reader.Value == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span>.TryParse(reader.Value != <span class="literal">null</span> ? reader.Value.ToString() : <span class="string">&quot;&quot;</span>, <span class="keyword">out</span> <span class="built_in">long</span> <span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 写json</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;writer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serializer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteJson</span>(<span class="params">JsonWriter writer, <span class="built_in">object</span> <span class="keyword">value</span>, JsonSerializer serializer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</span><br><span class="line">            writer.WriteValue(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            writer.WriteValue(<span class="keyword">value</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在分布式的项目中，我们的数据库Id不能再像以前一样使用int类型自动增长，这时候我们需要一个在网络当中都要能够保持唯一的值，通常情况我们会使用Guid来解决这个问题，但是作为string类型，他并不适合作为主键。尤其是在查询等需要索引操作的时候显得尤为重要。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vscode 使用 git-commit-plugin 插件规范提交 Git</title>
    <link href="https://www.odinsam.com/articles/34fe.html"/>
    <id>https://www.odinsam.com/articles/34fe.html</id>
    <published>2021-06-30T13:49:00.000Z</published>
    <updated>2021-07-06T16:02:07.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在团队协作开发时，每个人提交代码时都会写 commit message。每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。本文将介绍 Git 提交的规范以及如何利用 git-commit-plugin 插件快速提交规范的commit。</p></blockquote><span id="more"></span><blockquote><p>一般来说，大厂都有一套的自己的提交规范，尤其是在一些大型开源项目中，commit message 都是十分一致的。因此，我们需要制定统一标准，促使团队形成一致的代码提交风格，更好的提高工作效率，成为一名有追求的工程师。其中 AngularJS 在 github 上 的提交记录被业内许多人认可，逐渐被大家引用。</p></blockquote><p><strong>Commit message 的格式</strong></p><p>每次提交，Commit message 都包括三个部分：header，body 和 footer。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type(scope):空格subject</span><br><span class="line">换行</span><br><span class="line">[body]</span><br><span class="line">换行</span><br><span class="line">[footer]</span><br></pre></td></tr></table></figure><p><strong>1. type 类型</strong></p><p>type 是 commit 的类别，只允许如下几种标识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 主要type</span><br><span class="line">feat:     增加新功能</span><br><span class="line">fix:      修复bug</span><br><span class="line"></span><br><span class="line"># 特殊type</span><br><span class="line"> docs:    只改动了文档相关的内容</span><br><span class="line">style:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span><br><span class="line">build:    构造工具的或者外部依赖的改动，例如webpack，npm</span><br><span class="line">refactor:  代码重构时使用</span><br><span class="line">revert:   执行git revert打印的message</span><br><span class="line"></span><br><span class="line"># 暂不使用type</span><br><span class="line">test:     添加测试或者修改现有测试</span><br><span class="line">perf:     提高性能的改动</span><br><span class="line">ci:       与CI（持续集成服务）有关的改动</span><br><span class="line">chore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure><p><strong>2. scope</strong></p><pre><code>scope也为必填项，用于描述改动的范围，格式为项目名/模块名，例如：xxxServices 。如果一次commit修改多个模块，建议拆分成多次commit，以便更好追踪和维护。</code></pre><p><strong>3. subject</strong></p><pre><code>commit 目的的简短描述，不超过50个字符。结尾一般是 #33224 这样的超链接。链接到本次提交的 url 但不强制</code></pre><p><strong>4. body</strong></p><pre><code>对本次 commit 的详细描述</code></pre><p><strong>5. footer</strong></p><pre><code>Footer 部分只用于以下两种情况：</code></pre><blockquote><p>5.1. 不兼容变动: 如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。例如下边这样：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;attribute&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;@&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure><blockquote><p>5.2. 关闭 Issue: 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p></blockquote><p>完整的提交demo如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fix(dev-infra): remove bots from special thanks section</span><br><span class="line"></span><br><span class="line">With this change we remove known used bots from special thanks section in the changelog.</span><br><span class="line"></span><br><span class="line">PR Close #42697</span><br></pre></td></tr></table></figure><blockquote><p>那么每次都这样编写提交的内容，还要注意对应的格式。我们有没有简单方便的办法呢，那就是使用对应工具的插件。<a href="https://github.com/odinsam/git-commit-plugin">git-commit-plugin</a> 插件可以帮助我们快速的边写提交的信息，但是插件本身并不支持格式化。所以，我在该插件的基础上做了二次开发，具体使用如下：</p></blockquote><ol><li><p>下载安装对应的插件：<a href="https://github.com/odinsam/git-commit-plugin/releases/download/1.0.6/git-commit-plugin-1.0.6.vsix">git-commit-plugin-1.0.6.vsix</a></p></li><li><p>在插件的扩展配置中，进行对应的提交模板配置。可以配置多个，这是因为我公司和我自己的提交格式都不一样。具体可以参见项目的 <a href="https://github.com/odinsam/git-commit-plugin/blob/master/README.md">readme.md</a></p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;GitCommitPlugin.Templates&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;templateName&quot;</span>: <span class="string">&quot;Angular&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;templateContent&quot;</span>: <span class="string">&quot;&lt;icon&gt;&lt;space&gt;&lt;type&gt;(&lt;scope&gt;):&lt;space&gt;&lt;subject&gt;&lt;enter&gt;&lt;body&gt;&lt;enter&gt;&lt;footer&gt;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;templateName&quot;</span>: <span class="string">&quot;git-cz&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;templateContent&quot;</span>: <span class="string">&quot;&lt;type&gt;(&lt;scope&gt;):&lt;space&gt;&lt;icon&gt;&lt;space&gt;&lt;subject&gt;&lt;enter&gt;&lt;body&gt;&lt;enter&gt;&lt;footer&gt;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li>配置插件是否启用图标</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;GitCommitPlugin.ShowEmoji&quot;</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="4"><li>最后就可以方便的提交使用了。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在团队协作开发时，每个人提交代码时都会写 commit message。每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。本文将介绍 Git 提交的规范以及如何利用 git-commit-plugin 插件快速提交规范的commit。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Git" scheme="https://www.odinsam.com/categories/Git/"/>
    
    
    <category term="Git" scheme="https://www.odinsam.com/tags/Git/"/>
    
    <category term="VsCode" scheme="https://www.odinsam.com/tags/VsCode/"/>
    
    <category term="插件" scheme="https://www.odinsam.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>.Net Core使用SqlSugar和Cap</title>
    <link href="https://www.odinsam.com/articles/ed30.html"/>
    <id>https://www.odinsam.com/articles/ed30.html</id>
    <published>2021-06-16T15:21:00.000Z</published>
    <updated>2021-06-16T16:13:08.984Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近期的一次面试当中聊起了 .Net Core 中的 EF 框架和分布式的事务，因为在项目中也遇到过并发导致 EF Core 性能和报错的各种问题，所以就和面试官吐槽了一下，面试官说他们公司用的 SqlSugar 。这个开源组件库我以前知道的，但很久没有关注。回家看了一下发现这个东西已经非常完善，特此将项目中的 EF Core 变更为了 SqlSugar并且加入了 Cap，顺便记录一下遇到的问题。</p></blockquote><span id="more"></span><h4 id="1-sqlsugar简介"><a class="markdownIt-Anchor" href="#1-sqlsugar简介"></a> 1. SqlSugar简介</h4><p>   SqlSugar是一款 老牌 .NET 开源ORM框架，由果糖大数据科技团队维护和更新 ，Github star数仅次于EF 和 Dapper。优点： 简单易用、功能齐全、高性能、轻量级、服务齐全、有专业技术支持一天18小时服务。支持数据库有 MySql、SqlServer、Sqlite、Oracle 、 postgresql、达梦、人大金仓。我的项目习惯了Code First，第一次使用也不知道是否正确。</p><p><strong>Startup.cs</strong> - SqlSugar 注入代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;OdinProjectSugarDbContext&gt;();</span><br><span class="line">OdinInjectHelper.ServiceProvider = services.BuildServiceProvider();</span><br><span class="line"><span class="keyword">var</span> sugarEntity = OdinInjectHelper.GetService&lt;OdinProjectSugarDbContext&gt;();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 初始化数据库</span></span><br><span class="line"><span class="comment">//修改cnf.config Host配置的链接字符串  enable修改为true，即可自动化初识数据库</span></span><br><span class="line"><span class="keyword">if</span> (_Options.DbEntity.InitDb)</span><br><span class="line">&#123;</span><br><span class="line">sugarEntity.CreateTable(<span class="string">&quot;db_odinCore&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OdinProjectSugarDbContext.cs</strong> - DbContext定义以及初始化数据库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinProjectSugarDbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    SqlSugarClient db;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinProjectSugarDbContext</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = DbScoped.Sugar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateTable</span>(<span class="params"><span class="built_in">string</span> databaseName, <span class="built_in">bool</span> Backup = <span class="literal">false</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 判断数据库是否存在，如果不存在这里会有异常</span></span><br><span class="line">            flag = db.DbMaintenance.GetDataBaseList(db).Contains(databaseName);</span><br><span class="line">        &#125;</span><br><span class="line">        catch</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果不存在 初始化创建数据库</span></span><br><span class="line">            db.DbMaintenance.CreateDatabase(databaseName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Logger.Information(<span class="string">$&quot;【 自动创建数据库 】&quot;</span>);</span><br><span class="line">                db.DbMaintenance.CreateDatabase(databaseName);</span><br><span class="line">                <span class="comment">// 我在所有的表后边都实现了一个自己的接口 IDbTable </span></span><br><span class="line">                <span class="keyword">var</span> dbTable = <span class="keyword">typeof</span>(IDbTable);</span><br><span class="line">                <span class="comment">// 找到所有实现了 IDbTable 的类 就是Mysql中对应的表</span></span><br><span class="line">                <span class="keyword">var</span> types = <span class="keyword">this</span>.GetType().Assembly.GetTypes().Where(t =&gt; dbTable.IsAssignableFrom(t));</span><br><span class="line">                <span class="comment">// 是否备份表</span></span><br><span class="line">                <span class="keyword">if</span> (Backup)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> types)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 判断表是否存在  如果不存在则新建表</span></span><br><span class="line">                        <span class="keyword">if</span> (!OdinSugarHelper.CheckTable(item))</span><br><span class="line">                        &#123;</span><br><span class="line">                            DbScoped.Sugar.CodeFirst.BackupTable().InitTables(item);</span><br><span class="line">                            Log.Logger.Information(<span class="string">$&quot;创建数据表【 <span class="subst">&#123;item.ToString()&#125;</span> 】&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> types)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!OdinSugarHelper.CheckTable(item))</span><br><span class="line">                        &#123;</span><br><span class="line">                            DbScoped.Sugar.CodeFirst.InitTables(item);</span><br><span class="line">                            Log.Logger.Information(<span class="string">$&quot;创建数据表【 <span class="subst">&#123;item.ToString()&#125;</span> 】&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                Log.Logger.Information(<span class="string">$&quot;启用【 数据库初始化 】---开始配置&quot;</span>);</span><br><span class="line">                SampleData.Init();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSugarDbSet</span>&lt;<span class="title">Aop_ApiInvokerCatch_DbModel</span>&gt; ApiInvokerCatchs</span> &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> OdinSugarDbSet&lt;Aop_ApiInvokerCatch_DbModel&gt;(db); &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSugarDbSet</span>&lt;<span class="title">Aop_ApiInvokerRecord_DbModel</span>&gt; ApiInvokerRecords</span> &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> OdinSugarDbSet&lt;Aop_ApiInvokerRecord_DbModel&gt;(db); &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSugarDbSet</span>&lt;<span class="title">ErrorCode_DbModel</span>&gt; ErrorCodes</span> &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> OdinSugarDbSet&lt;ErrorCode_DbModel&gt;(db); &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OdinSugarHelper.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinSugarHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> SqlSugarClient Db = DbScoped.Sugar;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 检查表是否存在</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckTable</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> tableName = Db.EntityMaintenance.GetTableName(type);</span><br><span class="line">        <span class="keyword">return</span> Db.DbMaintenance.IsAnyTable(tableName, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 检查表是否存在</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckTable</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> tableName = Db.EntityMaintenance.GetTableName(<span class="keyword">typeof</span>(T));</span><br><span class="line">        <span class="keyword">return</span> Db.DbMaintenance.IsAnyTable(tableName, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 检查表是否存在</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;TableName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckTable</span>(<span class="params"><span class="built_in">string</span> TableName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Db.DbMaintenance.IsAnyTable(TableName, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样程序在运行的时候就基于DbContext的定义可以在数据库新建表。</p><h4 id="2-基于-sqlsugar-使用-cap"><a class="markdownIt-Anchor" href="#2-基于-sqlsugar-使用-cap"></a> 2. 基于 SqlSugar 使用 cap</h4><p>  CAP 是一个在分布式系统中（SOA，MicroService）实现事件总线及最终一致性（分布式事务）的一个开源的 C# 库，她具有轻量级，高性能，易使用等特点。</p><p><strong>Startup.cs</strong> - SqlSugar 注入代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinCapInject(_Options.DbEntity.ConnectionString, _Options.MongoDb.MongoConnection, _Options.RabbitMQ);</span><br></pre></td></tr></table></figure><p><strong>AddOdinCapInject</strong> - 方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddOdinCapInject</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, <span class="built_in">string</span> mysqlConnectionString, <span class="built_in">string</span> mongoConnectionString, RabbitMQOptions rabbitMQOptions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddCap(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果你使用的ADO.NET，根据数据库选择进行配置：</span></span><br><span class="line">        <span class="comment">// x.UseSqlServer(&quot;数据库连接字符串&quot;);</span></span><br><span class="line">        x.UseMySql(mysqlConnectionString);</span><br><span class="line">        <span class="comment">// x.UsePostgreSql(&quot;数据库连接字符串&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果你使用的 MongoDB，你可以添加如下配置：</span></span><br><span class="line">        <span class="comment">// x.UseMongoDB(mongoConnectionString);  //注意，仅支持MongoDB 4.0+集群</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//CAP支持 RabbitMQ、Kafka、AzureServiceBus 等作为MQ，根据使用选择配置：</span></span><br><span class="line">        x.UseRabbitMQ(rb =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            rb.HostName = rabbitMQOptions.HostNames[<span class="number">0</span>];</span><br><span class="line">            rb.UserName = rabbitMQOptions.Account.UserName;</span><br><span class="line">            rb.Password = rabbitMQOptions.Account.Password;</span><br><span class="line">            rb.VirtualHost = rabbitMQOptions.VirtualHost;</span><br><span class="line">            rb.Port = rabbitMQOptions.Port;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// x.UseKafka(&quot;ConnectionStrings&quot;);</span></span><br><span class="line">        <span class="comment">// x.UseAzureServiceBus(&quot;ConnectionStrings&quot;);</span></span><br><span class="line">        x.UseDashboard();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> services;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OdinCapHelper.cs</strong> - 封装，注入到service中即可使用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinCapHelper</span> : <span class="title">IOdinCapHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CapPublish</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> publishName, T contentObj, Action action = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> db = DbScoped.Sugar;</span><br><span class="line">        <span class="keyword">var</span> capBus = OdinInjectHelper.GetService&lt;ICapPublisher&gt;();</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = (MySqlConnection)db.Ado.Connection)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> transaction = connection.BeginTransaction(capBus, autoCommit: <span class="literal">false</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (connection.State != ConnectionState.Open)</span><br><span class="line">                &#123;</span><br><span class="line">                    connection.Open();</span><br><span class="line">                &#125;</span><br><span class="line">                db.Ado.Transaction = (IDbTransaction)transaction.DbTransaction;<span class="comment">//这行很重要</span></span><br><span class="line">                <span class="keyword">if</span> (action != <span class="literal">null</span>) action();</span><br><span class="line">                capBus.Publish&lt;T&gt;(publishName, contentObj);</span><br><span class="line">                transaction.Commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">这里需要注意的是，如果和我一样是使用mysql数据库，那么需要讲nuget包由 SqlSugarCore 替换为 SqlSugarCore.MySqlConnector 切记！！！ 切记！！！</font></p><p>** Controller ** - Action方法中发布消息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = DbScoped.Sugar;</span><br><span class="line">OdinCapHelper.CapPublish(<span class="string">&quot;Sample.RabbitMQ.MySql&quot;</span>, DateTime.Now, () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">&quot;to do something&quot;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>Controller</strong> - Action方法中订阅消费消息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CapSubscribe(<span class="meta-string">&quot;Sample.RabbitMQ.MySql&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Task&gt; <span class="title">CheckReceivedMessage</span>(<span class="params">DateTime time</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(time);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码可以在 <a href="https://github.com/odinsam/OdinMA">GitHub</a>中找到。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;近期的一次面试当中聊起了 .Net Core 中的 EF 框架和分布式的事务，因为在项目中也遇到过并发导致 EF Core 性能和报错的各种问题，所以就和面试官吐槽了一下，面试官说他们公司用的 SqlSugar 。这个开源组件库我以前知道的，但很久没有关注。回家看了一下发现这个东西已经非常完善，特此将项目中的 EF Core 变更为了 SqlSugar并且加入了 Cap，顺便记录一下遇到的问题。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term="SqlSugar" scheme="https://www.odinsam.com/tags/SqlSugar/"/>
    
    <category term="Cap" scheme="https://www.odinsam.com/tags/Cap/"/>
    
  </entry>
  
  <entry>
    <title>使用 BackgroundService 类在微服务中实现后台任务</title>
    <link href="https://www.odinsam.com/articles/2893.html"/>
    <id>https://www.odinsam.com/articles/2893.html</id>
    <published>2021-06-14T09:34:00.000Z</published>
    <updated>2021-06-14T10:18:51.943Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>任何应用程序中都可能需要使用后台任务和计划作业，无论应用程序是否遵循微服务体系结构模式均是如此。 使用微服务体系结构的区别在于，你可以在一个单独的用于托管的进程/容器中实现后台任务。一般在 .NET 中，我们将这些类型的任务称为托管服务，因为它们是托管在主机/应用程序/微服务中的服务/逻辑。 请注意，在这种情况下，托管服务仅表示具有后台任务逻辑的类。</p></blockquote><span id="more"></span><h4 id="1-ihostedservice介绍"><a class="markdownIt-Anchor" href="#1-ihostedservice介绍"></a> 1. IHostedService介绍</h4><p>自 .NET Core 2.0 开始，该框架提供名为 IHostedService 的新接口，有助于轻松实现托管服务。 基本理念是，可以注册多个后台任务（托管服务），在 Web 主机或主机运行时在后台运行具体介绍如下图：</p><p><img src="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/multi-container-microservice-net-applications/media/background-tasks-with-ihostedservice/ihosted-service-webhost-vs-host.png" alt="IHostedService介绍"></p><p>但是，由于大多数后台任务在取消令牌管理和其他典型操作方面都有类似的需求，因此有一个非常方便且可以从中进行派生的抽象基类，名为 BackgroundService（自 .NET Core 2.1 起提供），该类提供设置后台任务所需的主要工作。从抽象基类派生时，只需在自定义的托管服务类中实现 ExecuteAsync() 方法，结合 <a href="https://www.odinsam.com/articles/a3b9.html">利用Canal集合RabbitMQ实现数据和缓存同步</a> 这篇文章，就可以搭建Canal + RabbitMQ + CacheManager 的基本架构，从而实现由 Canal 监控和发现 mysql 数据库的增量信息并推送到 RabbitMQ ，而我们使用BackgroundSerivce 搭建的后台托管服务消费 RabbitMQ 信息修改 Redis 中的缓存数据，而 CacheManager 设定 Redis 缓存为缓存挡板，故而内存中的二级缓存也会得到对应修改。</p><h4 id="2-具体实现"><a class="markdownIt-Anchor" href="#2-具体实现"></a> 2. 具体实现</h4><p>这里是以 ErrorCode 错误码为例，实现一系列操作。首先是 实现 BackgroundService 的子类 OdinBackgroundService ：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinBackgroundService</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ProjectExtendsOptions apiOptions;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ReceiveRabbitMQHelper receiveRabbitMQHelper;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> executionCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Timer _timer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinBackgroundService</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.apiOptions = OdinInjectHelper.GetService&lt;IOptionsSnapshot&lt;ProjectExtendsOptions&gt;&gt;().Value;</span><br><span class="line">        <span class="keyword">this</span>.receiveRabbitMQHelper = <span class="keyword">new</span> ReceiveRabbitMQHelper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        receiveRabbitMQHelper.ReceiveMQ(apiOptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">StartAsync</span>(<span class="params">CancellationToken cancellationToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ExecuteAsync(cancellationToken);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 Run 】\tTime:【<span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line">        _timer = <span class="keyword">new</span> Timer(DoWork, <span class="literal">null</span>, TimeSpan.Zero, TimeSpan.FromMilliseconds(<span class="number">300</span>));</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">StopAsync</span>(<span class="params">CancellationToken cancellationToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 Stop 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line">        _timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.StopAsync(cancellationToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _timer?.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用轮询机制，每300ms消费一次 RabbitMQ 的信息，具体的消费代码 ReceiveRabbitMQHelper 如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReceiveRabbitMQHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IRabbitMQReceiveServer rabbitMQReceiveServer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOdinCanalHelper canalHelper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOdinCacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReceiveRabbitMQHelper</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitMQReceiveServer = OdinInjectHelper.GetService&lt;IRabbitMQReceiveServer&gt;();</span><br><span class="line">        <span class="keyword">this</span>.canalHelper = OdinInjectHelper.GetService&lt;IOdinCanalHelper&gt;();</span><br><span class="line">        <span class="keyword">this</span>.cacheManager = OdinInjectHelper.GetService&lt;IOdinCacheManager&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceiveMQ</span>(<span class="params">ProjectExtendsOptions apiOptions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        rabbitMQReceiveServer.ReceiveJsonMessage(</span><br><span class="line">            apiOptions.RabbitMQ,</span><br><span class="line">            <span class="keyword">new</span> RabbitMQReceivedModel</span><br><span class="line">            &#123;</span><br><span class="line">                ExchangeName = <span class="string">&quot;canal-exchange&quot;</span>,</span><br><span class="line">                QueueName = <span class="string">&quot;canal-queues&quot;</span>,</span><br><span class="line">                AutoAck = <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            (BasicGetResult result, IModel channel) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> msg = RabbitMQReceiveHandler.ReceiveJsonMessageHandler(result, channel);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(msg))</span><br><span class="line">                &#123;</span><br><span class="line">                    System.Console.WriteLine(<span class="string">$&quot;Canal-WorkService:【 Run 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line">                    System.Console.WriteLine(msg);</span><br><span class="line">                    <span class="comment">// 这里用来处理获取到的 RabbitMQ 的增量信息</span></span><br><span class="line">                    ErrorCodeHelper.ErrorCodeCanalHandler(canalHelper, cacheManager, msg);</span><br><span class="line">                    System.Console.WriteLine(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ErrorCodeCanalHandler用来处理获取到的 RabbitMQ 的增量信息，具体封装如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ErrorCodeHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ErrorCodeCanalHandler</span>(<span class="params">IOdinCanalHelper canalHelper, IOdinCacheManager cacheManager, <span class="built_in">string</span> canalString</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> obj = canalHelper.GetCanalInfo(canalString);</span><br><span class="line">        <span class="keyword">var</span> type = obj.type;</span><br><span class="line">        <span class="keyword">switch</span> (type.ToLower())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;insert&quot;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> model = ConvertCanalDataToErrorCodeModel(obj);</span><br><span class="line">                    <span class="keyword">var</span> flag = cacheManager.Add(model.ErrorCode, model);</span><br><span class="line">                    <span class="keyword">if</span> (flag)</span><br><span class="line">                        System.Console.WriteLine(<span class="string">&quot;cacheManager add success&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        System.Console.WriteLine(<span class="string">&quot;cacheManager add fail&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;update&quot;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> model = ConvertCanalDataToErrorCodeModel(obj);</span><br><span class="line">                    cacheManager.Cover&lt;ErrorCode_Model&gt;(model.ErrorCode, model);</span><br><span class="line">                    System.Console.WriteLine(<span class="string">&quot;cacheManager Cover success&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> errorCode = GetErrorCode(obj);</span><br><span class="line">                    <span class="built_in">bool</span> flag = cacheManager.Delete(errorCode);</span><br><span class="line">                    <span class="keyword">if</span> (flag)</span><br><span class="line">                        System.Console.WriteLine(<span class="string">&quot;cacheManager delete success&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        System.Console.WriteLine(<span class="string">&quot;cacheManager delete fail&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetErrorCode</span>(<span class="params">OdinCanalModel obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> errorCode = obj.data[<span class="number">0</span>].GetValue(<span class="string">&quot;ErrorCode&quot;</span>).ToString();</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ErrorCode_Model <span class="title">ConvertCanalDataToErrorCodeModel</span>(<span class="params">OdinCanalModel obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> errorCode = obj.data[<span class="number">0</span>].GetValue(<span class="string">&quot;ErrorCode&quot;</span>).ToString();</span><br><span class="line">        <span class="keyword">var</span> codeShowMessage = obj.data[<span class="number">0</span>].GetValue(<span class="string">&quot;CodeShowMessage&quot;</span>).ToString();</span><br><span class="line">        <span class="keyword">var</span> codeErrorMessage = obj.data[<span class="number">0</span>].GetValue(<span class="string">&quot;CodeErrorMessage&quot;</span>).ToString();</span><br><span class="line">        ErrorCode_Model model = <span class="keyword">new</span> ErrorCode_Model()</span><br><span class="line">        &#123;</span><br><span class="line">            ErrorCode = errorCode,</span><br><span class="line">            ErrorMessage = codeErrorMessage,</span><br><span class="line">            ShowMessage = codeErrorMessage,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样基本的搭建就完成了，完整代码可以在 <a href="https://github.com/odinsam/OdinMA">GitHub</a> 。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;任何应用程序中都可能需要使用后台任务和计划作业，无论应用程序是否遵循微服务体系结构模式均是如此。 使用微服务体系结构的区别在于，你可以在一个单独的用于托管的进程/容器中实现后台任务。一般在 .NET 中，我们将这些类型的任务称为托管服务，因为它们是托管在主机/应用程序/微服务中的服务/逻辑。 请注意，在这种情况下，托管服务仅表示具有后台任务逻辑的类。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/tags/Net-Core/"/>
    
    <category term="微服务" scheme="https://www.odinsam.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="BackgroundService" scheme="https://www.odinsam.com/tags/BackgroundService/"/>
    
  </entry>
  
  <entry>
    <title>基于HttpClientFactory的封装和使用</title>
    <link href="https://www.odinsam.com/articles/4ff6.html"/>
    <id>https://www.odinsam.com/articles/4ff6.html</id>
    <published>2021-06-10T22:08:00.000Z</published>
    <updated>2021-06-10T22:49:13.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>.Net Core2.0 版本以前 HttpClient 还是挺坑的，我们需要操心怎么建立如何释放，而且代码质量不好还会影响 HttpClient 的性能和访问速度。2.0版本以后 HttpClientFactory 的出现解决了我们所有的痛点，我们不须要关心如何建立 HttpClient 又如何释放它。经过它能够建立具备特定业务的HttpClient，并且能够很友好的和 DI 容器结合使用。</p></blockquote><span id="more"></span><h4 id="1-首先在-startupcs-文件的-configureservices-方法中注入-httpclient"><a class="markdownIt-Anchor" href="#1-首先在-startupcs-文件的-configureservices-方法中注入-httpclient"></a> 1. 首先在 Startup.cs 文件的 ConfigureServices 方法中注入 HttpClient</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="keyword">new</span> HttpClientHandler();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> cerItem <span class="keyword">in</span> _Options.SslCers)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(cerItem.CerPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clientCertificate = <span class="keyword">new</span> X509Certificate2(cerItem.CerPath, cerItem.CerPassword);</span><br><span class="line">        handler.ClientCertificates.Add(clientCertificate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> handlerWithCer = <span class="keyword">new</span> HttpClientHandler();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> cerItem <span class="keyword">in</span> _Options.SslCers)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(cerItem.CerPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clientCertificate = <span class="keyword">new</span> X509Certificate2(cerItem.CerPath, cerItem.CerPassword);</span><br><span class="line">        handlerWithCer.ClientCertificates.Add(clientCertificate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">services.AddHttpClient(<span class="string">&quot;OdinClient&quot;</span>, c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;).ConfigurePrimaryHttpMessageHandler(() =&gt; handler);</span><br><span class="line">services.AddHttpClient(<span class="string">&quot;OdinClientCer&quot;</span>, c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;).ConfigurePrimaryHttpMessageHandler(() =&gt; handlerWithCer);</span><br></pre></td></tr></table></figure><p>这里我注入了两个 HttpClient，一个是没有证书的，一个是有证书的。<font color="red">如何在 Post 和 Get 的时候动态传递证书，有知道的小伙伴可以留言告诉我一下（我没找到这个解决的办法）。</font></p><h4 id="2-接下来可以在拦截器里开启-requestbody-重复读取"><a class="markdownIt-Anchor" href="#2-接下来可以在拦截器里开启-requestbody-重复读取"></a> 2. 接下来可以在拦截器里开启 Request.Body 重复读取。</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.HttpContext.Request.EnableBuffering();</span><br></pre></td></tr></table></figure><h4 id="3-封装获取requestbody的方法"><a class="markdownIt-Anchor" href="#3-封装获取requestbody的方法"></a> 3. 封装获取Request.Body的方法</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">HttpRequestExtends</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ReadRequestBody</span>(<span class="params"><span class="keyword">this</span> HttpRequest request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(request.Body);</span><br><span class="line">        <span class="keyword">var</span> data = reader.ReadToEndAsync();</span><br><span class="line">        request.Body.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">        <span class="keyword">return</span> data.Result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-封装httpclient方法这里只是封装了-get-和-post-作为演示"><a class="markdownIt-Anchor" href="#4-封装httpclient方法这里只是封装了-get-和-post-作为演示"></a> 4. 封装HttpClient方法(这里只是封装了 Get 和 Post 作为演示)</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinHttpClientFactory</span> : <span class="title">IOdinHttpClientFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">GetRequestAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> clientName, <span class="built_in">string</span> uri, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; customHeaders = <span class="literal">null</span>, <span class="built_in">string</span> mediaType = <span class="string">&quot;application/json&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clientFactory = OdinInjectHelper.GetService&lt;IHttpClientFactory&gt;();</span><br><span class="line">        <span class="keyword">var</span> client = clientFactory.CreateClient(clientName);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage()</span><br><span class="line">        &#123;</span><br><span class="line">            RequestUri = <span class="keyword">new</span> Uri(uri),</span><br><span class="line">            Method = HttpMethod.Get,</span><br><span class="line">        &#125;;</span><br><span class="line">        RequestHeaderAdd(request, customHeaders);</span><br><span class="line">        request.Headers.Accept.Add(<span class="keyword">new</span> MediaTypeWithQualityHeaderValue(mediaType));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> GetResponseResult&lt;T&gt;(client, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">PostRequestAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> clientName, <span class="built_in">string</span> uri, Object obj, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; customHeaders = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                <span class="built_in">string</span> mediaType = <span class="string">&quot;application/json&quot;</span>, Encoding encoder = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clientFactory = OdinInjectHelper.GetService&lt;IHttpClientFactory&gt;();</span><br><span class="line">        <span class="keyword">var</span> client = clientFactory.CreateClient(clientName);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage()</span><br><span class="line">        &#123;</span><br><span class="line">            RequestUri = <span class="keyword">new</span> Uri(uri),</span><br><span class="line">            Method = HttpMethod.Post,</span><br><span class="line">        &#125;;</span><br><span class="line">        RequestHeaderAdd(request, customHeaders);</span><br><span class="line">        request.Content = GenerateContent(obj, mediaType, encoder);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> GetResponseResult&lt;T&gt;(client, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpContent <span class="title">GenerateContent</span>(<span class="params">Object obj, <span class="built_in">string</span> mediaType, Encoding encoder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(String) == obj.GetType())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GenerateContent&lt;String&gt;(obj.ToString(), mediaType, encoder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GenerateContent&lt;Object&gt;(obj, mediaType, encoder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpContent <span class="title">GenerateContent</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj, <span class="built_in">string</span> mediaType, Encoding encoder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder jsonContent = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="built_in">string</span> sendContent = <span class="built_in">string</span>.Empty;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic = ConvertPostDataToDictionary&lt;T&gt;(obj, encoder);</span><br><span class="line">        <span class="keyword">if</span> (mediaType == <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sendContent = JsonConvert.SerializeObject(dic);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sendContent = ConvertDictionaryToPostFormData(dic).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringContent(</span><br><span class="line">                        sendContent,</span><br><span class="line">                        encoder == <span class="literal">null</span> ? Encoding.UTF8 : encoder,</span><br><span class="line">                        mediaType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">static</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">PostResponseResult</span>&lt;<span class="title">T</span>&gt;(<span class="params">HttpClient client, HttpRequestMessage request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line">        <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetResult&lt;T&gt;(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;请求出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">static</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">GetResponseResult</span>&lt;<span class="title">T</span>&gt;(<span class="params">HttpClient client, HttpRequestMessage request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line">        <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetResult&lt;T&gt;(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;请求出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RequestHeaderAdd</span>(<span class="params">HttpRequestMessage request, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; customHeaders</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (customHeaders != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; customHeader <span class="keyword">in</span> customHeaders)</span><br><span class="line">            &#123;</span><br><span class="line">                request.Headers.Add(customHeader.Key, customHeader.Value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> T <span class="title">GetResult</span>&lt;<span class="title">T</span>&gt;(<span class="params">HttpResponseMessage httpResponseMessage</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 确认响应成功，否则抛出异常</span></span><br><span class="line">        <span class="comment">// result.EnsureSuccessStatusCode();</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(<span class="built_in">byte</span>[]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)Convert.ChangeType(httpResponseMessage.Content.ReadAsByteArrayAsync(), <span class="keyword">typeof</span>(T));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(Stream))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)Convert.ChangeType(httpResponseMessage.Content.ReadAsStreamAsync().Result, <span class="keyword">typeof</span>(T));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">                <span class="keyword">return</span> (T)Convert.ChangeType(httpResponseMessage.Content.ReadAsStringAsync().Result, <span class="keyword">typeof</span>(T));</span><br><span class="line">            <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;T&gt;(httpResponseMessage.Content.ReadAsStringAsync().Result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Dictionary</span>&lt;<span class="title">string</span>, <span class="title">string</span>&gt; <span class="title">ConvertPostDataToDictionary</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj, Encoding encoder = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(String))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> obj.ToString().Split(<span class="string">&#x27;&amp;&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                dic.Add(</span><br><span class="line">                    item.Split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">                    encoder == <span class="literal">null</span> || encoder == Encoding.UTF8 ?</span><br><span class="line">                    item.Split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                    :</span><br><span class="line">                    item.Split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].ConvertStringEncode(Encoding.UTF8, encoder)</span><br><span class="line">                    );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> obj.GetType().GetRuntimeProperties())</span><br><span class="line">            &#123;</span><br><span class="line">                dic.Add(item.Name,</span><br><span class="line">                        encoder == <span class="literal">null</span> || encoder == Encoding.UTF8 ?</span><br><span class="line">                        item.GetValue(obj).ToString()</span><br><span class="line">                        :</span><br><span class="line">                        item.GetValue(obj).ToString().ConvertStringEncode(Encoding.UTF8, encoder)</span><br><span class="line">                        );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StringBuilder <span class="title">ConvertDictionaryToPostFormData</span>(<span class="params">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (dic != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">bool</span> hasParam = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; kv <span class="keyword">in</span> dic)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> name = kv.Key;</span><br><span class="line">                <span class="built_in">string</span> <span class="keyword">value</span> = kv.Value;</span><br><span class="line">                <span class="comment">// 忽略参数名或参数值为空的参数</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(name) &amp;&amp; !<span class="built_in">string</span>.IsNullOrEmpty(<span class="keyword">value</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (hasParam)</span><br><span class="line">                    &#123;</span><br><span class="line">                        builder.Append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    builder.Append(name);</span><br><span class="line">                    builder.Append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                    builder.Append(<span class="keyword">value</span>);</span><br><span class="line">                    hasParam = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-最后封装获取requestbody内容后二次封装的方法因为我会遇到-一个-post-请求但是-url-还带有参数的情况所以这里封装的稍微复杂一些"><a class="markdownIt-Anchor" href="#5-最后封装获取requestbody内容后二次封装的方法因为我会遇到-一个-post-请求但是-url-还带有参数的情况所以这里封装的稍微复杂一些"></a> 5. 最后封装获取Request.Body内容后二次封装的方法，因为我会遇到 一个 Post 请求但是 Url 还带有参数的情况，所以这里封装的稍微复杂一些</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestParamsModel <span class="title">GetRequestParams</span>(<span class="params"><span class="keyword">this</span> Controller controller, <span class="built_in">string</span> paramFormat = <span class="literal">null</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HttpContext context = controller.HttpContext;</span><br><span class="line">    <span class="keyword">var</span> request = context.Request;</span><br><span class="line">    JObject jobj = <span class="keyword">new</span> JObject();</span><br><span class="line">    RequestParamsModel requestParams = <span class="keyword">new</span> RequestParamsModel();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(context.Request.QueryString.ToString()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> param = request.QueryString.ToString().Substring(<span class="number">1</span>);</span><br><span class="line">        requestParams.RequestQueryString = JsonConvert.DeserializeObject&lt;JObject&gt;(JsonConvert.SerializeObject(OdinHttpClientFactory.ConvertPostDataToDictionary&lt;<span class="built_in">string</span>&gt;(param)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.ContentType != <span class="literal">null</span> &amp;&amp; request.ContentType.StartsWith(<span class="string">&quot;application/json&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> param = request.ReadRequestBody();</span><br><span class="line">        requestParams.RequestFormData = JsonConvert.DeserializeObject&lt;JObject&gt;(param);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.ContentType != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            (request.ContentType.StartsWith(<span class="string">&quot;text/plain&quot;</span>) || request.ContentType.StartsWith(<span class="string">&quot;application/javascript&quot;</span>) ||</span><br><span class="line">            request.ContentType.StartsWith(<span class="string">&quot;text/html&quot;</span>) || request.ContentType.StartsWith(<span class="string">&quot;application/xml&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> param = request.ReadRequestBody();</span><br><span class="line">        requestParams.RequestFormDataString = param.Replace(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.ContentType != <span class="literal">null</span> &amp;&amp; request.ContentType.StartsWith(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> param = request.ReadRequestBody();</span><br><span class="line">        requestParams.RequestFormData = JsonConvert.DeserializeObject&lt;JObject&gt;(JsonConvert.SerializeObject(OdinHttpClientFactory.ConvertPostDataToDictionary&lt;<span class="built_in">string</span>&gt;(param)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.ContentType != <span class="literal">null</span> &amp;&amp; request.ContentType.StartsWith(<span class="string">&quot;multipart/form-data&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> kv <span class="keyword">in</span> request.Form)</span><br><span class="line">        &#123;</span><br><span class="line">            dic.Add(kv.Key, kv.Value);</span><br><span class="line">        &#125;</span><br><span class="line">        requestParams.RequestFormData = JsonConvert.DeserializeObject&lt;JObject&gt;(JsonConvert.SerializeObject(dic));</span><br><span class="line">        List&lt;Dictionary&lt;<span class="built_in">string</span>, MemoryStream&gt;&gt; files = <span class="keyword">new</span> List&lt;Dictionary&lt;<span class="built_in">string</span>, MemoryStream&gt;&gt;();</span><br><span class="line">        <span class="built_in">long</span> filesize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> file <span class="keyword">in</span> request.Form.Files)</span><br><span class="line">        &#123;</span><br><span class="line">            filesize += file.Length;</span><br><span class="line">            <span class="keyword">if</span> (filesize &gt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">4</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;文件过大无法上传，请联系管理员申请使用大文件上传服务器&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> fileBytes = <span class="keyword">new</span> Byte[file.Length];</span><br><span class="line">            MemoryStream fileStream = <span class="keyword">new</span> MemoryStream(fileBytes);</span><br><span class="line">            file.CopyTo(fileStream);</span><br><span class="line">            files.Add(<span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, MemoryStream&gt;() &#123; &#123; file.Name, fileStream &#125; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        requestParams.RequestUploadFile = files;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> requestParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>其中文件上传大小可以通过配置文件限制，现在及时我们遇到有Get请求，但是带着FormData文件的情况，我们也可以正常获取所有信息，其中信息内容格式如下：</code></pre><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RequestParamsModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Url 地址栏参数信息 自动转化为 JObject</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;value&gt;</span><span class="doctag">&lt;/value&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> JObject RequestQueryString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当 请求内容包含 application/text application/xml text/plain 和 application/javascript 是，获取内容一律视为 string，后期再自行处理</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;value&gt;</span><span class="doctag">&lt;/value&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> String RequestFormDataString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> FormData 请求时所有的键值对，自动转化为 JObject</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;value&gt;</span><span class="doctag">&lt;/value&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> JObject RequestFormData &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> FormData 请求时附带的文件，key为文件名 value为文件的stream格式</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;value&gt;</span><span class="doctag">&lt;/value&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dictionary&lt;<span class="built_in">string</span>, MemoryStream&gt;&gt; RequestUploadFile &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-其中这个封装并没有处理body包含-binary-格式和-graphql-格式如有需要可以自行扩展-此时当我们遇到"><a class="markdownIt-Anchor" href="#6-其中这个封装并没有处理body包含-binary-格式和-graphql-格式如有需要可以自行扩展-此时当我们遇到"></a> 6. 其中，这个封装并没有处理Body包含 binary 格式和 GraphQL 格式，如有需要可以自行扩展。此时，当我们遇到</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = OdinHttpClientFactory.PostRequestAsync&lt;OdinActionResult&gt;(<span class="string">&quot;OdinClient&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;http://127.0.0.1:20303/api/v1/LinkTrack/pfda?id=4&amp;name=admin&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> &#123; User = <span class="string">&quot;odinsam&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><pre><code>这样的请求时，我们就会得到如下内容:(OdinActionResult是我自己定义的一个统一返回格式而已)</code></pre><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RequestQueryString - <span class="literal">null</span></span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;4&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">RequestFormDataString - <span class="literal">null</span></span><br><span class="line">RequestFormData</span><br><span class="line">&#123;<span class="string">&quot;User&quot;</span>:<span class="string">&quot;odinsam&quot;</span>&#125;</span><br><span class="line">RequestUploadFile - <span class="literal">null</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;.Net Core2.0 版本以前 HttpClient 还是挺坑的，我们需要操心怎么建立如何释放，而且代码质量不好还会影响 HttpClient 的性能和访问速度。2.0版本以后 HttpClientFactory 的出现解决了我们所有的痛点，我们不须要关心如何建立 HttpClient 又如何释放它。经过它能够建立具备特定业务的HttpClient，并且能够很友好的和 DI 容器结合使用。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/tags/Net-Core/"/>
    
    <category term="HttpClientFactory" scheme="https://www.odinsam.com/tags/HttpClientFactory/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Pure主题给Post页面添加keywords</title>
    <link href="https://www.odinsam.com/articles/409f.html"/>
    <id>https://www.odinsam.com/articles/409f.html</id>
    <published>2021-06-09T00:51:00.000Z</published>
    <updated>2021-06-10T10:15:38.606Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 这里是他的中文文档，无论是结合 Github、Gitee 或者是在私人的云端都可以快速部署，非常高效快捷。为了更好的seo优化，使用pure主题给每一个post页面添加keywords 关键字。</p></blockquote><span id="more"></span><h4 id="找到主题-purelayout_commonheadejs-文件在-title-标签后添加以下代码"><a class="markdownIt-Anchor" href="#找到主题-purelayout_commonheadejs-文件在-title-标签后添加以下代码"></a> 找到主题 pure/layout/_common/head.ejs 文件，在 title 标签后添加以下代码:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (post.tags &amp;&amp; post.tags.length) &#123; %&gt; </span><br><span class="line">&lt;% <span class="keyword">var</span> kw = <span class="string">&quot;&quot;</span>;post.tags.forEach(<span class="function"><span class="params">t</span>=&gt;</span>&#123; kw+=t.name+<span class="string">&#x27;,&#x27;</span> &#125;);kw = kw.substr(<span class="number">0</span>,kw.length-<span class="number">1</span>) %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&lt;%= kw %&gt;&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.keywords)&#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&lt;%= config.keywords %&gt;&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;%&#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="这样每一个页面都可以依据发布时的tag生成keywords标签"><a class="markdownIt-Anchor" href="#这样每一个页面都可以依据发布时的tag生成keywords标签"></a> 这样每一个页面都可以依据发布时的tag生成keywords标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Hexo,Seo,Pure&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="如果发布时没有tag那么会依据hexo的配置文件font-colorred注意不是pure的配置文件font-_configyml-中的-keywords-生成对应的-meta-标签"><a class="markdownIt-Anchor" href="#如果发布时没有tag那么会依据hexo的配置文件font-colorred注意不是pure的配置文件font-_configyml-中的-keywords-生成对应的-meta-标签"></a> 如果发布时没有tag，那么会依据hexo的配置文件(<font color="red">注意不是pure的配置文件</font>) _config.yml 中的 keywords 生成对应的 meta 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;.Net Core,javascript,typescript,html5,css,css3,linux,react,vue,js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;https://hexo.io/zh-cn/&lt;/a&gt; 这里是他的中文文档，无论是结合 Github、Gitee 或者是在私人的云端都可以快速部署，非常高效快捷。为了更好的seo优化，使用pure主题给每一个post页面添加keywords 关键字。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://www.odinsam.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://www.odinsam.com/tags/Hexo/"/>
    
    <category term="Seo" scheme="https://www.odinsam.com/tags/Seo/"/>
    
    <category term="Pure" scheme="https://www.odinsam.com/tags/Pure/"/>
    
  </entry>
  
  <entry>
    <title>利用Canal集合RabbitMQ实现数据和缓存同步</title>
    <link href="https://www.odinsam.com/articles/a3b9.html"/>
    <id>https://www.odinsam.com/articles/a3b9.html</id>
    <published>2021-06-08T21:34:00.000Z</published>
    <updated>2021-07-06T15:04:30.781Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Canal的主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。他可以模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议。MySQL master收到dump请求，开始推送 binary log 给 slave (即canal)，canal解析binary log 对象(原始为 byte 流)。</p></blockquote><span id="more"></span><h4 id="canal介绍"><a class="markdownIt-Anchor" href="#canal介绍"></a> Canal介绍</h4><blockquote><p>Canal 的 Github：<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a> 里边有详细介绍说明以及安装方法。具体不在叙述。</p></blockquote><h4 id="mysql改动"><a class="markdownIt-Anchor" href="#mysql改动"></a> MySql改动</h4><blockquote><p>首先需要给mysql创建对应的canal用户</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;canal&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><blockquote><p>其次修改 my.cnf 文件并 <font color="red">重启数据库</font></p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin <span class="comment"># 开启 binlog</span></span><br><span class="line"><span class="attr">binlog-format</span>=ROW <span class="comment"># 选择 ROW 模式</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="number">1</span> <span class="comment"># 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span></span><br></pre></td></tr></table></figure><h4 id="canal配置"><a class="markdownIt-Anchor" href="#canal配置"></a> Canal配置</h4><blockquote><p>Canal单机环境(开发代码测试)主要配置两个文件，分别是 conf/canal.properties 文件和 conf/example/instance.properties 文件。具体配置如下:</p></blockquote><p>canal.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">##################################################################################################</span><br><span class="line">####### 这部分结构是配置文件自带的 只需要写清楚即可，其中 exchange 为 rabbitMQ的exchange的名字</span><br><span class="line">####### username 和 password 是 rabbitMQ 的 用户名和密码 (我自己新建了一个rabbitMQ用户)</span><br><span class="line">##################################################################################################</span><br><span class="line">    </span><br><span class="line">#########                   RabbitMQ         #############</span><br><span class="line">##################################################</span><br><span class="line">rabbitmq.host = 127.0.0.1</span><br><span class="line">rabbitmq.virtual.host = /</span><br><span class="line">rabbitmq.exchange = canal-exchange</span><br><span class="line">rabbitmq.username = canalConsumer</span><br><span class="line">rabbitmq.password = canalConsumer</span><br><span class="line">rabbitmq.deliveryMode =</span><br></pre></td></tr></table></figure><p>最为主要的是要找到配置文件中 <font color="red">canal.serverMode = rabbitMQ</font> 他的默认值是 tcp 切记要改为 <font color="red">rabbitMQ</font></p><p>instance.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">canal.instance.master.address=127.0.0.1:3306  #数据库的 ip:port</span><br><span class="line">    </span><br><span class="line">canal.instance.dbUsername=canal #数据库的 用户名</span><br><span class="line">canal.instance.dbPassword=173Canal~#数据库的 密码 </span><br><span class="line">    </span><br><span class="line">canal.instance.tsdb.dir=$&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span><br><span class="line">canal.instance.tsdb.url=jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;/h2;CACHE_SIZE=1000;MODE=MYSQL;</span><br><span class="line">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb</span><br><span class="line">    </span><br><span class="line"># canal.instance.filter.regex=.*\\..*# https://github.com/alibaba/canal/wiki/AdminGuide 搜索 canal.instance.filter.regex 有详细说明</span><br><span class="line">canal.instance.filter.regex=db_OdinOIS.Logs  # 要监控的库和表  https://github.com/alibaba/canal/wiki/AdminGuide 搜索 </span><br><span class="line">canal.instance.filter.regex 有详细说明</span><br><span class="line">    </span><br><span class="line">canal.mq.topic=canal-routingkey # rabbitMQ 创建 queues 时的 routing key 的值</span><br></pre></td></tr></table></figure><h4 id="数据解析"><a class="markdownIt-Anchor" href="#数据解析"></a> 数据解析</h4><blockquote><p>至此如果以上步骤都没有问题的话，执行 ./bin/startup.sh 启动，并在你监控的表中设置增量数据，rabbitMQ 就会有对应数据。获取到的数据为json格式，具体说明如下:</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// data内为获取到的增量数据 key是数据库对应的字段 value是数据库的值</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1487&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Timestamp&quot;</span>: <span class="string">&quot;2021-06-09 05:23:12.538+08:00&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Level&quot;</span>: <span class="string">&quot;Information&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;Entity Framework Core&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Exception&quot;</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">&quot;Properties&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;_ts&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="comment">// 库名</span></span><br><span class="line"><span class="attr">&quot;database&quot;</span>: <span class="string">&quot;db_OdinOIS&quot;</span>,</span><br><span class="line"><span class="attr">&quot;es&quot;</span>: <span class="number">1623187400000</span>,</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;isDdl&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 字段对应mysql的数据类型</span></span><br><span class="line"><span class="attr">&quot;mysqlType&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="string">&quot;int&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Timestamp&quot;</span>: <span class="string">&quot;varchar(100)&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Level&quot;</span>: <span class="string">&quot;varchar(15)&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Exception&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line"><span class="attr">&quot;Properties&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line"><span class="attr">&quot;_ts&quot;</span>: <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 如果是 update 操作这里会是更新前的数据</span></span><br><span class="line"><span class="attr">&quot;old&quot;</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="comment">// 主键</span></span><br><span class="line"><span class="attr">&quot;pkNames&quot;</span>: [<span class="string">&quot;id&quot;</span>],</span><br><span class="line"><span class="attr">&quot;sql&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;sqlType&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">&quot;Timestamp&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">&quot;Level&quot;</span>: <span class="number">12</span>,</span><br><span class="line"><span class="attr">&quot;Message&quot;</span>: <span class="number">2005</span>,</span><br><span class="line"><span class="attr">&quot;Exception&quot;</span>: <span class="number">-4</span>,</span><br><span class="line"><span class="attr">&quot;Properties&quot;</span>: <span class="number">2005</span>,</span><br><span class="line"><span class="attr">&quot;_ts&quot;</span>: <span class="number">93</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 表名字</span></span><br><span class="line"><span class="attr">&quot;table&quot;</span>: <span class="string">&quot;Logs&quot;</span>,</span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="attr">&quot;ts&quot;</span>: <span class="number">1623187530269</span>,</span><br><span class="line"><span class="comment">// 操作类型</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;INSERT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以利用代码从 rabbitMQ 中消费对应的信息，然后再做其他操作。当然也可以利用 Canal 结合 redis 实现 mysql 和缓存数据同步，在利用CacheManager类库，利用redis做挡板，就可以同时实现 redis 缓存和内存缓存同步。这样整个分布式项目就可以实现读写分离、缓存同步。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Canal的主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。他可以模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议。MySQL master收到dump请求，开始推送 binary log 给 slave (即canal)，canal解析binary log 对象(原始为 byte 流)。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term="Mysql" scheme="https://www.odinsam.com/tags/Mysql/"/>
    
    <category term=".Net Core" scheme="https://www.odinsam.com/tags/Net-Core/"/>
    
    <category term="Canal" scheme="https://www.odinsam.com/tags/Canal/"/>
    
    <category term="RabbitMQ" scheme="https://www.odinsam.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Serilog封装扩展并写入Mysql</title>
    <link href="https://www.odinsam.com/articles/b919.html"/>
    <id>https://www.odinsam.com/articles/b919.html</id>
    <published>2021-06-06T20:45:00.000Z</published>
    <updated>2021-06-09T05:36:20.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Serilog是 .NET 中最著名的结构化日志类库。大多数情况下，中小型项目会将日志直接记录在一个对应的文件夹中比如Logs文件夹，并且可以按照日志的等级创建子文件夹比如errror、debug等等，再按照日期创建子文件最后按照日志文件大小上限做日志文件的划分。在一些大型项目中需要将日志写入数据库，文章讲述如何使用Serilog日志类库在mysql数据库中自动创建logs表并将日志写入表中。</p></blockquote><span id="more"></span> <ol><li><p>封装模型：</p><p>LogWriteFileModel.cs</p></li></ol>   <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogWriteFileModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FileName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> FileSizeLimitBytes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> RollOnFileSizeLimit &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Shared &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> TimeSpan FlushToDiskInterval &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = TimeSpan.FromSeconds(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LogWriteToConsoleModel.cs</p>   <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogWriteToConsoleModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OutputTemplate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> SystemConsoleTheme ConsoleTheme &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = SystemConsoleTheme.Colored;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LogWriteMySqlModel.cs</p>   <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogWriteMySqlModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>扩展类</p><p>安装package Serilog.Sinks.MySQL, Version=4.0.0.0，LoggerConfigurationExtends.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LoggerConfigurationExtends</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoggerConfiguration <span class="title">OdinWriteLog</span>(<span class="params"><span class="keyword">this</span> LoggerConfiguration loggerConfiguration, LogWriteFileModel logWriteFileModel, LogWriteToConsoleModel logWriteToConsole, LogWriteMySqlModel logWriteMySqlModel</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> loggerConfiguration</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Debug, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             )</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Error, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             )</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Fatal, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             )</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Information, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             )</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Warning, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             );</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoggerConfiguration <span class="title">OdinWrite</span>(<span class="params"><span class="keyword">this</span> LoggerSinkConfiguration loggerSinkConfiguration, LogEventLevel logLevel, LogWriteFileModel logWriteFileModel, LogWriteToConsoleModel logWriteToConsole, LogWriteMySqlModel logWriteMySqlModel</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> loggerSinkConfiguration.Logger(fileLogger =&gt;</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">var</span> config = SerilogHelper.OdinWriteToFile(fileLogger, logLevel, logWriteFileModel);</span><br><span class="line">             <span class="keyword">if</span> (logWriteToConsole != <span class="literal">null</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                 config.WriteTo.Console(</span><br><span class="line">                     outputTemplate:</span><br><span class="line">                         <span class="built_in">string</span>.IsNullOrEmpty(logWriteToConsole.OutputTemplate)</span><br><span class="line">                         ?</span><br><span class="line">                         <span class="string">&quot;&#123;Timestamp:yyyy-MM-dd HH:mm:ss&#125; [&#123;Level&#125;] &#123;Message&#125;&#123;NewLine&#125;&#123;Exception&#125;&quot;</span></span><br><span class="line">                         :</span><br><span class="line">                         logWriteToConsole.OutputTemplate,</span><br><span class="line">                     theme: logWriteToConsole.ConsoleTheme</span><br><span class="line">                 );</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (logWriteMySqlModel != <span class="literal">null</span>)</span><br><span class="line">                 config.WriteTo.MySQL(connectionString: logWriteMySqlModel.ConnectionString);</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>封装类:  SerilogHelper.cs</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerilogHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoggerConfiguration <span class="title">OdinWriteToFile</span>(<span class="params">LoggerConfiguration fileLogger, LogEventLevel logLevel, LogWriteFileModel logWriteModel</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fileLogger.Filter</span><br><span class="line">               .ByIncludingOnly(p =&gt; p.Level.Equals(logLevel))</span><br><span class="line">               .WriteTo.File(</span><br><span class="line">                   path:</span><br><span class="line">                    <span class="built_in">string</span>.IsNullOrEmpty(logWriteModel.FileName) ?</span><br><span class="line">                        <span class="string">$&quot;logs/<span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyyMMdd&quot;</span>)&#125;</span>/log-<span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyyMMdd&quot;</span>)&#125;</span>-<span class="subst">&#123;logLevel.ToString()&#125;</span>.txt&quot;</span></span><br><span class="line">                        :</span><br><span class="line">                        logWriteModel.FileName,</span><br><span class="line">                   fileSizeLimitBytes: logWriteModel.FileSizeLimitBytes,</span><br><span class="line">                   rollOnFileSizeLimit: logWriteModel.RollOnFileSizeLimit,</span><br><span class="line">                   shared: logWriteModel.Shared,</span><br><span class="line">                   flushToDiskInterval: logWriteModel.FlushToDiskInterval</span><br><span class="line">               );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Log设置</span></span><br><span class="line">Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">    <span class="comment">// 最小的日志输出级别</span></span><br><span class="line">    .MinimumLevel.Information()</span><br><span class="line">    <span class="comment">//.MinimumLevel.Information ()</span></span><br><span class="line">    <span class="comment">// 日志调用类命名空间如果以 System 开头，覆盖日志输出最小级别为 Information</span></span><br><span class="line">    .MinimumLevel.Override(<span class="string">&quot;System&quot;</span>, LogEventLevel.Information)</span><br><span class="line">    <span class="comment">// 日志调用类命名空间如果以 Microsoft 开头，覆盖日志输出最小级别为 Information</span></span><br><span class="line">    .MinimumLevel.Override(<span class="string">&quot;Microsoft&quot;</span>, LogEventLevel.Information)</span><br><span class="line">    .OdinWriteLog(</span><br><span class="line">        <span class="keyword">new</span> LogWriteFileModel &#123; &#125;, <span class="keyword">new</span> LogWriteToConsoleModel &#123; &#125;, <span class="keyword">new</span> LogWriteMySqlModel &#123; ConnectionString = Configuration.GetSection(<span class="string">&quot;ProjectConfigOptions:DbEntity:ConnectionString&quot;</span>).Value &#125;</span><br><span class="line">    )</span><br><span class="line">    .CreateLogger();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Serilog是 .NET 中最著名的结构化日志类库。大多数情况下，中小型项目会将日志直接记录在一个对应的文件夹中比如Logs文件夹，并且可以按照日志的等级创建子文件夹比如errror、debug等等，再按照日期创建子文件最后按照日志文件大小上限做日志文件的划分。在一些大型项目中需要将日志写入数据库，文章讲述如何使用Serilog日志类库在mysql数据库中自动创建logs表并将日志写入表中。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/tags/Net-Core/"/>
    
    <category term="Serilog" scheme="https://www.odinsam.com/tags/Serilog/"/>
    
    <category term="Log" scheme="https://www.odinsam.com/tags/Log/"/>
    
  </entry>
  
</feed>
