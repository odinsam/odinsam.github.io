<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OdinSam&#39;s blogs-一个热爱编程性格开朗的Coder</title>
  
  
  <link href="https://www.odinsam.com/atom.xml" rel="self"/>
  
  <link href="https://www.odinsam.com/"/>
  <updated>2022-10-25T14:22:19.585Z</updated>
  <id>https://www.odinsam.com/</id>
  
  <author>
    <name>OdinSam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue3.0 - Pinia 状态管理框架</title>
    <link href="https://www.odinsam.com/articles/99b6.html"/>
    <id>https://www.odinsam.com/articles/99b6.html</id>
    <published>2022-10-25T12:42:00.000Z</published>
    <updated>2022-10-25T14:22:19.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Pinia 是 Vue 的存储库，它允许您跨组件/页面共享状态。与 Vuex 相比，Pinia 提供了一个更简单的 API，具有更少的规范，提供了 Composition-API 风格的 API，最重要的是，在与 TypeScript 一起使用时具有可靠的类型推断支持。</p></blockquote><span id="more"></span><h4 id="1-与vuex的对比"><a class="markdownIt-Anchor" href="#1-与vuex的对比"></a> 1. 与vuex的对比</h4><blockquote><ol><li>pinia中只有state、getter、action，抛弃了Vuex中的Mutation，减少工作量。</li><li>pinia中的action支持同步和异步，Vuex不支持</li><li>良好的Typescript支持，Vue使用TS来编写时使用pinia非常合适</li><li>无需创建各个模块嵌套。在Vuex中如果数据过多，一般会通常分模块来进行管理，回略显得麻烦，而pinia中每个store都是独立的，互相不影响。</li><li>体积非常小，只有1KB左右。</li><li>pinia支持插件来扩展自身功能。</li><li>支持服务端渲染。</li></ol></blockquote><h4 id="2-安装和使用"><a class="markdownIt-Anchor" href="#2-安装和使用"></a> 2. 安装和使用</h4><ol><li>安装：vue create vue-app 采用 Manually select features 形式安装。</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//上下移动  space空格选中  a全选  i反选    enter回车确定</span><br><span class="line">Vue CLI v5.<span class="number">0</span>.<span class="number">8</span></span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span><br><span class="line"> ◉ Babel</span><br><span class="line"> ◉ TypeScript</span><br><span class="line">❯◯ Progressive Web App (PWA) Support</span><br><span class="line"> ◉ Router</span><br><span class="line"> ◯ Vuex</span><br><span class="line"> ◉ CSS Pre-processors</span><br><span class="line"> ◉ Linter / Formatter</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br></pre></td></tr></table></figure><p>在这里一般选择 babel/ts/router/css/linter这几个选项,选择好后 enter回车确认</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.<span class="number">0</span>.<span class="number">8</span></span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, TS, Router, CSS Pre-processors, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to <span class="built_in">start</span> the project with (Use arrow keys)</span><br><span class="line">❯ <span class="number">3</span>.x </span><br><span class="line">  <span class="number">2</span>.x </span><br></pre></td></tr></table></figure><p>选择vue的版本，当然是选择vue3了。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Use class-style component syntax? (y/N) </span><br></pre></td></tr></table></figure><p>是否使用Class风格装饰器？ 原本是：home = new Vue()创建vue实例，用装饰器后：class home extends Vue{}。直接enter回车即选择No</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Use Babel alongside TypeScript (required <span class="keyword">for</span> modern <span class="built_in">mode</span>, auto-detected polyfills, transpiling JSX)? (Y/n) </span><br></pre></td></tr></table></figure><p>使用Babel与TypeScript一起用于自动检测的填充?  选择yes</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use history <span class="built_in">mode</span> <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production)</span><br></pre></td></tr></table></figure><p>是否使用router的history模式。router路由有hash模式和history模式（url带#和不带）.选择yes</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): (Use arrow keys)</span><br><span class="line">❯ Sass/SCSS (with dart-sass) </span><br><span class="line">  Less </span><br><span class="line">  Stylus</span><br></pre></td></tr></table></figure><p>css处理模式。看情况选择。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line">❯ ESLint with error prevention only </span><br><span class="line">  ESLint + Airbnb config </span><br><span class="line">  ESLint + Standard config </span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure><p>代码检查与代码格式.  选择 ESLint + Prettier</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span><br><span class="line">❯◉ Lint on save</span><br><span class="line"> ◯ Lint and fix on commit</span><br></pre></td></tr></table></figure><p>项目校验格式 Lint on save 是保存时，Lint and fix on commit是提交时.选择 Lint on save</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? (Use arrow keys)</span><br><span class="line">❯ <span class="keyword">In</span> dedicated config files </span><br><span class="line">  <span class="keyword">In</span> package.json </span><br></pre></td></tr></table></figure><p>项目的配置文件存放  In dedicated config files 独立配置文件，In package.json 存放在package.json。选择 In package.json</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? (y/N) </span><br></pre></td></tr></table></figure><p>询问保存该配置是否作为后续项目的可选配置，选择是，则会要求给该配置命名，这个自己定就行,我输入为：default-setting.配置后会在创建项目时：vue create projectName 看到这个配置。例如:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.<span class="number">0</span>.<span class="number">8</span></span><br><span class="line">? Please pick a preset: </span><br><span class="line">❯ odinsam_vue+babel+ts+history+dart-sass+linter+prettier ([Vue <span class="number">3</span>] dart-sass, babel, typescript, router, eslint) </span><br><span class="line">  Default ([Vue <span class="number">3</span>] babel, eslint) </span><br><span class="line">  Default ([Vue <span class="number">2</span>] babel, eslint) </span><br><span class="line">  Manually select features </span><br></pre></td></tr></table></figure><ol start="2"><li>配置linter和prettier.添加 .prettierrc.js</li></ol><figure class="highlight js"><figcaption><span>.prettierrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 一行最多 180 字符</span></span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">180</span>,</span><br><span class="line">  <span class="comment">// 使用 4 个空格缩进</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 行尾需要有分号</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 使用单引号</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 对象的 key 仅在必要时用引号</span></span><br><span class="line">  <span class="attr">quoteProps</span>: <span class="string">&#x27;as-needed&#x27;</span>,</span><br><span class="line">  <span class="comment">// jsx 不使用单引号，而使用双引号</span></span><br><span class="line">  <span class="attr">jsxSingleQuote</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 末尾不需要逗号</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">  <span class="comment">// 大括号内的首尾需要空格</span></span><br><span class="line">  <span class="attr">bracketSpacing</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// jsx 标签的反尖括号需要换行</span></span><br><span class="line">  <span class="attr">jsxBracketSameLine</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 箭头函数，只有一个参数的时候，也需要括号  avoid 能省略括号的时候就省略 例如x =&gt; x</span></span><br><span class="line">  <span class="attr">arrowParens</span>: <span class="string">&#x27;avoid&#x27;</span>,</span><br><span class="line">  <span class="comment">// 每个文件格式化的范围是文件的全部内容</span></span><br><span class="line">  <span class="attr">rangeStart</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">rangeEnd</span>: <span class="literal">Infinity</span>,</span><br><span class="line">  <span class="comment">// 不需要写文件开头的 @prettier</span></span><br><span class="line">  <span class="attr">requirePragma</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 不需要自动在文件开头插入 @prettier</span></span><br><span class="line">  <span class="attr">insertPragma</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 使用默认的折行标准</span></span><br><span class="line">  <span class="attr">proseWrap</span>: <span class="string">&#x27;preserve&#x27;</span>,</span><br><span class="line">  <span class="comment">// 根据显示样式决定 html 要不要折行</span></span><br><span class="line">  <span class="attr">htmlWhitespaceSensitivity</span>: <span class="string">&#x27;css&#x27;</span>,</span><br><span class="line">  <span class="comment">// 换行符使用 lf</span></span><br><span class="line">  <span class="attr">endOfLine</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>安装并使用pinia. npm i pinia 或者  yarn add pinia 。 main.js使用pinia</li></ol><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="3-创建storestore的本质是一个函数包括两个参数第一个是store的名字第二个是store的配置项-配置项中包括-stateactions和getters-state-是-store-的核心部分是需要统一管理的状态actions-相当于组件中的-methods即业务操作getter-完全等同于-store-状态的-计算值"><a class="markdownIt-Anchor" href="#3-创建storestore的本质是一个函数包括两个参数第一个是store的名字第二个是store的配置项-配置项中包括-stateactions和getters-state-是-store-的核心部分是需要统一管理的状态actions-相当于组件中的-methods即业务操作getter-完全等同于-store-状态的-计算值"></a> 3. 创建store.store的本质是一个函数包括两个参数，第一个是store的名字，第二个是store的配置项。配置项中包括 state,actions和getters. state 是 store 的核心部分是需要统一管理的状态.Actions 相当于组件中的 methods即业务操作.getter 完全等同于 Store 状态的 计算值</h4><figure class="highlight ts"><figcaption><span>store/xxx.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数是store的名字，第二是参数是配置对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAccountStore = defineStore(<span class="string">&#x27;account&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 配置state</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">loginUser</span>: <span class="string">&#x27;odinsam&#x27;</span>, <span class="attr">isLogin</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//配置getters</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">getAddAge</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> !state.isLogin</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置actions</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">setUserName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.loginUser = <span class="string">&#x27;action user&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">loginUser</span>: <span class="built_in">this</span>.loginUser &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-使用store"><a class="markdownIt-Anchor" href="#4-使用store"></a> 4. 使用store</h4><figure class="highlight plaintext"><figcaption><span>HomView.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;btnLogin&quot;&gt;home login&lt;/button&gt;</span><br><span class="line">    &lt;!--在模板中可以使用解构的store数据--&gt;</span><br><span class="line">    &lt;span&gt;store:&#123;&#123; isLogin &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;button @click=&quot;changeUserbtnLogin&quot;&gt;change user&lt;/button&gt;</span><br><span class="line">    &lt;span&gt;user:&#123;&#123; loginUser &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;button @click=&quot;invokeAction&quot;&gt;invoke action&lt;/button&gt;</span><br><span class="line">    &lt;span&gt;getter store:&#123;&#123; accountStore.changeLoginState &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;../assets/logo.png&quot; /&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js + TypeScript App&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 引入 store</span><br><span class="line">import &#123; useAccountStore &#125; from &#x27;@/store/account&#x27;</span><br><span class="line">// 引入 storeToRefs  将解构的store中的数据变为响应式数据</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line">import HelloWorld from &#x27;@/components/HelloWorld.vue&#x27; // @ is an alias to /src</span><br><span class="line">// 调用函数创建store实例</span><br><span class="line">const accountStore = useAccountStore()</span><br><span class="line">function btnLogin() &#123;</span><br><span class="line">  console.log(&#x27;btn login&#x27;)</span><br><span class="line">  // 在组件的methods中可以直接使用accountStore实例对象</span><br><span class="line">  accountStore.isLogin = true</span><br><span class="line">&#125;</span><br><span class="line">// 解构store的数据在模板中使用，并使其为响应式的数据</span><br><span class="line">const &#123; isLogin, loginUser &#125; = storeToRefs(accountStore)</span><br><span class="line">const changeUserbtnLogin = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;function changeUserbtnLogin&#x27;)</span><br><span class="line">  accountStore.loginUser = &#x27;abc&#x27;</span><br><span class="line">&#125;</span><br><span class="line">const invokeAction = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;function invokeAction&#x27;)</span><br><span class="line">  accountStore.setUserName()</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> 可以使用 store.$onAction() 订阅 action 及其结果。 </span><br><span class="line"> 传递给它的回调在 action 之前执行。 </span><br><span class="line"> after 处理 Promise 并允许您在 action 完成后执行函数。 </span><br><span class="line"> 以类似的方式，onError 允许您在处理中抛出错误。 这些对于在运行时跟踪错误很有用，类似于 Vue 文档中的这个提示。</span><br><span class="line"> &#123;</span><br><span class="line">    name, // action 的名字</span><br><span class="line">    store, // store 实例</span><br><span class="line">    args, // 调用这个 action 的参数</span><br><span class="line">    after, // 在这个 action 执行完毕之后，执行这个函数</span><br><span class="line">    onError, // 在这个 action 抛出异常的时候，执行这个函数</span><br><span class="line">  &#125;</span><br><span class="line"> */</span><br><span class="line">accountStore.$onAction((&#123; name, store, args, after, onError &#125;) =&gt; &#123;</span><br><span class="line">  //actions被调用触发</span><br><span class="line">  console.log(&#x27;anonymous function&#x27;)</span><br><span class="line">  //如果 actions 是 setUserName</span><br><span class="line">  if (name === &#x27;setUserName&#x27;) &#123;</span><br><span class="line">    // 执行成功后出发</span><br><span class="line">    after(reject =&gt; &#123;</span><br><span class="line">      console.log(&#x27;store&#x27;, store)</span><br><span class="line">      console.log(&#x27;args&#x27;, args)</span><br><span class="line">      //这里可以执行一些操作</span><br><span class="line">      console.log(&#x27;reject.loginUser:&#x27;, reject.loginUser)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  // actions error时出发</span><br><span class="line">  onError(error =&gt; &#123;</span><br><span class="line">    console.log(&#x27;function onError&#x27;, error)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="5-pinia插件的使用plugins"><a class="markdownIt-Anchor" href="#5-pinia插件的使用plugins"></a> 5. pinia插件的使用plugins.</h4><p>由于是底层 API，Pinia Store可以完全扩展。 您可以执行的操作列表：向 Store 添加新属性、定义 Store 时添加新选项、为 Store 添加新方法、包装现有方法、更改甚至取消操作、实现本地存储等副作用、仅适用于特定 Store。</p><h4 id="6-使用-piniause-将插件添加到-pinia-实例-给pania添加公共属性和公共方法-在vue中可以灵活使用"><a class="markdownIt-Anchor" href="#6-使用-piniause-将插件添加到-pinia-实例-给pania添加公共属性和公共方法-在vue中可以灵活使用"></a> 6. 使用 pinia.use() 将插件添加到 pinia 实例。给pania添加公共属性和公共方法。在vue中可以灵活使用</h4><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pinia = createPinia()</span><br><span class="line"><span class="comment">//通过插件给pinia添加公共属性</span></span><br><span class="line">pinia.use(<span class="function"><span class="params">context</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; store &#125; = context</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">pluginsAuthor</span>: store.$state.loginUser &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//通过插件给pinia添加公共属性</span></span><br><span class="line">pinia.use(<span class="function"><span class="params">context</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; store &#125; = context</span><br><span class="line">  store.pubs = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;pinia plugins add public method&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//因为context中可以解构出store，所以上边的代码可以简写为</span></span><br><span class="line"><span class="comment">// pinia.use((&#123; store &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   return &#123; pluginsAuthor: store.$state.loginUser &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// pinia.use((&#123; store &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   store.pubs = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;pinia plugins add public method&#x27;)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(router).use(pinia).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>HelloView.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;getPulicProto&quot;&gt;pinia plugins public proto and invoke public methos&lt;/button&gt;</span><br><span class="line">&lt;span&gt;pluginsAuthor:&#123;&#123; propto &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">let propto = ref(&#x27;原始值&#x27;)</span><br><span class="line">const getPulicProto = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;function getPulicProto&#x27;)</span><br><span class="line">  accountStore.pubs()</span><br><span class="line">  propto.value = accountStore.pluginsAuthor</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Pinia 是 Vue 的存储库，它允许您跨组件/页面共享状态。与 Vuex 相比，Pinia 提供了一个更简单的 API，具有更少的规范，提供了 Composition-API 风格的 API，最重要的是，在与 TypeScript 一起使用时具有可靠的类型推断支持。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    <category term="pinia" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/pinia/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="pinia" scheme="https://www.odinsam.com/tags/pinia/"/>
    
    <category term="store" scheme="https://www.odinsam.com/tags/store/"/>
    
    <category term="$onAction" scheme="https://www.odinsam.com/tags/onAction/"/>
    
    <category term="actions" scheme="https://www.odinsam.com/tags/actions/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 - 07. vue3中新增的一些组件</title>
    <link href="https://www.odinsam.com/articles/40e7.html"/>
    <id>https://www.odinsam.com/articles/40e7.html</id>
    <published>2022-10-22T08:25:00.000Z</published>
    <updated>2022-10-22T12:48:39.611Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要了解vue3中新增的一些组件，并说明如何使用。<br>完整代码可以在 <a href="https://github.com/odinsam/learn-vue3.0">GitHub</a> 。<br><a href="151c.html">Vue3.0 学习系列</a></p></blockquote><span id="more"></span><h4 id="1-fragment"><a class="markdownIt-Anchor" href="#1-fragment"></a> 1. Fragment</h4><ol><li>在vue2中，组件时必须有一个跟标签的</li><li>在vue3中，组件可以没有跟标签，内部会将多个标签包含在一个Fragment虚拟元素中</li><li>优势在于可以减少标签层级、减小内存占用</li></ol><h4 id="2-teleport"><a class="markdownIt-Anchor" href="#2-teleport"></a> 2. Teleport</h4><ol><li>teplport是一种能够将我们的组件的html结构移动到指定位置的技术</li><li>移动的位置可以写html元素也可以是css选择： body或者#root 等</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动的位置&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    需要移动的组件</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure><h4 id="3-suspense"><a class="markdownIt-Anchor" href="#3-suspense"></a> 3. Suspense</h4><ol><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li><li>使用Suspense并使用异步动态引入对象，可以在setup中返回异步结果 return { await new Promise() }</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">    &lt;template v-slot:default&gt;</span><br><span class="line">        &lt;Child/&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template v-slot:fallback&gt;</span><br><span class="line">        &lt;Loading/&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Suspense&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 异步动态引入组件</span><br><span class="line">const child = defineAsyncComponent(()=&gt;return import(&#x27;./components/xxx.vue&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-全局api的转移"><a class="markdownIt-Anchor" href="#4-全局api的转移"></a> 4. 全局API的转移</h4><table>  <thead>    </thead><td>vue2 全局api</td>    <td>vue3 全局api</td>    <tbody>    <tr>      <td>Vue.config.xxx</td>      <td>app.config.xxx</td>    </tr>    <tr>      <td>Vue.config.productionTip</td>      <td>移除</td>    </tr>    <tr>      <td>Vue.component</td>      <td>app.component</td>    </tr>    <tr>      <td>Vue.directive</td>      <td>app.directive</td>    </tr>    <tr>      <td>Vue.mixin</td>      <td>app.mixin</td>    </tr>    <tr>      <td>Vue.use</td>      <td>app.use</td>    </tr>    <tr>      <td>Vue.prototype</td>      <td>app.config.globalProperties</td>    </tr>  </tbody></table><h4 id="5-一些其他的改变"><a class="markdownIt-Anchor" href="#5-一些其他的改变"></a> 5. 一些其他的改变</h4><ol><li>data在vue3中必须是函数形式</li><li>过度雷鸣的更改 vue3中 v-enter-from v-leave-to</li><li>移除keycCode作为v-on的修饰符,同时也不支持config.keyCodes</li><li>移除v-on.native修饰符</li><li>移除过滤器 filter</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;主要了解vue3中新增的一些组件，并说明如何使用。&lt;br&gt;
完整代码可以在 &lt;a href=&quot;https://github.com/odinsam/learn-vue3.0&quot;&gt;GitHub&lt;/a&gt; 。&lt;br&gt;
&lt;a href=&quot;151c.html&quot;&gt;Vue3.0 学习系列&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="Fragment" scheme="https://www.odinsam.com/tags/Fragment/"/>
    
    <category term="Teleport" scheme="https://www.odinsam.com/tags/Teleport/"/>
    
    <category term="Suspense" scheme="https://www.odinsam.com/tags/Suspense/"/>
    
    <category term="defineAsyncComponent" scheme="https://www.odinsam.com/tags/defineAsyncComponent/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 - 06. 其他的CompositionApi及总结</title>
    <link href="https://www.odinsam.com/articles/b618.html"/>
    <id>https://www.odinsam.com/articles/b618.html</id>
    <published>2022-10-21T13:56:00.000Z</published>
    <updated>2022-10-22T10:52:56.708Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要了解vue3中的其他的组合api以及对ComsitionApi的一个总结，并说明如何使用。<br>完整代码可以在 <a href="https://github.com/odinsam/learn-vue3.0">GitHub</a> 。<br><a href="151c.html">Vue3.0 学习系列</a></p></blockquote><span id="more"></span><h4 id="1-shallowreactive"><a class="markdownIt-Anchor" href="#1-shallowreactive"></a> 1. shallowReactive</h4><ol><li>shallowReactive只处理对象最外层属性的响应式，浅层次的。</li></ol><h4 id="2-shallowref"><a class="markdownIt-Anchor" href="#2-shallowref"></a> 2. shallowRef</h4><ol><li>shallowRef只处理基本数据类型的响应式，不处理对象类型的响应式。如果是基本数据类型，shallowRef与ref没有区别。但shallowRef不处理对象类型即，如果是对象类型shallowRef则不会处理为响应式数据</li></ol><blockquote><h5 id="使用时机"><a class="markdownIt-Anchor" href="#使用时机"></a> 使用时机</h5><ol><li>如果一个对象数据，结构比较深，但变化时只是外层属性变化，则可以使用shallowReactive。</li><li>如果一个对象谁，后续功能不会修改该对象中的属性，而是生成新的对象来替换，则可以使用shallowRef</li></ol></blockquote><h4 id="3-readonly-与-shallowreadonly"><a class="markdownIt-Anchor" href="#3-readonly-与-shallowreadonly"></a> 3. readonly 与 shallowReadonly</h4><ol><li>readonly 会让一个响应式数据变为只读 - 深只读</li><li>shallowReadonly 让一个响应式数据变为只读 - 浅只读</li><li>当不希望数据修改时可以使用</li></ol><h4 id="4-toraw-与-markraw"><a class="markdownIt-Anchor" href="#4-toraw-与-markraw"></a> 4. toRaw 与 markRaw</h4><ol><li>toRow 可以将响应式数据变为原始数据 const x = toRaw(person) toRaw的参数需要是refImpl类型的数据</li><li>markRaw 标记一个对象，使其永远不会再变为响应式对象</li></ol><h4 id="5-customref"><a class="markdownIt-Anchor" href="#5-customref"></a> 5. customRef</h4><ol><li>创建一个自定义的ref，并对其依赖项跟踪和更新触发进行显式控制。</li></ol><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;数据：&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; customRef &#125; from &#x27;vue&#x27;</span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line">        function myref(value) &#123;</span><br><span class="line">            let timer;</span><br><span class="line">            return customRef((track, trigger) =&gt; &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    get() &#123;</span><br><span class="line">                        // 通知vue跟踪value的变化</span><br><span class="line">                        track();</span><br><span class="line">                        return value;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    set(newValue) &#123;</span><br><span class="line">                        clearTimeout(timer)</span><br><span class="line">                        timer = setInterval(() =&gt; &#123;</span><br><span class="line">                            value = newValue;</span><br><span class="line">                            // 通知vue重新解析模板</span><br><span class="line">                            trigger()</span><br><span class="line">                        &#125;, 500);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        let msg = myref(&#x27;&#x27;)</span><br><span class="line">        return &#123;</span><br><span class="line">            msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="6-provider与inject"><a class="markdownIt-Anchor" href="#6-provider与inject"></a> 6. provider与inject</h4><ol><li>provider和inject可以实现组件间数据通信的方式。</li><li>在父组件中使用provider提供数据，在后代组件（子孙组件）中使用inject来获取数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">let obj = &#123; x:1,y:2 &#125;;</span><br><span class="line">provider(&#x27;data&#x27;,obj)</span><br><span class="line">//子组件</span><br><span class="line">let obj = inject(&#x27;data&#x27;)</span><br></pre></td></tr></table></figure><h4 id="7-对响应式数据的判断"><a class="markdownIt-Anchor" href="#7-对响应式数据的判断"></a> 7. 对响应式数据的判断</h4><ol><li>isRef 检查一个值是否是一个 ref 对象</li><li>isReactvie 检查一个对象是否是 reactive创建的响应式代理</li><li>isReadonly 检查一个对象是否有 readonly 创建的只读对象</li><li>isProxy 检查一个对象是否是 reactive或者 readonly 方法创建的代理</li></ol><h4 id="8-compositionapi的优势"><a class="markdownIt-Anchor" href="#8-compositionapi的优势"></a> 8. CompositionApi的优势</h4><ol><li>传统的OptionApi中，新增或者修改一个需求，需要在 data、methods、computed里修改或添加对应的代码</li><li>CompositionApi的优势在于我们可以更优雅的阻止我们的代码、函数。让相关功能的代码更加有序的组织自一起。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;主要了解vue3中的其他的组合api以及对ComsitionApi的一个总结，并说明如何使用。&lt;br&gt;
完整代码可以在 &lt;a href=&quot;https://github.com/odinsam/learn-vue3.0&quot;&gt;GitHub&lt;/a&gt; 。&lt;br&gt;
&lt;a href=&quot;151c.html&quot;&gt;Vue3.0 学习系列&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="shallowRef" scheme="https://www.odinsam.com/tags/shallowRef/"/>
    
    <category term="shallowReactive" scheme="https://www.odinsam.com/tags/shallowReactive/"/>
    
    <category term="readonly" scheme="https://www.odinsam.com/tags/readonly/"/>
    
    <category term="shallowReadonly" scheme="https://www.odinsam.com/tags/shallowReadonly/"/>
    
    <category term="toRaw" scheme="https://www.odinsam.com/tags/toRaw/"/>
    
    <category term="markRaw" scheme="https://www.odinsam.com/tags/markRaw/"/>
    
    <category term="customRef" scheme="https://www.odinsam.com/tags/customRef/"/>
    
    <category term="provider" scheme="https://www.odinsam.com/tags/provider/"/>
    
    <category term="inject" scheme="https://www.odinsam.com/tags/inject/"/>
    
    <category term="isRef" scheme="https://www.odinsam.com/tags/isRef/"/>
    
    <category term="isReactive" scheme="https://www.odinsam.com/tags/isReactive/"/>
    
    <category term="isReadonly" scheme="https://www.odinsam.com/tags/isReadonly/"/>
    
    <category term="isProxy" scheme="https://www.odinsam.com/tags/isProxy/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 - 05. toRef与toRefs</title>
    <link href="https://www.odinsam.com/articles/ba93.html"/>
    <id>https://www.odinsam.com/articles/ba93.html</id>
    <published>2022-10-21T13:31:00.000Z</published>
    <updated>2022-10-21T13:52:02.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要了解vue3中的toRef与toRefs，并说明如何使用。<br>完整代码可以在 <a href="https://github.com/odinsam/learn-vue3.0">GitHub</a> 。<br><a href="151c.html">Vue3.0 学习系列</a></p></blockquote><span id="more"></span><h4 id="toref"><a class="markdownIt-Anchor" href="#toref"></a> toRef</h4><ol><li>作用：创建一个对象，起value值指向另一个对象中的某个属性</li><li>const name = toRef(person,‘name’)</li><li>应用：要将响应式对象中的某个属性单独提供给外部使用</li><li>toRefs 与 toRef 功能一致，但可以批量创建多个ref对象 toRefs(person)</li></ol><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123;person&#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;h3&gt;姓名:&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;h3&gt;年龄:&#123;&#123;age&#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;h3&gt;薪资:&#123;&#123;salary&#125;&#125;K&lt;/h3&gt;</span><br><span class="line">            &lt;button @click=&quot;person.name+=&#x27;~&#x27;&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;person.age++&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;person.job.j.salary++&quot;&gt;修改薪资&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRef, toRefs &#125; from &#x27;@vue/reactivity&#x27;</span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line">        let person = reactive(&#123;</span><br><span class="line">            name: &#x27;odinsam&#x27;,</span><br><span class="line">            age: 20,</span><br><span class="line">            job: &#123;</span><br><span class="line">                j: &#123;</span><br><span class="line">                    salary:50</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        return &#123;</span><br><span class="line">            person,</span><br><span class="line">            ...toRefs(person),</span><br><span class="line">            salary:toRef(person.job.j,&#x27;salary&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;主要了解vue3中的toRef与toRefs，并说明如何使用。&lt;br&gt;
完整代码可以在 &lt;a href=&quot;https://github.com/odinsam/learn-vue3.0&quot;&gt;GitHub&lt;/a&gt; 。&lt;br&gt;
&lt;a href=&quot;151c.html&quot;&gt;Vue3.0 学习系列&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="toRef" scheme="https://www.odinsam.com/tags/toRef/"/>
    
    <category term="toRefs" scheme="https://www.odinsam.com/tags/toRefs/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 - 04. vue3中的hook</title>
    <link href="https://www.odinsam.com/articles/bd63.html"/>
    <id>https://www.odinsam.com/articles/bd63.html</id>
    <published>2022-10-21T12:31:00.000Z</published>
    <updated>2022-10-21T13:04:33.974Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要了解vue3中的hook，并说明如何使用。<br>完整代码可以在 <a href="https://github.com/odinsam/learn-vue3.0">GitHub</a> 。<br><a href="151c.html">Vue3.0 学习系列</a></p></blockquote><span id="more"></span><h4 id="hook"><a class="markdownIt-Anchor" href="#hook"></a> hook</h4><ol><li>hook的本质是一个函数，把setup函数中使用的组合api进行封装。</li><li>hook有点类似vue2中的mixin。</li><li>自定义hook可以让setup中的逻辑更加清楚易懂</li></ol><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;div&gt;点击的鼠标的坐标是:&#123;&#123;mpoint.x&#125;&#125;,&#123;&#123;mpoint.y&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;hook中回传的信息:&#123;&#123;param.title&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">//引入自定义hook函数</span><br><span class="line">import usePoint from &#x27;../hooks/usePoint&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line">        let title = ref(&#x27;Student组件&#x27;)</span><br><span class="line">        let &#123;mpoint,param &#125; = usePoint(&#123;title:title.value&#125;);</span><br><span class="line">        return &#123;</span><br><span class="line">            title,mpoint,param</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>hooks/usePoint.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onBeforeUnmount, onMounted, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mpoint = reactive(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">savePotin</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        mpoint.x = event.pageX;</span><br><span class="line">        mpoint.y = event.pageY;</span><br><span class="line">        param.title = param.title + <span class="string">&#x27;-hook&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;param&#x27;</span>, param);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;mouse click point,&#x27;</span>, event.pageX, event.pageY);</span><br><span class="line">    &#125;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, savePotin);</span><br><span class="line">    &#125;);</span><br><span class="line">    onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>, savePotin);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//使用hook一定要给当前函数返回信息</span></span><br><span class="line">    <span class="keyword">return</span> &#123; mpoint, param &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;isShowStuCpm&quot;&gt;显示、隐藏student组件&lt;/button&gt;</span><br><span class="line">        &lt;Student v-if=&quot;isShow&quot;&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line">        let isShow = ref(true)</span><br><span class="line">        let isShowStuCpm = function () &#123;</span><br><span class="line">            isShow.value = !isShow.value</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow,isShowStuCpm</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;主要了解vue3中的hook，并说明如何使用。&lt;br&gt;
完整代码可以在 &lt;a href=&quot;https://github.com/odinsam/learn-vue3.0&quot;&gt;GitHub&lt;/a&gt; 。&lt;br&gt;
&lt;a href=&quot;151c.html&quot;&gt;Vue3.0 学习系列&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="hook" scheme="https://www.odinsam.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 - 03. 生命周期</title>
    <link href="https://www.odinsam.com/articles/4ed.html"/>
    <id>https://www.odinsam.com/articles/4ed.html</id>
    <published>2022-10-21T10:17:00.000Z</published>
    <updated>2022-10-21T13:05:08.126Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要了解vue3的生命周期，并说明与vue2生命周期的区别。<br>完整代码可以在 <a href="https://github.com/odinsam/learn-vue3.0">GitHub</a> 。<br><a href="151c.html">Vue3.0 学习系列</a></p></blockquote><span id="more"></span><h4 id="生命周期"><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h4><ol><li>vue3的生命周期改变了vue2中挂载流程的 beforeDestroy和destroyed 函数，改变为 beforeUnmount 和 unmounted.</li><li>在vue3中可以用配置项的形式编写生命周期函数，但也可以是用组合函数的形式在setup中编写生命周期函数。但是所有生命周期函数都需要改名</li><li>具体的变化如下<br>beforeCreate ==&gt;  setup()<br>created ==&gt; setup()<br>beforeMount ==&gt; onBeforeMount<br>mounted ==&gt; onMounted<br>beforeUpdate ==&gt; onBeforeUpdate<br>updated ==&gt; onUpdated<br>beforeUnmount ==&gt; onBeforeUnmount<br>unmounted ==&gt; onUnmounted</li><li>基本流程与vue2一致没有改变,只是减去了对是否包含el配置项的检查<br><img src="/images/lifecycle.vue3.png" alt="vue3中的生命周期"></li></ol><h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h4><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;increment: &#123;&#123;sum&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;btnIncrement&quot;&gt;increment&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">import &#123;onBeforeMount, onBeforeUnmount, onBeforeUpdate, onMounted, onUnmounted, onUpdated, ref&#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    //vue2配置项的形式编写生命周期函数</span><br><span class="line">    // beforeCreate() &#123;</span><br><span class="line">    //     console.log(&#x27;---beforeCreate---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // created() &#123;</span><br><span class="line">    //     console.log(&#x27;---beforeCreate---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // beforeMount() &#123;</span><br><span class="line">    //     console.log(&#x27;---beforeMount---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // mounted() &#123;</span><br><span class="line">    //     console.log(&#x27;---mounted---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // beforeUpdate() &#123;</span><br><span class="line">    //     console.log(&#x27;---beforeUpdate---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // updated() &#123;</span><br><span class="line">    //     console.log(&#x27;---updated---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // beforeUnmount() &#123;</span><br><span class="line">    //     console.log(&#x27;---beforeUnmount---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // unmounted() &#123;</span><br><span class="line">    //     console.log(&#x27;---unmounted---&#x27;);</span><br><span class="line">    // &#125;,</span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line">        let sum = ref(0)</span><br><span class="line">        let btnIncrement = function () &#123;</span><br><span class="line">            sum.value++;</span><br><span class="line">        &#125;</span><br><span class="line">        //组合api形式编写生命周期函数</span><br><span class="line">        onBeforeMount(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;---onBeforeMount---&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        onMounted(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;---onMounted---&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        onBeforeUpdate(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;---onBeforeUpdate---&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        onUpdated(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;---onUpdated---&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;---onBeforeUnmount---&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        onUnmounted(()=&gt;&#123;</span><br><span class="line">            console.log(&#x27;---onUnmounted---&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        return &#123;</span><br><span class="line">            sum,btnIncrement</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        生命周期：</span><br><span class="line">        1. vue3的生命周期改变了vue2中挂载流程的 beforeDestroy和destroyed 函数，改变为 beforeUnmount 和 unmounted.</span><br><span class="line">        2. 在vue3中可以用配置项的形式编写生命周期函数，但也可以是用组合函数的形式在setup中编写生命周期函数。但是所有生命周期函数都需要改名</span><br><span class="line">        3. 具体的变化如下</span><br><span class="line">            beforeCreate ==&gt;  setup()</span><br><span class="line">            created ==&gt; setup()</span><br><span class="line">            beforeMount ==&gt; onBeforeMount</span><br><span class="line">            mounted ==&gt; onMounted</span><br><span class="line">            beforeUpdate ==&gt; onBeforeUpdate</span><br><span class="line">            updated ==&gt; onUpdated</span><br><span class="line">            beforeUnmount ==&gt; onBeforeUnmount</span><br><span class="line">            unmounted ==&gt; onUnmounted</span><br><span class="line">        4. 基本流程与vue2一致没有改变,只是减去了对是否包含el配置项的检查</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;app组件&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;isShowStudent&quot;&gt;显示、隐藏student组件&lt;/button&gt;</span><br><span class="line">        &lt;Student v-if=&quot;isShow&quot;&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line">        let isShow = ref(true)</span><br><span class="line">        let isShowStudent = function () &#123;</span><br><span class="line">            isShow.value = !isShow.value</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow,isShowStudent,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;主要了解vue3的生命周期，并说明与vue2生命周期的区别。&lt;br&gt;
完整代码可以在 &lt;a href=&quot;https://github.com/odinsam/learn-vue3.0&quot;&gt;GitHub&lt;/a&gt; 。&lt;br&gt;
&lt;a href=&quot;151c.html&quot;&gt;Vue3.0 学习系列&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="生命周期" scheme="https://www.odinsam.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
    <category term="beforeUnmount" scheme="https://www.odinsam.com/tags/beforeUnmount/"/>
    
    <category term="unmounted" scheme="https://www.odinsam.com/tags/unmounted/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 - 02. 计算属性与监视属性</title>
    <link href="https://www.odinsam.com/articles/cab0.html"/>
    <id>https://www.odinsam.com/articles/cab0.html</id>
    <published>2022-10-21T09:55:00.000Z</published>
    <updated>2022-10-21T13:05:17.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要体现computed与watch在vue3中和vue2中的区别。以及新增的watchEffect的使用。<br>完整代码可以在 <a href="https://github.com/odinsam/learn-vue3.0">GitHub</a> 。<br><a href="151c.html">Vue3.0 学习系列</a></p></blockquote><span id="more"></span> <h4 id="计算属性"><a class="markdownIt-Anchor" href="#计算属性"></a> 计算属性</h4><ol><li>与vue2中的写法基本一致，直接在setup中定义计算属性  计算属性:computed()</li><li>只有get的简写形式 计算属性:computed(()=&gt;{ return xxx })</li><li>有get有set的写法 计算属性:computed({ get(){ return xxx }, set(value){ xxx } })</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let fullName = computed(() =&gt; &#123;</span><br><span class="line">    return firstName + &#x27;-&#x27; + lastName;</span><br><span class="line">&#125;),</span><br><span class="line">//完整写法</span><br><span class="line">let fullName = computed(&#123;</span><br><span class="line">    get() &#123;</span><br><span class="line">        return person.firstName + &#x27;-&#x27; + person.lastName;</span><br><span class="line">    &#125;,</span><br><span class="line">    set(value) &#123;</span><br><span class="line">        person.firstName = value.split(&#x27;-&#x27;)[0];</span><br><span class="line">        person.lastName = value.split(&#x27;-&#x27;)[1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="监视属性"><a class="markdownIt-Anchor" href="#监视属性"></a> 监视属性</h4><ol><li>watch([需要监视的属性],(newValue,oldValue)=&gt;{ 监视的方法 },{ immediate:true,deep:true })</li><li>监视ref基本类型数据,可以将需要监视的属性以数组的形式作为第一个参数,第二个参数是监视的方法，第三个参数是监视的配置项</li><li>当watch监视的是reactive的对象时，无法正确的获取到oldValue的值</li><li>当watch监视的是reactive的对象时，默认就开启了深度监视 deep配置无效</li><li>当watch监视的是reactive的对象的某个属性,且该属性又是一个对象是，需要配置deep深度监视.例如 监视person.job 但是job依旧是一个对象，此时就需要deep深度监视</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 1. 监视ref基本数据类型</span><br><span class="line">watch([sum, message], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;sum或message改变了&#x27;,newValue,oldValue);</span><br><span class="line">&#125;, &#123; immediate: true &#125;)</span><br><span class="line">// 2. 监视reactvie对象类型 deep无效无需配置</span><br><span class="line">watch([person], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;person改变了&#x27;,newValue,oldValue);</span><br><span class="line">&#125;, &#123; immediate: true &#125;)</span><br><span class="line">// 3. 监视reactvie对象类型的某一个属性</span><br><span class="line">watch(()=&gt;person.firstName, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;person的firstName改变了&#x27;,newValue,oldValue);</span><br><span class="line">&#125;, &#123; immediate: true &#125;)</span><br><span class="line">// 4. 监视reactvie对象类型的一些属性</span><br><span class="line">watch([()=&gt;person.firstName,()=&gt;person.lastName], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;person的firstName、lastName改变了&#x27;,newValue,oldValue);</span><br><span class="line">&#125;, &#123; immediate: true &#125;)</span><br><span class="line">// 5. 当监视reactive数据的某个对象，且对象内部依旧是一个对象时，需要开启deep深度监视。否则监视不到</span><br><span class="line">watch([()=&gt;person.job], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;person的job改变了&#x27;,newValue,oldValue);</span><br><span class="line">&#125;, &#123; immediate: true,deep:true&#125;)</span><br></pre></td></tr></table></figure><h4 id="watcheffect"><a class="markdownIt-Anchor" href="#watcheffect"></a> watchEffect</h4><ol><li>不用指明监视的属性，监视的回调中用到那个属性，就监视那个属性。</li><li>watchEffect与computed有点类似。但 computed 注重计算出来的值（回调函数的返回值），所以一定要有return。而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">watchEffect(() =&gt; &#123;</span><br><span class="line">    console.log(JSON.stringify(person));</span><br><span class="line">    console.log(&#x27;watchEffect监视&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h4><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;计算属性-computed&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;姓：&lt;/span&gt;&lt;input type=&quot;text&quot; v-model=&quot;person.firstName&quot; /&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;名：&lt;/span&gt;&lt;input type=&quot;text&quot; v-model=&quot;person.lastName&quot; /&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;爱好:&#123;&#123;person.hobby&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;全名:&#123;&#123;fullName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;修改全名&lt;/span&gt;&lt;input type=&quot;text&quot; v-model=&quot;fullName&quot; /&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;stu的Job  &lt;/span&gt;&#123;&#123;JSON.stringify(person.job)&#125;&#125;</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">        &lt;h2&gt;监视属性-watch&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;求和:&#123;&#123;sum&#125;&#125;,信息:&#123;&#123;message&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;btnEdit&quot;&gt;修改sum和message&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;btnStuName&quot;&gt;修改stu的姓名&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;btnEditStuHobby&quot;&gt;修改stu的爱好&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;btnEditStuJobA&quot;&gt;修改job中的a值&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123;ref, computed, reactive,watch, watchEffect&#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    setup(props, context) &#123;</span><br><span class="line">        let sum = ref(0)</span><br><span class="line">        let message = ref(&#x27;消息&#x27;)</span><br><span class="line">        let person = reactive(&#123;</span><br><span class="line">            firstName: &#x27;odin&#x27;,</span><br><span class="line">            lastName: &#x27;sam&#x27;,</span><br><span class="line">            hobby: [&#x27;抽烟&#x27;, &#x27;喝酒&#x27;, &#x27;烫头&#x27;],</span><br><span class="line">            job: &#123;</span><br><span class="line">                a:&#123;x:1,y:2&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        let btnEdit = function () &#123;</span><br><span class="line">            sum.value++;</span><br><span class="line">            message.value+=&quot;~&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        let btnStuName = function () &#123;</span><br><span class="line">            person.firstName += &quot;!&quot;;</span><br><span class="line">            person.lastName += &quot;~&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        let btnEditStuHobby = function () &#123;</span><br><span class="line">            person.hobby.push(&#x27;学习&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        let btnEditStuJobA = function () &#123;</span><br><span class="line">            person.job.a.x += 10;</span><br><span class="line">        &#125;</span><br><span class="line">/**</span><br><span class="line">        计算属性</span><br><span class="line">        1. 与vue2中的写法基本一致，直接在setup中定义计算属性  计算属性:computed()</span><br><span class="line">        2. 只有get的简写形式 计算属性:computed(()=&gt;&#123; return xxx &#125;)</span><br><span class="line">        3. 有get有set的写法 计算属性:computed(&#123; get()&#123; return xxx &#125;, set(value)&#123; xxx &#125; &#125;)</span><br><span class="line">*/</span><br><span class="line">        //简写</span><br><span class="line">        // let fullName = computed(() =&gt; &#123;</span><br><span class="line">        //     return firstName + &#x27;-&#x27; + lastName;</span><br><span class="line">        // &#125;),</span><br><span class="line">        //完整写法</span><br><span class="line">        let fullName = computed(&#123;</span><br><span class="line">            get() &#123;</span><br><span class="line">                return person.firstName + &#x27;-&#x27; + person.lastName;</span><br><span class="line">            &#125;,</span><br><span class="line">            set(value) &#123;</span><br><span class="line">                person.firstName = value.split(&#x27;-&#x27;)[0];</span><br><span class="line">                person.lastName = value.split(&#x27;-&#x27;)[1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">/**</span><br><span class="line">        监视属性</span><br><span class="line">        1. watch([需要监视的属性],(newValue,oldValue)=&gt;&#123; 监视的方法 &#125;,&#123; immediate:true,deep:true &#125;)</span><br><span class="line">        2. 监视ref基本类型数据,可以将需要监视的属性以数组的形式作为第一个参数,第二个参数是监视的方法，第三个参数是监视的配置项</span><br><span class="line">        3. 当watch监视的是reactive的对象时，无法正确的获取到oldValue的值</span><br><span class="line">        4. 当watch监视的是reactive的对象时，默认就开启了深度监视 deep配置无效</span><br><span class="line">        5. 当watch监视的是reactive的对象的某个属性,且该属性又是一个对象是，需要配置deep深度监视.例如 监视person.job 但是job依旧是一个对象，此时就需要deep深度监视</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">        // 1. 监视ref基本数据类型</span><br><span class="line">        watch([sum, message], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">            console.log(&#x27;sum或message改变了&#x27;,newValue,oldValue);</span><br><span class="line">        &#125;, &#123; immediate: true &#125;)</span><br><span class="line">        // 2. 监视reactvie对象类型 deep无效无需配置</span><br><span class="line">        watch([person], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">            console.log(&#x27;person改变了&#x27;,newValue,oldValue);</span><br><span class="line">        &#125;, &#123; immediate: true &#125;)</span><br><span class="line">        // 3. 监视reactvie对象类型的某一个属性</span><br><span class="line">        watch(()=&gt;person.firstName, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">            console.log(&#x27;person的firstName改变了&#x27;,newValue,oldValue);</span><br><span class="line">        &#125;, &#123; immediate: true &#125;)</span><br><span class="line">        // 4. 监视reactvie对象类型的一些属性</span><br><span class="line">        watch([()=&gt;person.firstName,()=&gt;person.lastName], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">            console.log(&#x27;person的firstName、lastName改变了&#x27;,newValue,oldValue);</span><br><span class="line">        &#125;, &#123; immediate: true &#125;)</span><br><span class="line">        // 5. 当监视reactive数据的某个对象，且对象内部依旧是一个对象时，需要开启deep深度监视。否则监视不到</span><br><span class="line">        watch([()=&gt;person.job], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">            console.log(&#x27;person的job改变了&#x27;,newValue,oldValue);</span><br><span class="line">        &#125;, &#123; immediate: true, deep: true &#125;),</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">        watchEffect</span><br><span class="line">        1. 不用指明监视的属性，监视的回调中用到那个属性，就监视那个属性。</span><br><span class="line">        2. watchEffect与computed有点类似。但 computed 注重计算出来的值（回调函数的返回值），所以一定要有return。而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</span><br><span class="line">*/</span><br><span class="line">        watchEffect(() =&gt; &#123;</span><br><span class="line">            console.log(JSON.stringify(person));</span><br><span class="line">            console.log(&#x27;watchEffect监视&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        return &#123;</span><br><span class="line">            person,fullName,btnEdit,sum,message,btnStuName,btnEditStuHobby,btnEditStuJobA</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;主要体现computed与watch在vue3中和vue2中的区别。以及新增的watchEffect的使用。&lt;br&gt;
完整代码可以在 &lt;a href=&quot;https://github.com/odinsam/learn-vue3.0&quot;&gt;GitHub&lt;/a&gt; 。&lt;br&gt;
&lt;a href=&quot;151c.html&quot;&gt;Vue3.0 学习系列&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="computed" scheme="https://www.odinsam.com/tags/computed/"/>
    
    <category term="watch" scheme="https://www.odinsam.com/tags/watch/"/>
    
    <category term="watchEffect" scheme="https://www.odinsam.com/tags/watchEffect/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 - 01. 初识vue3</title>
    <link href="https://www.odinsam.com/articles/2774.html"/>
    <id>https://www.odinsam.com/articles/2774.html</id>
    <published>2022-10-20T11:48:00.000Z</published>
    <updated>2022-10-22T12:52:54.089Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>了解vue3与vue2的一些区别。重点了解vue3中setup函数的作用和用法。讲解vue3中对响应式数据的处理ref和reactive的用法以及对应实现的原理，并说明与vue2的区别。<br>完整代码可以在 <a href="https://github.com/odinsam/learn-vue3.0">GitHub</a> 。<br><a href="151c.html">Vue3.0 学习系列</a></p></blockquote><span id="more"></span> <h4 id="1-mainjs-与vue2的区别"><a class="markdownIt-Anchor" href="#1-mainjs-与vue2的区别"></a> 1. main.js 与vue2的区别</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入的不在是vue的构造函数，而是一个名为createApp的工厂函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//createApp(app)创建应用实例对象app，类似vue2中的vm，但比vm更轻</span></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-setup函数"><a class="markdownIt-Anchor" href="#2-setup函数"></a> 2. setup函数</h4><ol><li>vue3.0中的衣蛾新配置项setup.setup是所有组合api的基础</li><li>组件中所有用都的 数据、方法等都要配置在setup中。</li><li>setup函数的返回值有两种，<br>如果返回一个对象，则对象中的属性、方法等在模板中军可以直接使用<br>如果返回一个渲染函数，则可以自定渲染内容</li><li>setup不能是一个async函数，因为返回值不再是return的对象而是promise。末班看不到reutnr对象中的属性。</li><li>尽量不要vue3与vue2混用。如果重名以vue3为主</li><li>ref可以将string、number转换为引用实现的实例对象(refimpl).从而实现数据的响应式操作.模板在解析是如果显示的数据是refimpl对象则会自动获取value的值.对象类型的数据使用了reactive函数实现了响应式.</li><li>reactive只能将对象类型的数据改变为响应式数据。并且在获取时不需要再通过value而可以直接获取 let 代理对象=reactive(代理对象).reactive定义的响应式数据是深层次的。是基于es6的proxy实现，通过代理对象操作源对象内部数据进行操作。</li><li>reactive定义的响应式数据可以直接修改对象的属性、通过数组的下标操作数组.具体实现原理如下:</li></ol><figure class="highlight js"><figcaption><span>es6的proxy原理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;odinsam&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person,&#123;</span><br><span class="line">    <span class="comment">// 读取属性时调用</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target,propName</span>)</span> &#123; <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,propName) &#125;</span><br><span class="line">    <span class="comment">// 新增、修改时调用</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target,propName,value</span>)</span> &#123; <span class="built_in">Reflect</span>.set(target,propName,value) &#125;</span><br><span class="line">    <span class="comment">// 删除属性时调用</span></span><br><span class="line">    <span class="function"><span class="title">deleteProperty</span>(<span class="params">target,propName</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target,propName) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>备注:<br><font color="red">1. ref通常用来定义基本类型数据，reactive通常定义对象类型的数据 </font><br><font color="red">2. ref通过Object.defineProperty()的get、set方法来实现响应式，reactive通过Proxy来实现响应式，并通过Reflect操作源对象内部的数据 </font><br><font color="red">3. ref定义的数据需要.value获取，模板中获取不需要.value.reactive定义的数据，操作读取都不需要.value </font></p></blockquote><ol start="9"><li>setup在beforeCreate之前执行，且this是undefind</li><li>setup的参数<br>props:值为对象，包含：组件外部传递过来且组件内部申明接收了的属性<br>context:<br>attrs:值为对象，包含：组件外部传递过来，但没有在props配置中申明的属性。相当于vue2的 attrs    slots:收到的插槽内容，相当于 this.slots<br>emit: 分发自定义事件的函数 相当于 this.$emit</li></ol><h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h4><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;props信息:&#123;&#123;propa&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;span&gt;姓名:&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;span&gt;班级:&#123;&#123;stuInfo1.className&#125;&#125;&lt;/span&gt;&lt;span&gt;年龄:&#123;&#123;stuInfo1.stuAge&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;span&gt;性别:&#123;&#123;stuInfo2.sex&#125;&#125;&lt;/span&gt;&lt;span&gt;地址:&#123;&#123;stuInfo2.address&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;span&gt;爱好:&#123;&#123;stuInfo2.hobby&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;span v-show=&quot;stuInfo2.newProto&quot;&gt;新属性:&#123;&#123;stuInfo2.newProto&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;slot name=&quot;slotStu&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;btnClick&quot;&gt;edit&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;addProto&quot;&gt;add Prototype&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;deleteProto&quot;&gt;delete Prototype&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;customEventClick&quot;&gt;emit触发自定义事件&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // ref 可以将基本数据类型或者对象改变为响应式数据 let name = ref(&#x27;odinsam&#x27;)</span><br><span class="line">    // reactive 只能将对象类型的数据改变为响应式数据 let stuInfo = reactive(&#123;sex:&#x27;男&#x27;,address:&#x27;beijing&#x27;&#125;)</span><br><span class="line">    // let 代理对象=reactive(代理对象).reactive定义的响应式数据是深层次的。是基于es6的proxy实现，通过代理对象操作源对象内部数据进行操作。</span><br><span class="line">    // 实现原理</span><br><span class="line">    /**</span><br><span class="line">            let person = &#123;name:&#x27;odinsam&#x27;&#125;</span><br><span class="line">            let p = new Proxy(person,&#123;</span><br><span class="line">                // 读取属性时调用</span><br><span class="line">                get(target,propName) &#123; return Reflect.get(target,propName) &#125;</span><br><span class="line">                // 新增、修改时调用</span><br><span class="line">                set(target,propName,value) &#123; Reflect.set(target,propName,value) &#125;</span><br><span class="line">                // 删除属性时调用</span><br><span class="line">                deleteProperty(target,propName)&#123; return Reflect.deleteProperty(target,propName) &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    */</span><br><span class="line">    //备注:</span><br><span class="line">    // 1. ref通常用来定义基本类型数据，reactive通常定义对象类型的数据</span><br><span class="line">    // 2. ref通过Object.defineProperty()的get、set方法来实现响应式，reactive通过Proxy来实现响应式，并通过Reflect操作源对象内部的数据</span><br><span class="line">    // 3. ref定义的数据需要.value获取，模板中获取不需要.value.reactive定义的数据，操作读取都不需要.value</span><br><span class="line">  import &#123; ref,reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    //接收父组件通过props传递的数据</span><br><span class="line">    props: [&#x27;propa&#x27;],</span><br><span class="line">    //申明父组件传递的自定义事件。不申明会有警告</span><br><span class="line">    emit: [&#x27;cmpEvent&#x27;],</span><br><span class="line">    /**</span><br><span class="line">    props:值为对象，包含：组件外部传递过来且组件内部申明接收了的属性</span><br><span class="line">    context:</span><br><span class="line">    attrs:值为对象，包含：组件外部传递过来，但没有在props配置中申明的属性。相当于vue2的 $attrs</span><br><span class="line">        slot:收到的插槽内容，相当于 this.$slots</span><br><span class="line">        emit: 分发自定义事件的函数 相当于 this.$emit</span><br><span class="line">     */</span><br><span class="line">    setup(props,context) &#123;</span><br><span class="line">        //将数据转换为refimpl对象从而实现响应式编程</span><br><span class="line">        let stuName = ref(&#x27;odinsam&#x27;)</span><br><span class="line">        let stuInfo1 = ref(&#123; className: &#x27;一年级&#x27;, stuAge: 19 &#125;)</span><br><span class="line">        let stuInfo2 = reactive(&#123; sex: &#x27;男&#x27;, address: &#x27;beijing&#x27;,hobby:[&#x27;学习&#x27;,&#x27;游戏&#x27;,&#x27;看电影&#x27;] &#125;)</span><br><span class="line">        function btnClick() &#123;</span><br><span class="line">            console.log(stuName);</span><br><span class="line">            //获取refimpl对象的值通过value属性</span><br><span class="line">            stuName.value = &#x27;changeName&#x27;</span><br><span class="line">            stuInfo1.value.className = &#x27;二年级&#x27;</span><br><span class="line">            stuInfo1.value.stuAge = 20</span><br><span class="line">            //reactive定义的代理对象在获取时不需要再通过value而可以直接获取 </span><br><span class="line">            stuInfo2.sex = &#x27;女&#x27;</span><br><span class="line">            stuInfo2.address = &#x27;nanjing&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        // vue3可以直接修改对象的属性、通过数组的下标操作数组.</span><br><span class="line">        function addProto() &#123;</span><br><span class="line">            //vue2 中 需要 this.$set(对象,&#x27;属性名&#x27;,属性的值) 操作    </span><br><span class="line">            stuInfo2.newProto = &#x27;新属性&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        function deleteProto() &#123;</span><br><span class="line">            //vue2 中 需要 this.$delete(对象,&#x27;属性名&#x27;) 操作    </span><br><span class="line">            delete stuInfo2.newProto</span><br><span class="line">        &#125;</span><br><span class="line">        function customEventClick() &#123;</span><br><span class="line">            //触发自定义事件</span><br><span class="line">            context.emit(&#x27;cmpEvent&#x27;, &#123;customEventParam:&#x27;自定义方法的参数&#x27;&#125;);   </span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName,</span><br><span class="line">            stuInfo1,</span><br><span class="line">            stuInfo2,</span><br><span class="line">            btnClick,</span><br><span class="line">            addProto,</span><br><span class="line">            deleteProto,</span><br><span class="line">            customEventClick</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">        &lt;div&gt;自定义方法的参数:&#123;&#123;cstmParam.customEventParam&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;Student propa=&quot;propa传值&quot; @cmpEvent=&quot;cmpEvent&quot;&gt;</span><br><span class="line">            &lt;!--vue3中 需要使用 v-slot:插槽名 的方式定义  不能使用 slot=&#x27;操作名&#x27; 的vue2形式--&gt;</span><br><span class="line">            &lt;template v-slot:slotStu&gt;</span><br><span class="line">                &lt;div style=&quot;background-color:aquamarine&quot;&gt;</span><br><span class="line">                    &lt;span&gt;插槽内容&lt;/span&gt;   </span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;@vue/reactivity&#x27;;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let cstmParam = reactive(&#123;&#125;)</span><br><span class="line">        function cmpEvent(param) &#123;</span><br><span class="line">            cstmParam[&#x27;customEventParam&#x27;] = param[&#x27;customEventParam&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;</span><br><span class="line">            cstmParam,</span><br><span class="line">            cmpEvent,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;了解vue3与vue2的一些区别。重点了解vue3中setup函数的作用和用法。讲解vue3中对响应式数据的处理ref和reactive的用法以及对应实现的原理，并说明与vue2的区别。&lt;br&gt;
完整代码可以在 &lt;a href=&quot;https://github.com/odinsam/learn-vue3.0&quot;&gt;GitHub&lt;/a&gt; 。&lt;br&gt;
&lt;a href=&quot;151c.html&quot;&gt;Vue3.0 学习系列&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="defineProperty" scheme="https://www.odinsam.com/tags/defineProperty/"/>
    
    <category term="props" scheme="https://www.odinsam.com/tags/props/"/>
    
    <category term="slot" scheme="https://www.odinsam.com/tags/slot/"/>
    
    <category term="proxy" scheme="https://www.odinsam.com/tags/proxy/"/>
    
    <category term="ref" scheme="https://www.odinsam.com/tags/ref/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/tags/vue3/"/>
    
    <category term="setup" scheme="https://www.odinsam.com/tags/setup/"/>
    
    <category term="reactive" scheme="https://www.odinsam.com/tags/reactive/"/>
    
    <category term="context" scheme="https://www.odinsam.com/tags/context/"/>
    
    <category term="reflect" scheme="https://www.odinsam.com/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 学习系列</title>
    <link href="https://www.odinsam.com/articles/151c.html"/>
    <id>https://www.odinsam.com/articles/151c.html</id>
    <published>2022-10-20T11:47:00.000Z</published>
    <updated>2022-10-25T12:46:12.714Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue3.0学习目录. 完整代码可以在 <a href="https://github.com/odinsam/learn-vue3.0">GitHub</a> 。</p></blockquote><span id="more"></span><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><h4 id="01-初识vue3"><a class="markdownIt-Anchor" href="#01-初识vue3"></a> <a href="2774.html">[01] 初识vue3</a></h4><h4 id="02-计算属性与监视属性"><a class="markdownIt-Anchor" href="#02-计算属性与监视属性"></a> <a href="cab0.html">[02] 计算属性与监视属性</a></h4><h4 id="03-生命周期"><a class="markdownIt-Anchor" href="#03-生命周期"></a> <a href="4ed.html">[03] 生命周期</a></h4><h4 id="04-vue3中的hook"><a class="markdownIt-Anchor" href="#04-vue3中的hook"></a> <a href="bd63.html">[04] vue3中的hook</a></h4><h4 id="05-05-toref与torefs"><a class="markdownIt-Anchor" href="#05-05-toref与torefs"></a> <a href="ba93.html">[05] 05. toRef与toRefs</a></h4><h4 id="06-06-其他的compositionapi及总结"><a class="markdownIt-Anchor" href="#06-06-其他的compositionapi及总结"></a> <a href="b618.html">[06] 06. 其他的CompositionApi及总结</a></h4><h4 id="07-07-07-vue3中新增的一些组件"><a class="markdownIt-Anchor" href="#07-07-07-vue3中新增的一些组件"></a> <a href="40e7.html">[07] 07. 07. vue3中新增的一些组件</a></h4>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Vue3.0学习目录. 完整代码可以在 &lt;a href=&quot;https://github.com/odinsam/learn-vue3.0&quot;&gt;GitHub&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue3" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue3/"/>
    
    
    <category term="vue3" scheme="https://www.odinsam.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 15. vue-router</title>
    <link href="https://www.odinsam.com/articles/8447.html"/>
    <id>https://www.odinsam.com/articles/8447.html</id>
    <published>2022-10-20T00:52:00.000Z</published>
    <updated>2022-10-21T13:14:19.313Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 15 章: vue-router路由</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="vue-router路由"><a class="markdownIt-Anchor" href="#vue-router路由"></a> vue-router路由</h4><ol><li>vue-router是vue的一个插件库，专门用来实现spa应用(单页面应用)</li><li>一个路由就是一组映射关系 key-value,key是路径，value是组件(前端)或函数(后端)</li><li>创建路由表,多级路由配置child时不需要写父路径 以及 /</li></ol><figure class="highlight js"><figcaption><span>router/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="comment">//路由工作的两种模式 默认是hash模式 mode改变模式为history模式</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: Home,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">            <span class="comment">//不需要写父路径 以及 /  也可以给路由命名 跳转时可以不用path 使用name即可</span></span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>, <span class="attr">component</span>: News,<span class="attr">name</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">children</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="comment">//路由使用parmas传参,跳转必须使用name不可以使用path  获取使用$route.params.id获取</span></span><br><span class="line">                            <span class="attr">path</span>: <span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>: Detail,</span><br><span class="line">                            <span class="comment">//给details组件传递对象，所有数据在details中可以以props的方式接收</span></span><br><span class="line">                            <span class="comment">// props:&#123;a:1,b:2&#125;</span></span><br><span class="line">                            <span class="comment">//如果props是true，则路由收到的params参数会以props的形式传递 即 id 会以props方式传递</span></span><br><span class="line">                            <span class="comment">// props:true</span></span><br><span class="line">                            <span class="comment">// 如果props是函数，则路由同样以props的形式传递参数给组件，但是这可以通过route结构获取到query并传参（此处使用解构赋值的连续写法 先从route中结构获取query，再从query中结构出id，title</span></span><br><span class="line">                            <span class="function"><span class="title">props</span>(<span class="params">&#123;query:&#123;id,title&#125;&#125;</span>)</span>&#123; <span class="keyword">return</span> &#123;id,title&#125; &#125;</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123; <span class="attr">path</span>: <span class="string">&#x27;messages&#x27;</span>, <span class="attr">component</span>: Message &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: About</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>加载VueRouter插件并加载路由表</li></ol><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">    router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>使用route-link实现路由切换 route-view 指定展示位置(被切换掉组件会被销毁)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--一级路由--&gt;</span><br><span class="line">&lt;router-link class=&quot;navitem&quot; active-class=&quot;navitem-active&quot; to=&quot;/home&quot;&gt;Home Page&lt;/router-link&gt;</span><br><span class="line">&lt;!--一级路由  replace模式：控制路由器跳转时操作浏览器历史记录的模式，默认是push追加记录，replace是替换当前记录。--&gt;</span><br><span class="line">&lt;router-link replace class=&quot;navitem&quot; active-class=&quot;navitem-active&quot; to=&quot;/home&quot;&gt;Home Page&lt;/router-link&gt;</span><br><span class="line">&lt;!--二级路由--&gt;</span><br><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br><span class="line">&lt;!--route-view展示--&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;!-- router-link url querystring传参 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/news/detail?id=$&#123;n.id&#125;`&quot;&gt;&#123;&#123;n.title&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">&lt;!-- router-link url params传参 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;`/home/news/detail/$&#123;n.id&#125;`&quot;&gt;&#123;&#123;n.title&#125;&#125;-byid&lt;/router-link&gt;</span><br><span class="line">&lt;!-- router-link to对象 query传参 只能用name 不能用path--&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;</span><br><span class="line">name:&#x27;detail&#x27;,</span><br><span class="line">    query:&#123; id:n.id &#125;</span><br><span class="line">&#125;&quot;&gt;</span><br><span class="line">&#123;&#123;n.title&#125;&#125; - query对象形式</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line">&lt;!-- router-link to对象 param传参 只能用name 不能用path--&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;</span><br><span class="line">name:&#x27;detailid&#x27;,</span><br><span class="line">    params:&#123; id:n.id &#125;</span><br><span class="line">&#125;&quot;&gt;</span><br><span class="line">&#123;&#123;n.title&#125;&#125; - params对象形式</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>路由组件一般放在components文件夹，路由组件放在page文件夹</li><li>每一个组件都有自己的$route属性，存储自己的路由信息</li><li>整个应用只有一个router，可以通过$router获取</li><li>也可以不借助router-link实现路由跳转.两种模式：push模式和replace模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编程式导航 push模式 query传参</span></span><br><span class="line"><span class="function"><span class="title">pushShow</span>(<span class="params">n</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>:&#123; <span class="attr">id</span>:n.id &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//编程式导航 replace模式 params传参</span></span><br><span class="line"><span class="function"><span class="title">replaceShow</span>(<span class="params">n</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;detailid&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123; <span class="attr">id</span>:n.id &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">backClick</span>(<span class="params"></span>)</span> &#123; <span class="built_in">this</span>.$router.back(); &#125;,<span class="comment">//后退</span></span><br><span class="line"><span class="function"><span class="title">forwardClick</span>(<span class="params"></span>)</span> &#123; <span class="built_in">this</span>.$router.forward(); &#125;,<span class="comment">//前进</span></span><br><span class="line"><span class="function"><span class="title">goClick</span>(<span class="params"></span>)</span> &#123; <span class="built_in">this</span>.$router.go(<span class="number">2</span>); &#125; <span class="comment">//跳转</span></span><br></pre></td></tr></table></figure><ol start="10"><li>可以使用keep-alive标签包含<router-view></router-view>用来缓存路由组件默认缓存所有组件。:include=&quot;[‘组件名’]&quot; 指定需要缓存的路由组件。exclude功能刚好相反</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive :include=&quot;[&#x27;Message&#x27;]&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;keep-alive :exclude=&quot;[&#x27;News&#x27;]&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><ol start="11"><li>当使用keep-alive包含路由组件后，组件不会触发beforeDestroy销毁流程。需要使用路由组件独有的两个生命周期解决 activated()激活、deactivated()失活。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//激活</span></span><br><span class="line"><span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.timer=<span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.opacity -= <span class="number">0.01</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.opacity &lt;= <span class="number">0</span>) <span class="built_in">this</span>.opacity = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//失活</span></span><br><span class="line"><span class="function"><span class="title">deactivated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="12"><li>路由守卫分为 全局前置路由守卫、全局后置路由守卫、独享路由守卫、组件内守卫</li></ol><figure class="highlight js"><figcaption><span>router/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由守卫分为 全局前置路由守卫、全局后置路由守卫、独享守卫、组件内守卫</span></span><br><span class="line"><span class="comment">//全局前置路由守卫 - 初始化、每次路由切换时被调用</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.meta.isAuth) &#123;</span><br><span class="line">        <span class="comment">//判断权限</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>) === <span class="string">&#x27;odinsam&#x27;</span>) next();</span><br><span class="line">        <span class="keyword">else</span> alert(<span class="string">&#x27;undefind token&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫 - 初始化、每次路由切换时被调用</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title || <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="13"><li>独享路由守卫是在加某一个需要控制的路由上.<font color="red">代码加在路由表需要控制的路由中</font></li></ol><figure class="highlight js"><figcaption><span>router/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="14"><li>组件内守卫<font color="red">代码加在组件里需要控制的路由中</font></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//当路由进入之前   通过路由规则，进入该组件时被调用</span><br><span class="line">beforeRouteEnter (to, from, next) &#123; // ... &#125;,</span><br><span class="line">//当路由离开之前    通过路由规则，离开改组件时被调用</span><br><span class="line">beforeRouteLeave (to, from, next) &#123; // ... &#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 15 章: vue-router路由&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="vue-router" scheme="https://www.odinsam.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 14. vuex</title>
    <link href="https://www.odinsam.com/articles/97b5.html"/>
    <id>https://www.odinsam.com/articles/97b5.html</id>
    <published>2022-10-20T00:42:00.000Z</published>
    <updated>2022-10-21T13:06:12.155Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 14 章: vuex</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="vuex"><a class="markdownIt-Anchor" href="#vuex"></a> vuex</h4><font color="red">vue组件通过dispatch('key',param)找到store的actions(key,param),action通过commit找到mutations(key,function),mutations执行回调函数修改state中的数据，vue根据state数据的改变自动重新render模板.<p>vue组件也可以直接通过commit找到mutations。这种情况一般用在所需要的参数是固定已知的情况下</p></font>1. 安装vuex vue2.0需要安装vuex3 npm i vuex@32. 创建 store/index.js。store中包含actions、mutations、state、getters。<figure class="highlight js"><figcaption><span>store/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="comment">// 模块化创建storeOptions</span></span><br><span class="line"><span class="keyword">const</span> stuOptions = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params">context, param</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;action add&#x27;</span>, param);</span><br><span class="line">            context.commit(<span class="string">&#x27;ADD&#x27;</span>, param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">ADD</span>(<span class="params">state, param</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;mutations add&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> stuId =</span><br><span class="line">                state.stus.length === <span class="literal">undefined</span> ? <span class="number">1</span> : state.stus.length + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">const</span> stu = &#123; <span class="attr">id</span>: stuId, <span class="attr">stuName</span>: stuId + <span class="string">&#x27;-&#x27;</span> + param.stuName &#125;;</span><br><span class="line">            state.stus.push(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>: &#123; <span class="attr">stus</span>: [] &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> state.stus.length * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        stuOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>创建vue时，在配置项中配置store</li></ol><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>在组件中使用store</li></ol><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;div&gt;放大十倍后的学生人数:&#123;&#123;$store.getters[&#x27;stuOptions/bigSum&#x27;]&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;s in $store.state.stuOptions.stus&quot; :key=&quot;s.id&quot;&gt;&#123;&#123;s.stuName&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        console.log(this.$store);</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;span&gt;共计学生&#123;&#123;stusSum&#125;&#125;,&lt;/span&gt;&lt;button @click=&quot;addStu&quot;&gt;添加学生&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">    &lt;Student&gt;&lt;/Student&gt;&lt;br/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">import &#123;mapState,mapGetters,mapMutations&#125; from &#x27;vuex&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addStu() &#123;</span><br><span class="line">            this.$store.dispatch(&#x27;stuOptions/add&#x27;, &#123; stuName: &#x27;odin&#x27; &#125;);</span><br><span class="line">            //跳过dispatch字节commit到mutations</span><br><span class="line">            // this.$store.commit(&#x27;ADD&#x27;,&#123; stuName: &#x27;odin&#x27; &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        //使用映射的形式 映射mutations</span><br><span class="line">        // ...mapMutations([&#x27;ADD&#x27;])</span><br><span class="line">        // ...mapMutations(&#x27;stuOptions&#x27;,[&#x27;ADD&#x27;])</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        stusSum() &#123;</span><br><span class="line">            console.log(this.$store);</span><br><span class="line">            return this.$store.state.stuOptions.stus.length</span><br><span class="line">        &#125;,</span><br><span class="line">        //使用映射的形式 映射state为计算属性</span><br><span class="line">        // ...mapState([&#x27;stus&#x27;])</span><br><span class="line">        ...mapState(&#x27;stuOptions&#x27;,[&#x27;stus&#x27;])</span><br><span class="line">        //...mapGetters([&#x27;stus&#x27;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 14 章: vuex&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="vuex" scheme="https://www.odinsam.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 13. slot插槽</title>
    <link href="https://www.odinsam.com/articles/d7ab.html"/>
    <id>https://www.odinsam.com/articles/d7ab.html</id>
    <published>2022-10-19T20:25:00.000Z</published>
    <updated>2022-10-21T13:06:21.522Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 13 章: slot插槽</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="slot插槽"><a class="markdownIt-Anchor" href="#slot插槽"></a> slot插槽</h4><ol><li>让父组件可以向子组件指定的位置插入html结构，也是一种组件间通信的方式，适用于 父组件给子组件传递数据</li><li>插槽分为 默认插槽、具名插槽、作用域插槽</li><li>默认插槽: 数据定义在父组件中</li></ol><figure class="highlight html"><figcaption><span>父组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span>&gt;</span></span><br><span class="line">  html结构</span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>子组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>具名插槽: 数据定义在父组件中</li></ol><figure class="highlight html"><figcaption><span>父组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;插槽名称&#x27;</span>&gt;</span></span><br><span class="line">        html结构</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>插槽名称<span class="attr">2</span>&gt;</span></span><br><span class="line">        html结构</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>子组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;插槽名称1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;插槽名称2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>作用域插槽:数据定义在子组件中</li></ol><figure class="highlight html"><figcaption><span>父组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;stus,msg&#125;&quot;</span>&gt;</span></span><br><span class="line">        html结构</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>插槽名称<span class="attr">2</span>&gt;</span></span><br><span class="line">        html结构</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>子组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:stus</span>=<span class="string">&quot;子组件数据&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;作用域&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h4><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        slot插槽</span><br><span class="line">        1. 让父组件可以向子组件指定的位置插入html结构，也是一种组件间通信的方式，适用于 父组件给子组件传递数据</span><br><span class="line">        2. 插槽分为 默认插槽、具名插槽、作用域插槽</span><br><span class="line">        3. 默认插槽: 数据定义在父组件中</span><br><span class="line">            父组件  </span><br><span class="line">            &lt;Category title=&quot;美食&quot;&gt;</span><br><span class="line">                html结构</span><br><span class="line">            &lt;/Category&gt; </span><br><span class="line">            子组件 </span><br><span class="line">            &lt;template&gt;</span><br><span class="line">                &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        4. 具名插槽: 数据定义在父组件中</span><br><span class="line">            父组件  </span><br><span class="line">            &lt;Category title=&quot;美食&quot;&gt;</span><br><span class="line">                &lt;template slot=&#x27;插槽名称&#x27;&gt;</span><br><span class="line">                    html结构</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">                &lt;template v-slot:插槽名称2&gt;</span><br><span class="line">                    html结构</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/Category&gt; </span><br><span class="line">            子组件 </span><br><span class="line">            &lt;template&gt;</span><br><span class="line">                &lt;slot name=&#x27;插槽名称1&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">                &lt;slot name=&#x27;插槽名称2&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        5. 作用域插槽:数据定义在子组件中</span><br><span class="line">            父组件  </span><br><span class="line">            &lt;Category title=&quot;美食&quot;&gt;</span><br><span class="line">                &lt;template slot-scope=&quot;&#123;stus,msg&#125;&quot;&gt;</span><br><span class="line">                    html结构</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">                &lt;template v-slot:插槽名称2&gt;</span><br><span class="line">                    html结构</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/Category&gt; </span><br><span class="line">            子组件</span><br><span class="line">            &lt;template&gt;</span><br><span class="line">                &lt;slot :stus=&quot;子组件数据&quot; msg=&quot;作用域&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;div class=&quot;dvslot&quot;&gt;</span><br><span class="line">        &lt;Category title=&quot;美食&quot;&gt;</span><br><span class="line">            &lt;img slot=&quot;center&quot; src=&quot;https://s2.ax1x.com/2021/01/16/srJ1q0.jpg&quot; style=&quot;width:100%;&quot; alt=&quot;美食&quot; /&gt;</span><br><span class="line">            &lt;div class=&quot;footer&quot; slot=&quot;footer&quot;&gt;</span><br><span class="line">                &lt;a href=&quot;http://odinsam.com&quot;&gt;热门美食&lt;/a&gt;&lt;a href=&quot;http://odinsam.com&quot;&gt;更多美食&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">        &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">            &lt;ul slot=&quot;center&quot;&gt;</span><br><span class="line">                &lt;li v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;a class=&quot;footer&quot; slot=&quot;footer&quot; href=&quot;http://odinsam.com&quot;&gt;热门游戏&lt;/a&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">        &lt;Category title=&quot;影视&quot;&gt;</span><br><span class="line">            &lt;video slot=&quot;center&quot; controls src=&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;&gt;&lt;/video&gt;</span><br><span class="line">            &lt;template  v-slot:footer&gt;</span><br><span class="line">                &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;http://odinsam.com&quot;&gt;热门&lt;/a&gt;</span><br><span class="line">                    &lt;a href=&quot;http://odinsam.com&quot;&gt;经典&lt;/a&gt;</span><br><span class="line">                    &lt;a href=&quot;http://odinsam.com&quot;&gt;推荐&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;h4&gt;欢迎观看&lt;/h4&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">        &lt;Student title=&quot;作用于插槽&quot;&gt;</span><br><span class="line">            &lt;template slot-scope=&quot;&#123;stus,msg&#125;&quot;&gt;</span><br><span class="line">                &lt;ul slot=&quot;center&quot;&gt;</span><br><span class="line">                    &lt;h4 v-for=&quot;stu in stus&quot; :key=&quot;stu.id&quot;&gt;&#123;&#123;stu.name&#125;&#125;&lt;/h4&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">                &lt;h4&gt;&#123;&#123;msg&#125;&#125;&lt;/h4&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Category from &#x27;./components/Category.vue&#x27;;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            &#x27;foods&#x27;: [&#x27;火锅&#x27;, &#x27;小龙虾&#x27;, &#x27;牛排&#x27;, &#x27;烧烤&#x27;],</span><br><span class="line">            &#x27;games&#x27;: [&#x27;魔兽&#x27;, &#x27;炉石&#x27;, &#x27;暗黑&#x27;, &#x27;星际&#x27;],</span><br><span class="line">            &#x27;films&#x27;:[&#x27;西游&#x27;,&#x27;三国&#x27;,&#x27;红楼梦&#x27;,&#x27;水浒&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Category,Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">.dvslot</span><br><span class="line">&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-evenly;</span><br><span class="line">&#125;</span><br><span class="line">video&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">&#125;</span><br><span class="line">.footer</span><br><span class="line">&#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Category.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;slot name=&quot;center&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stus: [</span><br><span class="line">                &#123; id: 1, name: &quot;odinsam1&quot; &#125;,</span><br><span class="line">                &#123; id: 2, name: &quot;odinsam2&quot; &#125;,</span><br><span class="line">                &#123; id: 3, name: &quot;odinsam3&quot; &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: [&#x27;title&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:400px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;slot :stus=&quot;stus&quot; msg=&quot;作用域&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stus: [</span><br><span class="line">                &#123; id: 1, name: &quot;odinsam1&quot; &#125;,</span><br><span class="line">                &#123; id: 2, name: &quot;odinsam2&quot; &#125;,</span><br><span class="line">                &#123; id: 3, name: &quot;odinsam3&quot; &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: [&#x27;title&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:400px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 13 章: slot插槽&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="slot" scheme="https://www.odinsam.com/tags/slot/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 12. 配置代理</title>
    <link href="https://www.odinsam.com/articles/551e.html"/>
    <id>https://www.odinsam.com/articles/551e.html</id>
    <published>2022-10-19T18:56:00.000Z</published>
    <updated>2022-10-21T13:06:33.533Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 12 章: 配置代理</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="配置代理"><a class="markdownIt-Anchor" href="#配置代理"></a> 配置代理</h4><ol><li>yarn add axios 安装axios库</li><li>在vue.config.js中添加代理配置 devServer:{ 配置内容 }</li><li>简单配置 proxy: ‘<a href="http://localhost:8899">http://localhost:8899</a>’</li><li>复杂配置,可配置多个代理</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">&#x27;/odinapi&#x27;: &#123;</span><br><span class="line">    target: &#x27;http:<span class="comment">//localhost:8899&#x27;, //目标请求服务器</span></span><br><span class="line">        pathRewrite: &#123; &#x27;^/odinapi&#x27;: &#x27;&#x27; &#125;, <span class="comment">//路径重写匹配服务器路径</span></span><br><span class="line">        ws: <span class="literal">true</span>, <span class="comment">//是否支持websocket</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span> <span class="comment">//用户控制请求头中的host  true服务器获取到的请求头是服务器的请求ip localhost:8899，false是前端请求ip localhost:8080</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在需要请求的地方发起axios请求获取数据</li></ol><h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码:</h4><figure class="highlight js"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = defineConfig(&#123;</span><br><span class="line">    <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//关闭语法检查</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//简单配置代理服务器 不能添加多个代理服务器</span></span><br><span class="line">    <span class="comment">// devServer: &#123;</span></span><br><span class="line">    <span class="comment">//     proxy: &#x27;http://localhost:5000&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/odinapi&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8899&#x27;</span>, <span class="comment">//目标请求服务器</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/odinapi&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;, <span class="comment">//路径重写匹配服务器路径</span></span><br><span class="line">                <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">//是否支持websocket</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span> <span class="comment">//用户控制请求头中的host</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        vue配置代理</span><br><span class="line">        1. yarn add axios 安装axios库</span><br><span class="line">        2. 在vue.config.js中添加代理配置 devServer:&#123; 配置内容 &#125;</span><br><span class="line">        3. 简单配置 proxy: &#x27;http://localhost:8899&#x27;</span><br><span class="line">        4. 复杂配置,可配置多个代理</span><br><span class="line">            proxy: &#123;</span><br><span class="line">                &#x27;/odinapi&#x27;: &#123;</span><br><span class="line">                    target: &#x27;http://localhost:8899&#x27;, //目标请求服务器</span><br><span class="line">                    pathRewrite: &#123; &#x27;^/odinapi&#x27;: &#x27;&#x27; &#125;, //路径重写匹配服务器路径</span><br><span class="line">                    ws: true, //是否支持websocket</span><br><span class="line">                    changeOrigin: true //用户控制请求头中的host  true服务器获取到的请求头是服务器的请求ip localhost:8899，false是前端请求ip localhost:8080</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        5. 在需要请求的地方发起axios请求获取数据</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">    &lt;button @click=&quot;getStus&quot;&gt;获取学生信息&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;stu in stus&quot; :key=&quot;stu.id&quot;&gt;</span><br><span class="line">            &lt;Student stuName=&quot;stu.stuName&quot;&gt;&lt;/Student&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stus:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getStus() &#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:8080/odinapi/student&#x27;).then(</span><br><span class="line">                response =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;success&#x27;, response.data);</span><br><span class="line">                    this.stus = response.data;</span><br><span class="line">                &#125;,</span><br><span class="line">                error =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;error&#x27;,error.message);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 12 章: 配置代理&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="axios" scheme="https://www.odinsam.com/tags/axios/"/>
    
    <category term="代理" scheme="https://www.odinsam.com/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="proxy" scheme="https://www.odinsam.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 11. 动画效果</title>
    <link href="https://www.odinsam.com/articles/f2de.html"/>
    <id>https://www.odinsam.com/articles/f2de.html</id>
    <published>2022-10-19T15:17:00.000Z</published>
    <updated>2022-10-21T13:06:42.748Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 11 章: 动画效果</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="动画效果"><a class="markdownIt-Anchor" href="#动画效果"></a> 动画效果</h4><ol><li>普通实现方式: 使用 @keyframes amName{ from{transform: translateX(-100%);}to{transform: translateX(0);}} 创建关键帧并定义动画</li><li>定义vue的进入动画  .name-enter-active{animation: odinAnimate 1s linear;}</li><li>定义vue的离开动画  .name-leave-active{animation: odinAnimate 1s linear reverse;}</li><li>使用transition包裹需要动画的组件,appear属性可以在组件第一次加载的时候执行enter动画</li></ol><h4 id="过度动画"><a class="markdownIt-Anchor" href="#过度动画"></a> 过度动画</h4><ol><li>定义过度动画 .name-enter,.name-leave-to{transform: translateX(-100%);} 和 .name-leave .name-enter-to{transform: translateX(0);}</li><li>定义过滤效果 .name-enter-active,.name-leave-active{transition: 3s linear;}</li><li>多个元素需要相同的动画效果需要使用 transition-group</li></ol><h4 id="第三方动画库-详见-httpsanimatestyle"><a class="markdownIt-Anchor" href="#第三方动画库-详见-httpsanimatestyle"></a> 第三方动画库 详见 <a href="https://animate.style/">https://animate.style/</a></h4><ol><li>yarn add animate.css</li><li>引入 animate.css   import ‘animate.css’</li><li>给需要动画的组件 添加 name=‘animate__animated animate__bounce’</li><li>添加 enter-active-class=‘动画名称’  leave-active-class=‘动画名称’</li></ol><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        动画效果</span><br><span class="line">        1. 普通实现方式: 使用 @keyframes amName&#123; from&#123;transform: translateX(-100%);&#125;to&#123;transform: translateX(0);&#125;&#125; 创建关键帧并定义动画</span><br><span class="line">        2. 定义vue的进入动画  .name-enter-active&#123;animation: odinAnimate 1s linear;&#125;</span><br><span class="line">        3. 定义vue的离开动画  .name-leave-active&#123;animation: odinAnimate 1s linear reverse;&#125;</span><br><span class="line">        4. 使用transition包裹需要动画的组件,appear属性可以在组件第一次加载的时候执行enter动画</span><br><span class="line"></span><br><span class="line">        过度动画</span><br><span class="line">        1. 定义过度动画 .name-enter,.name-leave-to&#123;transform: translateX(-100%);&#125; 和 .name-leave .name-enter-to&#123;transform: translateX(0);&#125;</span><br><span class="line">        2. 定义过滤效果 .name-enter-active,.name-leave-active&#123;transition: 3s linear;&#125;</span><br><span class="line">        3. 多个元素需要相同的动画效果需要使用 transition-group</span><br><span class="line"></span><br><span class="line">        第三方动画库 详见 https://animate.style/</span><br><span class="line">        1. yarn add animate.css</span><br><span class="line">        2. 引入 animate.css   import &#x27;animate.css&#x27;</span><br><span class="line">        3. 给需要动画的组件 添加 name=&#x27;animate__animated animate__bounce&#x27;</span><br><span class="line">        4. 添加 enter-active-class=&#x27;动画名称&#x27;  leave-active-class=&#x27;动画名称&#x27;</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;showComponent&quot;&gt;显示、隐藏组件&lt;/button&gt;</span><br><span class="line">    &lt;!--动画效果--&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;transition name=&quot;odinam1&quot; appear&gt;</span><br><span class="line">            &lt;Student v-show=&quot;isShow&quot;&gt;&lt;/Student&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!--过度动画--&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;transition name=&quot;odinam2&quot; appear&gt;</span><br><span class="line">            &lt;Student v-show=&quot;isShow&quot;&gt;&lt;/Student&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!--组过度动画--&gt; </span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;transition-group name=&quot;odinam2&quot; appear &gt;</span><br><span class="line">            &lt;Student v-show=&quot;isShow&quot; key=&quot;1&quot;&gt;&lt;/Student&gt;</span><br><span class="line">            &lt;Student v-show=&quot;!isShow&quot; key=&quot;2&quot;&gt;&lt;/Student&gt;</span><br><span class="line">        &lt;/transition-group&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!--第三方动画库--&gt; </span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;transition-group name=&#x27;animate__animated animate__bounce&#x27; appear enter-active-class=&#x27;animate__shakeY&#x27;  leave-active-class=&#x27;animate__bounceOutRight&#x27;&gt;</span><br><span class="line">            &lt;Student v-show=&quot;isShow&quot; key=&quot;1&quot;&gt;&lt;/Student&gt;</span><br><span class="line">            &lt;Student v-show=&quot;!isShow&quot; key=&quot;2&quot;&gt;&lt;/Student&gt;</span><br><span class="line">        &lt;/transition-group&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">import &#x27;animate.css&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showComponent() &#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.odinam2-enter-active,.odinam2-leave-active</span><br><span class="line">&#123;</span><br><span class="line">    transition: 1s linear;</span><br><span class="line">&#125;</span><br><span class="line">.odinam2-enter,.odinam2-leave-to</span><br><span class="line">&#123;</span><br><span class="line">    transform: translateX(-100%);</span><br><span class="line">&#125;</span><br><span class="line">.odinam2-enter-to,.odinam2-leave</span><br><span class="line">&#123;</span><br><span class="line">    transform: translateX(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.odinam1-enter-active&#123;</span><br><span class="line">    animation: odinAnimate 1s linear;</span><br><span class="line">&#125;</span><br><span class="line">.odinam1-leave-active&#123;</span><br><span class="line">    animation: odinAnimate 1s linear reverse;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes odinAnimate &#123;</span><br><span class="line">    from&#123;</span><br><span class="line">        transform: translateX(-100%);</span><br><span class="line">    &#125;</span><br><span class="line">    to&#123;</span><br><span class="line">        transform: translateX(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 11 章: 动画效果&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="动画" scheme="https://www.odinsam.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
    <category term="animate" scheme="https://www.odinsam.com/tags/animate/"/>
    
    <category term="过度效果" scheme="https://www.odinsam.com/tags/%E8%BF%87%E5%BA%A6%E6%95%88%E6%9E%9C/"/>
    
    <category term="enter" scheme="https://www.odinsam.com/tags/enter/"/>
    
    <category term="leave" scheme="https://www.odinsam.com/tags/leave/"/>
    
    <category term="enter-to" scheme="https://www.odinsam.com/tags/enter-to/"/>
    
    <category term="leave-to" scheme="https://www.odinsam.com/tags/leave-to/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 10. nextTick与props传递函数</title>
    <link href="https://www.odinsam.com/articles/fc6a.html"/>
    <id>https://www.odinsam.com/articles/fc6a.html</id>
    <published>2022-10-19T14:39:00.000Z</published>
    <updated>2022-10-21T13:06:51.370Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 10 章: nextTick与props传递函数</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="nexttick与props传递函数"><a class="markdownIt-Anchor" href="#nexttick与props传递函数"></a> nextTick与props传递函数</h4><ol><li>this.$nextTick(回调函数) 下一次dom更新结束后执行回调函数</li><li>使用时机： 当改变数据后，要基于更新后的新dom进行某些操作时，使用nextTick利用回调函数执行操作</li><li>父组件可以通过props给子组件传递函数，当子组件执行函数回调时，回传数据达到子组件向父组件传递数据的目的</li></ol><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        nextTick与props传递函数</span><br><span class="line">        1. this.$nextTick(回调函数) 下一次dom更新结束后执行回调函数</span><br><span class="line">        2. 使用时机： 当改变数据后，要基于更新后的新dom进行某些操作时，使用nextTick利用回调函数执行操作</span><br><span class="line">        3. 父组件可以通过props给子组件传递函数，当子组件执行函数回调时，回传数据达到子组件向父组件传递数据的目的</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">        &lt;span v-if=&quot;!isEdit&quot;&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span v-else&gt;&lt;input ref=&quot;txtStuName&quot; type=&quot;text&quot; v-model=&quot;stuName&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;editOrOkClick&quot;&gt;&#123;&#123;btnText[isEdit]&#125;&#125;&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isEdit:false,</span><br><span class="line">            stuName: &#x27;odinsam&#x27;,</span><br><span class="line">            btnText:&#123;true:&#x27;确定&#x27;,false:&#x27;编辑&#x27;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //app组件传递的回调函数</span><br><span class="line">    props:[&#x27;getStuName&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        editOrOkClick() &#123;</span><br><span class="line">            if (this.isEdit)</span><br><span class="line">            &#123;</span><br><span class="line">                //子组件调用父组件通过props传递的回调函数向父组件传递数据</span><br><span class="line">                this.getStuName(&#123;stuName:this.stuName&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            this.isEdit = !this.isEdit;</span><br><span class="line">            // 在本次操作执行完成dom修改后，执行回调函数，使新出现的文本框获得焦点</span><br><span class="line">            this.$nextTick(function () &#123;</span><br><span class="line">                if (this.isEdit) &#123;</span><br><span class="line">                    this.$refs.txtStuName.focus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;span&gt;学生的姓名是:&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;Student :getStuName=&quot;getStuName&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getStuName(param) &#123;</span><br><span class="line">            console.log(param);</span><br><span class="line">            this.stuName = param.stuName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 10 章: nextTick与props传递函数&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="props" scheme="https://www.odinsam.com/tags/props/"/>
    
    <category term="nextTick" scheme="https://www.odinsam.com/tags/nextTick/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 09. 消息订阅与发布</title>
    <link href="https://www.odinsam.com/articles/ac9b.html"/>
    <id>https://www.odinsam.com/articles/ac9b.html</id>
    <published>2022-10-19T13:51:00.000Z</published>
    <updated>2022-10-21T13:06:58.773Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 09 章: 消息订阅与发布</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="消息订阅与发布"><a class="markdownIt-Anchor" href="#消息订阅与发布"></a> 消息订阅与发布</h4><ol><li>yarn add pubsub-js 安装消息订阅与发布框架</li><li>订阅消息 mounted时 this.pubId = pubsub.subscribe(‘消息名称’, (消息名称, 消息传递数据) =&gt; {}); 消息传递数据可以是字符串、数据、数据或对象</li><li>取消订阅消息  beforeDestroy时 pubsub.unsubscribe(this.pubId)</li><li>组件发布消息 pubsub.publish(‘消息名称’,消息传递数据})</li></ol><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        消息订阅与发布</span><br><span class="line">        1. yarn add pubsub-js 安装消息订阅与发布框架</span><br><span class="line">        2. 订阅消息 mounted时 this.pubId = pubsub.subscribe(&#x27;消息名称&#x27;, (消息名称, 消息传递数据) =&gt; &#123;&#125;); 消息传递数据可以是字符串、数据、数据或对象</span><br><span class="line">        3. 取消订阅消息  beforeDestroy时 pubsub.unsubscribe(this.pubId)</span><br><span class="line">        4. 组件发布消息 pubsub.publish(&#x27;消息名称&#x27;,消息传递数据&#125;)</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">    &lt;span&gt;学生的姓名是:&#123;&#123;stuName&#125;&#125;&lt;/span&gt; &lt;br/&gt;</span><br><span class="line">    &lt;Student ref=&quot;stu&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.pubId = pubsub.subscribe(&#x27;subMessage&#x27;, (messasgeName, param) =&gt; &#123;</span><br><span class="line">            console.log(&#x27;messasgeName&#x27;,messasgeName);</span><br><span class="line">            this.stuName = param.stuName</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">        pubsub.unsubscribe(this.pubId)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;publishMessageClick&quot;&gt;发布消息传递数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        publishMessageClick() &#123;</span><br><span class="line">            pubsub.publish(&#x27;subMessage&#x27;,&#123;stuName:this.stuName&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 09 章: 消息订阅与发布&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="消息订阅" scheme="https://www.odinsam.com/tags/%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85/"/>
    
    <category term="消息发布" scheme="https://www.odinsam.com/tags/%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83/"/>
    
    <category term="subscribe" scheme="https://www.odinsam.com/tags/subscribe/"/>
    
    <category term="unsubscribe" scheme="https://www.odinsam.com/tags/unsubscribe/"/>
    
    <category term="publish" scheme="https://www.odinsam.com/tags/publish/"/>
    
    <category term="pubsub-js" scheme="https://www.odinsam.com/tags/pubsub-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 08. 全局事件总线</title>
    <link href="https://www.odinsam.com/articles/10d9.html"/>
    <id>https://www.odinsam.com/articles/10d9.html</id>
    <published>2022-10-19T13:41:00.000Z</published>
    <updated>2022-10-21T13:07:07.640Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 08 章: 全局事件总线</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="vue全局事件总线"><a class="markdownIt-Anchor" href="#vue全局事件总线"></a> vue全局事件总线</h4><ol><li>一种组件间通信的方式，适用于任意组件通信</li><li>在main.js中通过 beforeCreate(){ Vue.prototype.$bus = this; } 安装全局事件总线</li><li>主要利用的原理是 VueComponent.prototype.__proto__ === Vue.prototype vc可以使用在vm的原型上添加的属性、方法来实现.</li><li>通信方式主要依靠自定义事件，在需要通信的双方(app.vue/student.vue)添加自定义事件和处理自定义事件.</li></ol><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    全局事件总线:</span></span><br><span class="line"><span class="comment">    1. 一种组件间通信的方式，适用于任意组件通信</span></span><br><span class="line"><span class="comment">    2. 在main.js中通过 beforeCreate()&#123; Vue.prototype.$bus = this; &#125; 安装全局事件总线</span></span><br><span class="line"><span class="comment">    3. 主要利用的原理是 VueComponent.prototype.__proto__ === Vue.prototype vc可以使用在vm的原型上添加的属性、方法来实现.</span></span><br><span class="line"><span class="comment">    4. 通信方式主要依靠自定义事件，在需要通信的双方(app.vue/student.vue)添加自定义事件和处理自定义事件.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        Vue.prototype.$bus = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        </span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">    &lt;span&gt;学生的姓名是:&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">    &lt;Student ref=&quot;stu&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        //给student添加自定义事件</span><br><span class="line">        this.$bus.$on(&#x27;customEvent&#x27;, (param) =&gt; &#123;</span><br><span class="line">            this.stuName = param.name;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">        this.$bus.off(&#x27;customEvent&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button @click=&quot;busEventClick&quot;&gt;通过全局事件总线触发事件传递数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam-eventBus&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        busEventClick() &#123;</span><br><span class="line">            console.log(&#x27;function busEventClick&#x27;);</span><br><span class="line">            this.$bus.$emit(&#x27;customEvent&#x27;,&#123;name:this.stuName&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 08 章: 全局事件总线&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="eventbus" scheme="https://www.odinsam.com/tags/eventbus/"/>
    
    <category term="全局事件总线" scheme="https://www.odinsam.com/tags/%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 07. vue自定义事件</title>
    <link href="https://www.odinsam.com/articles/e1f2.html"/>
    <id>https://www.odinsam.com/articles/e1f2.html</id>
    <published>2022-10-19T13:14:00.000Z</published>
    <updated>2022-10-21T13:07:14.445Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 07 章: vue自定义事件</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="vue自定义事件"><a class="markdownIt-Anchor" href="#vue自定义事件"></a> vue自定义事件</h4><ol><li><p>可以给组件使用 v-on:自定义事件=“事件处理方法” 或者 @自定义事件=“事件处理方法” 来绑定并处理自定义事件.适用于子组件给父组件传递数据</p></li><li><p>在组件中 使用 this.$emit(‘自定义事件’,参数) 的形式触发自定义事件.参数可以是 字符串、数值、数组或者对象。</p></li><li><p>也可以通过 ref=‘refName’ 在mounted中 使用 $on 的方式绑定并处理自定义事件</p></li><li><p>mounted中使用 this.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>e</mi><mi>f</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">refs.refName.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit">s</span><span class="mord mathrm">.</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit">a</span><span class="mord mathit">m</span><span class="mord mathit">e</span><span class="mord mathrm">.</span></span></span></span>on(‘自定义事件’,function(参数){ })的方式绑定并处理</p></li><li><p>ref结合mounted与$on的写法更灵活，比如延迟触发、axios后再处理事件</p></li><li><p>在绑定的组件可以使用 this.$off() 解绑自定义事件.</p><p>this.$off(‘eventName’)  解绑一个自定义事件</p><p>this.$off([‘eventName1’,‘eventName2’])  解绑多个自定义事件</p><p>this.$off()  解绑所有的自定义事件</p></li><li><p>如果组件被销毁，那么绑定的自定义事件不再有效果。</p></li><li><p>注意: mounted 中 $on的回调函数中,this是当前绑定自定事件的组件对象vc，而不是vue对象vm。 如果需要vm则需要将回调函数写为箭头函数</p></li></ol><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;sendStuName&quot;&gt;自定义事件-回传学生的名字&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;unbind&quot;&gt;解绑自定义事件&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;destoryStu&quot;&gt;销毁组件&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&#x27;title&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendStuName() &#123;</span><br><span class="line">            console.log(&#x27;function sendStuName&#x27;);</span><br><span class="line">            //触发自定义事件 customEvent,传参对象</span><br><span class="line">            this.$emit(&#x27;customEvent&#x27;,&#123;name:this.stuName&#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        unbind() &#123;</span><br><span class="line">            //解绑一个自定义事件</span><br><span class="line">            this.$off(&#x27;customEvent&#x27;)</span><br><span class="line">            //解绑多个自定义事件</span><br><span class="line">            this.$off([&#x27;customEvent&#x27;])</span><br><span class="line">            // 解绑所有的自定义事件</span><br><span class="line">            this.$off()</span><br><span class="line">        &#125;,</span><br><span class="line">        destoryStu() &#123;</span><br><span class="line">            // 销毁当前组件对象</span><br><span class="line">            this.$destroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    unbind: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:300px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        vue自定义事件</span><br><span class="line">        1. 可以给组件使用 v-on:自定义事件=&quot;事件处理方法&quot; 或者 @自定义事件=&quot;事件处理方法&quot; 来绑定并处理自定义事件.适用于子组件给父组件传递数据</span><br><span class="line">        2. 在组件中 使用 this.$emit(&#x27;自定义事件&#x27;,参数) 的形式触发自定义事件.参数可以是 字符串、数值、数组或者对象。</span><br><span class="line">        2. 也可以通过 ref=&#x27;refName&#x27; 在mounted中 使用 $on 的方式绑定并处理自定义事件</span><br><span class="line">        3. mounted中使用 this.$refs.refName.$on(&#x27;自定义事件&#x27;,function(参数)&#123; &#125;)的方式绑定并处理</span><br><span class="line">        4. ref结合mounted与$on的写法更灵活，比如延迟触发、axios后再处理事件</span><br><span class="line">        5. 在绑定的组件可以使用 this.$off() 解绑自定义事件. </span><br><span class="line">            this.$off(&#x27;eventName&#x27;)  解绑一个自定义事件</span><br><span class="line">            this.$off([&#x27;eventName1&#x27;,&#x27;eventName2&#x27;])  解绑多个自定义事件</span><br><span class="line">            this.$off()  解绑所有的自定义事件</span><br><span class="line">        6. 如果组件被销毁，那么绑定的自定义事件不再有效果。</span><br><span class="line">        7. 注意: mounted 中 $on的回调函数中,this是当前绑定自定事件的组件对象vc，而不是vue对象vm。 如果需要vm则需要将回调函数写为箭头函数</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;span&gt;学生组件的姓名是:&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;!--组件student 绑定自定义事件customEvent 事件处理方法getStuName --&gt;</span><br><span class="line">    &lt;Student v-on:customEvent=&quot;getStuName&quot; title=&quot;v-on方式绑定自定义事件&quot;&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;Student @customEvent=&quot;getStuName&quot; title=&quot;@ 方式绑定自定义事件&quot;&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;Student ref=&quot;stu&quot;  title=&quot;ref emit方式绑定自定义事件&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 直接处理自定义事件</span><br><span class="line">        getStuName(param) &#123;</span><br><span class="line">            console.log(&#x27;param&#x27;, param);</span><br><span class="line">            this.stuName = param.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        // 通过 mounted+$refs+$on 的方式处理自定时间。方式更灵活。 例如延迟处理、axios后处理等等.</span><br><span class="line">        // 回调函数的this是绑定自定事件的组件即stu组件，无法获取到当前app组件的stuName，需要改为箭头函数或者使用注释行的代码</span><br><span class="line">        this.$refs.stu.$on(&#x27;customEvent&#x27;,(param)=&gt; &#123;</span><br><span class="line">            console.log(&#x27;this.stu.$on&#x27;, param);</span><br><span class="line">            this.stuName = param.name;</span><br><span class="line">        &#125;)</span><br><span class="line">        // this.$refs.stu.$on(&#x27;customEvent&#x27;,getStuName)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-evenly;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 07 章: vue自定义事件&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="mounted" scheme="https://www.odinsam.com/tags/mounted/"/>
    
    <category term="emit" scheme="https://www.odinsam.com/tags/emit/"/>
    
    <category term="on" scheme="https://www.odinsam.com/tags/on/"/>
    
    <category term="off" scheme="https://www.odinsam.com/tags/off/"/>
    
    <category term="refs" scheme="https://www.odinsam.com/tags/refs/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 06. webStorage浏览器的本地存储</title>
    <link href="https://www.odinsam.com/articles/fef3.html"/>
    <id>https://www.odinsam.com/articles/fef3.html</id>
    <published>2022-10-19T07:53:00.000Z</published>
    <updated>2022-10-21T13:07:22.067Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 06 章: webStorage浏览器的本地存储</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="webstorage浏览器的本地存储"><a class="markdownIt-Anchor" href="#webstorage浏览器的本地存储"></a> webStorage浏览器的本地存储</h4><ol><li>浏览器通过 window.sessionStorage 和 window.localStorage 属性实现本地存储</li><li>相关api<br>xxxStorage.setItem(‘key’,‘value’) 存储数据<br>xxxStorage.getItem(‘key’) 读取数据<br>xxxStorage.removeItem(‘key’) 删除某个数据<br>xxxStorage.clear()  清空所有数据</li><li>sessionStorage 存储的内容会随着浏览器的关闭而消失.</li><li>localStorage 存储的内容需要手动调用api清除</li><li>xxxStorage.getItem(‘key’) 如果key不存在，则返回null</li><li>JSON.parse(null) 返回的依然是null</li></ol><figure class="highlight plaintext"><figcaption><span>Student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model.lazy=&quot;addStuName&quot; @keyup.enter=&quot;addStu&quot;&gt;&lt;br/&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;stu in stus&quot; :key=&quot;stu.id&quot;&gt;&#123;&#123;stu.stuName&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;button @click=&quot;changeStuName&quot;&gt;修改第一个学生的姓名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            addStuName: &#x27;&#x27;,</span><br><span class="line">            //从localStorage中获取数据 如果为null则返回空数组。确保用户打开浏览器时显示的是上次保存在localStorage中的数据</span><br><span class="line">            stus: JSON.parse(localStorage.getItem(&#x27;stu&#x27;)) || []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addStu() &#123;</span><br><span class="line">            const newStu = &#123; id: this.stus.length, stuName: this.addStuName &#125;;</span><br><span class="line">            this.stus.push(newStu);</span><br><span class="line">            this.addStuName=&#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        //修改第一个学生的姓名，此时需要开启深度监视，否则无法watch无法监视到stu内部的元素属性的修改，就无法触发监视事件（修改localStorage中的数据）</span><br><span class="line">        changeStuName() &#123;</span><br><span class="line">            this.stus[0].stuName = this.stus[0].stuName+&#x27;change&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        stus: &#123;</span><br><span class="line">            //放弃watch的简写方式开启深度监视，确保当修改了stu数组内部元素的属性后依旧可以监视到数据改变并存储到localStorage中</span><br><span class="line">            deep: true,</span><br><span class="line">            handler(value) &#123;</span><br><span class="line">                localStorage.setItem(&#x27;stu&#x27;,JSON.stringify(value))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 06 章: webStorage浏览器的本地存储&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="localStorage" scheme="https://www.odinsam.com/tags/localStorage/"/>
    
    <category term="sessionStorage" scheme="https://www.odinsam.com/tags/sessionStorage/"/>
    
    <category term="本地存储" scheme="https://www.odinsam.com/tags/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
    <category term="webStorage" scheme="https://www.odinsam.com/tags/webStorage/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0进阶 - 05. vue的style</title>
    <link href="https://www.odinsam.com/articles/4576.html"/>
    <id>https://www.odinsam.com/articles/4576.html</id>
    <published>2022-10-18T12:43:00.000Z</published>
    <updated>2022-10-21T13:07:29.529Z</updated>
    
    <content type="html"><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 05 章: vue的style</p><span id="more"></span><p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p><h4 id="vue的style"><a class="markdownIt-Anchor" href="#vue的style"></a> vue的style</h4><ol><li>多个组件的style可能会出现class重名的情况，当class重名，后引入的组件样式会覆盖之前的同名样式</li><li>可以在组件的 style 标签中添加 scoped属性，让当前style仅作用于当前组件(app的style不加scoped)</li><li>style 标签还有lang属性，默认是css。若要修改less，需注意:需要添加 less-loader.</li><li>npm view webpack version 可以查看对应版本</li><li>vue2 webpack使用的4.46 less-load 8以后得版本是为了迎合webpack5 所以需要安装less-loader 7版本</li><li>安装 npm i less-loader@7</li></ol><figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;span class=&quot;namecls&quot;&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span class=&quot;lessname&quot;&gt;less 样式&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:400px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">    .lessname</span><br><span class="line">    &#123;</span><br><span class="line">        font-size:30px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.namecls</span><br><span class="line">    &#123;</span><br><span class="line">        color:blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>school.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;schooldv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;School组件&lt;/h2&gt;</span><br><span class="line">        &lt;span class=&quot;namecls&quot;&gt;姓名：&#123;&#123;schoolName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            schoolName:&#x27;vue学校&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;css&quot;&gt;</span><br><span class="line">.schooldv&#123;</span><br><span class="line">    background-color:cadetblue;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">.namecls</span><br><span class="line">&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;e255.html&quot;&gt;【Vue2.0】进阶学习系列&lt;/a&gt; Vue2.0进阶第 05 章: vue的style&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue2" scheme="https://www.odinsam.com/categories/%E5%89%8D%E7%AB%AF/vue2/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="style" scheme="https://www.odinsam.com/tags/style/"/>
    
    <category term="less" scheme="https://www.odinsam.com/tags/less/"/>
    
    <category term="scoped" scheme="https://www.odinsam.com/tags/scoped/"/>
    
  </entry>
  
</feed>
