<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OdinSam&#39;s blogs-一个热爱编程性格开朗的Coder</title>
  
  
  <link href="https://www.odinsam.com/atom.xml" rel="self"/>
  
  <link href="https://www.odinsam.com/"/>
  <updated>2022-10-15T15:42:31.328Z</updated>
  <id>https://www.odinsam.com/</id>
  
  <author>
    <name>OdinSam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue2.0 - 12. 样式的绑定</title>
    <link href="https://www.odinsam.com/articles/5a60.html"/>
    <id>https://www.odinsam.com/articles/5a60.html</id>
    <published>2022-10-15T15:39:00.000Z</published>
    <updated>2022-10-15T15:42:31.328Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第12章: 样式的绑定</p><span id="more"></span><ol><li>:class=’’ 可以绑定对应的class样式  可以是 字符串、数组、对象</li><li>:style=’’ 可以绑定对应的style样式  可以是 直接绑定或者是数组、对象</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>12.样式绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.dvbasic</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.dv1</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.dv2</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: coral;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.dv3</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">222</span>, <span class="number">216</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.ddvv1</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">33</span>, <span class="number">32</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.ddvv2</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">241</span>, <span class="number">227</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.ddvv3</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. :class=&#x27;&#x27; 可以绑定对应的class样式  可以是 字符串、数组、对象</span></span><br><span class="line"><span class="comment">            2. :style=&#x27;&#x27; 可以绑定对应的style样式  可以是 直接绑定或者是数组、对象</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;dvClass&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dv1Click&quot;</span>&gt;</span></span><br><span class="line">                div1 - click :class 绑定class样式</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;dv2Class&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dv2Click&quot;</span>&gt;</span></span><br><span class="line">                div2 - click :class 绑定class样式 数组形式绑定</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;dv3Class&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dv3Click&quot;</span>&gt;</span></span><br><span class="line">                div3 - click :class 绑定class样式 对象形式绑定</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: fsize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                div4 - :style=&quot;&#123;fontSize: fsize+&#x27;px&#x27;&#125;&quot; 绑定style样式</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span></span><br><span class="line">                div4 - :style=&quot;styleObject&quot; 绑定style样式</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span></span><br><span class="line">                div5 - :style=&quot;styleArr&quot; 绑定style样式</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">styleArr</span>: [</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    ],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">styleObject</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">fontSize</span>: <span class="string">&#x27;20px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">backgroundColor</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">fsize</span>: <span class="number">40</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dvClass</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dv2Class</span>: [],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dv3Class</span>: &#123; <span class="attr">ddvv1</span>: <span class="literal">false</span>, <span class="attr">ddvv2</span>: <span class="literal">false</span>, <span class="attr">ddvv3</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dv1ArrClass</span>: [<span class="string">&#x27;dv1&#x27;</span>, <span class="string">&#x27;dv2&#x27;</span>, <span class="string">&#x27;dv3&#x27;</span>]</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dv1Click</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dvClass = <span class="built_in">this</span>.dv1ArrClass[index];</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dv2Click</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.dv2Class.length === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.push(<span class="string">&#x27;ddvv1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.push(<span class="string">&#x27;ddvv2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.push(<span class="string">&#x27;ddvv3&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.shift();</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.shift();</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.shift();</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dv3Click</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dv3Class.ddvv1 = !<span class="built_in">this</span>.dv3Class.ddvv1;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dv3Class.ddvv2 = !<span class="built_in">this</span>.dv3Class.ddvv2;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dv3Class.ddvv3 = !<span class="built_in">this</span>.dv3Class.ddvv3;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第12章: 样式的绑定&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 11. 监视属性</title>
    <link href="https://www.odinsam.com/articles/88f9.html"/>
    <id>https://www.odinsam.com/articles/88f9.html</id>
    <published>2022-10-15T14:11:00.000Z</published>
    <updated>2022-10-15T15:42:42.336Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第11章: 监视属性</p><span id="more"></span><ol><li>当监视的属性发生变化时，回调函数 handler 会自动调用进行相关操作</li><li>监视的属性必须存在，才可以监视</li><li>监视属性两种写法<ol><li>在new vue时配置watch</li><li>在new vue创建完成后，通过 vm.$watch(‘监视的属性’,{ //监视的配置内容 })</li></ol></li><li>监视多级结构中某个属性的变化 对象.属性 监视</li><li>watch 默认不检测对象内部值的改变,可以通过 deep:true 进行深度监视</li><li>监视属性不光可以监视data中的属性、对象也可以监视计算属性</li><li>监视属性可以简写，但代价是不能再配置 immediate、deep</li></ol><figure class="highlight js"><figcaption><span>监视属性简写</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line"><span class="function"><span class="title">personState</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line"><span class="comment">//回调处理函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vm.$watch(<span class="string">&#x27;personState&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line"><span class="comment">//回调处理函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="8"><li>computed 计算属性能完成的watch都可以完成。watch可以完成的computed不一定能完成。例如：watch可以进行异步操作</li><li>所有被vue管理的函数最好写成普通函数，这样this指向才vm或者组件对象实例</li><li>所有不被vue管理的函数（定时器，ajax回调等）最好写成箭头函数，这样this指向才vm或者组件对象实例</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>11.监视属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue 监视属性<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>人生真的是&#123;&#123;personState&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>修改人生的状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>对象内容x &#123;&#123;obj.x&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnXClick&quot;</span>&gt;</span>btn add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>对象内容y &#123;&#123;obj.y&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnYClick&quot;</span>&gt;</span>btn add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">state</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">obj</span>: &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.state = !<span class="built_in">this</span>.state;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnXClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.obj.x ++;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnYClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.obj.y++;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">personState</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.state ? <span class="string">&#x27;大起&#x27;</span> : <span class="string">&#x27;大落&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            1. 当监视的属性发生变化时，回调函数 handler 会自动调用进行相关操作</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            2. 监视的属性必须存在，才可以监视</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            3. 监视属性两种写法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 在new vue时配置watch</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 在new vue创建完成后，通过 vm.$watch(&#x27;监视的属性&#x27;,&#123; //监视的配置内容 &#125;) </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            4. 监视多级结构中某个属性的变化 对象.属性 监视</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            5. watch 默认不检测对象内部值的改变,可以通过 deep:true 进行深度监视</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            6. 监视属性不光可以监视data中的属性、对象也可以监视计算属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            7. 监视属性可以简写，但代价是不能再配置 immediate、deep</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                watch:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    personState(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        //回调处理函数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                vm.$watch(&#x27;personState&#x27;,function(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    //回调处理函数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            8. computed 计算属性能完成的watch都可以完成。watch可以完成的computed不一定能完成。例如：watch可以进行异步操作</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            备注：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            所有被vue管理的函数最好写成普通函数，这样this指向才vm或者组件对象实例</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            所有不被vue管理的函数（定时器，ajax回调等）最好写成箭头函数，这样this指向才vm或者组件对象实例</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            */</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">personState</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`watch: 计算属性 personState 被修改了，原始值是:<span class="subst">$&#123;oldValue&#125;</span> 新值为:<span class="subst">$&#123;newValue&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">state</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//初始化时让 handler 调用一次</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`watch: state 被修改了，原始值是:<span class="subst">$&#123;oldValue&#125;</span> 新值为:<span class="subst">$&#123;newValue&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;obj.x&#x27;</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//初始化时让 handler 调用一次</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`watch: obj.x 被修改了，原始值是:<span class="subst">$&#123;oldValue&#125;</span> 新值为:<span class="subst">$&#123;newValue&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// watch 默认不检测对象内部值的改变,可以通过 deep:true 进行深度监视</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;obj&#x27;</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">deep</span>:<span class="literal">true</span>,  <span class="comment">//进行深度监视</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// immediate: true, //初始化时让 handler 调用一次</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">`watch: obj 被修改了 obj.x:<span class="subst">$&#123;newValue.x&#125;</span>    obj.x:<span class="subst">$&#123;newValue.y&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//监视属性的简写 </span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">personState</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`watch: 计算属性 personState 被修改了，原始值是:<span class="subst">$&#123;oldValue&#125;</span> 新值为:<span class="subst">$&#123;newValue&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//监视属性的第二种写法 首先保证vm创建完毕</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// vm.$watch(&#x27;state&#x27;, &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     immediate: true, //初始化时让 handler 调用一次</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         console.log(</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//             `state 被修改了，原始值是:$&#123;oldValue&#125; 新值为:$&#123;newValue&#125;`</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         );</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第11章: 监视属性&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 10. 计算属性</title>
    <link href="https://www.odinsam.com/articles/3442.html"/>
    <id>https://www.odinsam.com/articles/3442.html</id>
    <published>2022-10-15T13:52:00.000Z</published>
    <updated>2022-10-15T15:42:53.831Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第10章: 计算属性</p><span id="more"></span><ol><li>get 当模板读取fullname时，get会被调用，且返回值作为fullname的值</li><li>get 的调用时机：  1. 初次读取fullname时  2.所有依赖的数据发生变化时 firstName  lastName</li><li>相对于method实现，如果模板多个位置需要显示fullname时 method的方法会调用多次 而计算属性的get只调用一次</li><li>计算属性最终会出现在vm上可以直接使用，例如使用button直接修改fullname</li><li>如果修改计算属性，必须有set方法</li><li>如果计算属性只有get没有set则可以简写</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>10.计算属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue 计算属性<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>firstname&lt;/span</span><br><span class="line">            &gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>lastname&lt;/span</span><br><span class="line">            &gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名:&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>直接修改计算属性fullname<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">firstName</span>: <span class="string">&#x27;odin&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">lastName</span>: <span class="string">&#x27;sam&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.fullname = <span class="string">&#x27;suiji-shu&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. get 当模板读取fullname时，get会被调用，且返回值作为fullname的值</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. get 的调用时机：  1. 初次读取fullname时  2.所有依赖的数据发生变化时 firstName  lastName</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                3. 相对于method实现，如果模板多个位置需要显示fullname时 method的方法会调用多次 而计算属性的get只调用一次</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                4. 计算属性最终会出现在vm上可以直接使用，例如使用button直接修改fullname</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                5. 如果修改计算属性，必须有set方法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                */</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">fullname</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName;</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> arr = value.split(<span class="string">&#x27;-&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.firstName = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.lastName = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 6. 如果计算属性只有get没有set则可以简写</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// fullname()&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     return this.firstName + &#x27;-&#x27; + this.lastName;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第10章: 计算属性&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 09. 键盘事件</title>
    <link href="https://www.odinsam.com/articles/42b7.html"/>
    <id>https://www.odinsam.com/articles/42b7.html</id>
    <published>2022-10-15T13:22:00.000Z</published>
    <updated>2022-10-15T15:42:57.828Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第9章: 键盘事件</p><span id="more"></span><ol><li>vue 中常用的按键别名<br>回车    enter<br>删除    delete<br>退格    backSpace<br>退出    esc<br>空格    space<br>换行    tab<br>上      up<br>下      down<br>左      left<br>右      right</li><li>vue未提供别名的按键可以使用按键的原始的key去绑定，但要注意转换为  kebab-case 例如 CapsLock caps-lock</li><li>可以使用 @keyup.按键别名 绑定对应的按键事件</li><li>tab无法使用keyup绑定 需要使用keydown绑定</li><li>系统修饰按键  ctrl   alt     shift   meta<ol><li>如果配合keyup使用：按下系统修饰键，再按下其他键，随后释放其他键，事件才会触发</li><li>如果配合keydown使用 正常触发</li></ol></li><li>也可以使用keyCode去绑定，但不推荐  @keyup.keyCode 有可能不同系统不同键盘的keycode不一样导致一些问题</li><li>Vue.config.keyCodes 可以自定义键名   Vue.config.keyCodes.自定义名 = 键码<br>Vue.config.keyCodes.huiche = 13  指定huiche 为按键13 即enter</li><li>按键别名可以组合使用 例如  @keyup.ctrl.y 即ctrl+y 触发事件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>09.键盘事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. vue 中常用的按键别名</span></span><br><span class="line"><span class="comment">                回车    enter</span></span><br><span class="line"><span class="comment">                删除    delete </span></span><br><span class="line"><span class="comment">                退格    backSpace</span></span><br><span class="line"><span class="comment">                退出    esc</span></span><br><span class="line"><span class="comment">                空格    space</span></span><br><span class="line"><span class="comment">                换行    tab</span></span><br><span class="line"><span class="comment">                上      up</span></span><br><span class="line"><span class="comment">                下      down</span></span><br><span class="line"><span class="comment">                左      left</span></span><br><span class="line"><span class="comment">                右      right</span></span><br><span class="line"><span class="comment">            2. vue未提供别名的按键可以使用按键的原始的key去绑定，但要注意转换为  kebab-case 例如 CapsLock caps-lock</span></span><br><span class="line"><span class="comment">            3. 可以使用 @keyup.按键别名 绑定对应的按键事件</span></span><br><span class="line"><span class="comment">            4. tab无法使用keyup绑定 需要使用keydown绑定</span></span><br><span class="line"><span class="comment">            5. 系统修饰按键  ctrl   alt     shift   meta</span></span><br><span class="line"><span class="comment">                1. 如果配合keyup使用：按下系统修饰键，再按下其他键，随后释放其他键，事件才会触发</span></span><br><span class="line"><span class="comment">                2. 如果配合keydown使用 正常触发</span></span><br><span class="line"><span class="comment">            6. 也可以使用keyCode去绑定，但不推荐  @keyup.keyCode 有可能不同系统不同键盘的keycode不一样导致一些问题</span></span><br><span class="line"><span class="comment">            7. Vue.config.keyCodes 可以自定义键名   Vue.config.keyCodes.自定义名 = 键码</span></span><br><span class="line"><span class="comment">                    Vue.config.keyCodes.huiche = 13  指定huiche 为按键13 即enter</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue 键盘事件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lbl&quot;</span>&gt;</span>按键按下的是 &#123;&#123;inputKey&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup</span>=<span class="string">&quot;showinfo&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">userName</span>: <span class="string">&#x27;odinsam&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">inputKey</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">showinfo</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.inputKey = <span class="string">`e.key:<span class="subst">$&#123;e.key&#125;</span>      e.keyCode=<span class="subst">$&#123;e.keyCode&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第9章: 键盘事件&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 08. 事件修饰符</title>
    <link href="https://www.odinsam.com/articles/48de.html"/>
    <id>https://www.odinsam.com/articles/48de.html</id>
    <published>2022-10-15T06:46:00.000Z</published>
    <updated>2022-10-15T15:43:02.505Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第8章: 事件修饰符</p><span id="more"></span><ol><li>prevent 阻止默认事件</li><li>stop 阻止事件冒泡</li><li>once 事件只触发一次</li><li>capture 事件捕获模式 和 冒泡模式刚好相反</li><li>self 是有event.target 是当前操作的元素时才触发</li><li>passive 事件的默认行为立即执行，无需等待回调完毕 移动端常用</li><li>修饰符可以连续写，例如 @click.stop.prevent</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>08. 事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.parentdv</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.childdv</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. prevent 阻止默认事件</span></span><br><span class="line"><span class="comment">            2. stop 阻止事件冒泡</span></span><br><span class="line"><span class="comment">            3. once 事件只触发一次</span></span><br><span class="line"><span class="comment">            4. capture 事件捕获模式 和 冒泡模式刚好相反</span></span><br><span class="line"><span class="comment">            5. self 是有event.target 是当前操作的元素时才触发</span></span><br><span class="line"><span class="comment">            6. passive 事件的默认行为立即执行，无需等待回调完毕</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue  事件修饰符<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--阻止默认事件    @click.prevent--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://odinsam.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickShow&quot;</span>&gt;</span></span><br><span class="line">                点击弹窗，阻止默认事件 - @click.prevent &lt;/a</span><br><span class="line">            &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--阻止事件冒泡    @click.stop--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parentdv&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;parentClick&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>事件捕获模式 - @click.capture<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;childdv&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;childClick&quot;</span>&gt;</span></span><br><span class="line">                    阻止事件冒泡 - @click.stop</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事件只触发一次    @click.once--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;btnOnceClick&quot;</span>&gt;</span></span><br><span class="line">                事件只触发一次 - @click.once&lt;/button</span><br><span class="line">            &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当event.target==self才触发事件    @click.self--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parentdv&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;dvselfClick&quot;</span>&gt;</span></span><br><span class="line">                @click.self=&quot;dvselfClick&quot;</span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;childBtnClick&quot;</span>&gt;</span></span><br><span class="line">                    按钮点击会冒泡，但div的click有self修饰符，所以不触发div的click事件</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事件的默认行为立即执行，无需等待回调完毕    @click.passive--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>显示姓名&#123;&#123;showName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.passive</span>=<span class="string">&quot;btnClickPassive&quot;</span>&gt;</span>@click.passive<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">userName</span>: <span class="string">&#x27;odinsam&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">showName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">clickShow</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;function clickShow&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">parentClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;parent click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">childClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;child click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnOnceClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;click once&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dvselfClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;div self click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">childBtnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;child Btn Click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnClickPassive</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;#&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.showName = <span class="built_in">this</span>.userName;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第8章: 事件修饰符&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 07. 事件处理</title>
    <link href="https://www.odinsam.com/articles/ec6.html"/>
    <id>https://www.odinsam.com/articles/ec6.html</id>
    <published>2022-10-15T06:43:00.000Z</published>
    <updated>2022-10-15T15:43:06.698Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第7章: 事件处理</p><span id="more"></span><ol><li>事件绑定 使用 v-on: 绑定事件</li><li>click事件可以简写为 @click</li><li>无参数的事件处理方法 会有一个默认参数 event 代表 eventObject</li><li>带参数的时间处理方法 也可以带 eventObject 使用 $event传递</li><li>事件处理函数需要配置在methods中，最终会体现在vm上</li><li>事件处理函数都是被vue管理的函数，this指向vm或者组件对象实例。不可以使用箭头函数，否则this指向window</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>07.事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                1. 事件绑定 使用 v-on: 绑定事件</span></span><br><span class="line"><span class="comment">                2. click事件可以简写为 @click</span></span><br><span class="line"><span class="comment">                3. 无参数的事件处理方法 会有一个默认参数 event 代表 eventObject</span></span><br><span class="line"><span class="comment">                4. 带参数的时间处理方法 也可以带 eventObject 使用 $event传递</span></span><br><span class="line"><span class="comment">                5. 事件处理函数需要配置在methods中，最终会体现在vm上</span></span><br><span class="line"><span class="comment">                6. 事件处理函数都是被vue管理的函数，this指向vm或者组件对象实例。不可以使用箭头函数，否则this指向window</span></span><br><span class="line"><span class="comment">                7. </span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue 事件处理<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfoWithParams(userName,$event)&quot;</span>&gt;</span></span><br><span class="line">                提示信息2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">userName</span>: <span class="string">&#x27;odinsam&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">showInfo</span>(<span class="params">event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;无参处理函数 showInfo&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">showInfoWithParams</span>(<span class="params">un, event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;带参处理函数 showInfoWithParams&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">`input userName: <span class="subst">$&#123;un&#125;</span>, event对象:<span class="subst">$&#123;event&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第7章: 事件处理&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 06. 数据代理-Object.defineProperty</title>
    <link href="https://www.odinsam.com/articles/7c3d.html"/>
    <id>https://www.odinsam.com/articles/7c3d.html</id>
    <published>2022-10-14T18:12:00.000Z</published>
    <updated>2022-10-15T15:43:10.475Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第6章: 数据代理-Object.defineProperty</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user=&#123;<span class="attr">name</span>:<span class="string">&#x27;odinsam&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(user,<span class="string">&#x27;age&#x27;</span>,&#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="attr">writable</span>:<span class="literal">true</span>,<span class="attr">configurable</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line"><span class="comment">// user的key-value    key:name    value:odinsam</span></span><br><span class="line"><span class="comment">// user的key-value    key:sex    value:男</span></span><br><span class="line"><span class="comment">//user的key-value    key:age    value:20</span></span><br><span class="line"></span><br><span class="line">user.age=<span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">user.age</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="keyword">delete</span> user.age</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line">user的key-value    key:name    value:odinsam</span><br><span class="line">user的key-value    key:sex    value:男</span><br></pre></td></tr></table></figure><h3 id="objectdefineproperty的-get-set-用法"><a class="markdownIt-Anchor" href="#objectdefineproperty的-get-set-用法"></a> Object.defineProperty的 get set 用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> user=&#123;<span class="attr">name</span>:<span class="string">&#x27;odinsam&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(user,<span class="string">&#x27;age&#x27;</span>,&#123; <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> number &#125; <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123; number=value &#125; &#125;)</span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line"><span class="comment">// user的key-value    key:name    value:odinsam</span></span><br><span class="line"><span class="comment">// user的key-value    key:sex    value:男</span></span><br><span class="line"><span class="comment">//user的key-value    key:age    value:20</span></span><br><span class="line"></span><br><span class="line">user.age=<span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">user.age</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="keyword">delete</span> user.age</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line">user的key-value    key:name    value:odinsam</span><br><span class="line">user的key-value    key:sex    value:男</span><br></pre></td></tr></table></figure><h3 id="原始的数据代理-obj2通过数据代理获取obj1的x属性"><a class="markdownIt-Anchor" href="#原始的数据代理-obj2通过数据代理获取obj1的x属性"></a> 原始的数据代理 obj2通过数据代理获取obj1的x属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原始的数据代理</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">y</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj1.x;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        obj1.x = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="vue中的数据代理"><a class="markdownIt-Anchor" href="#vue中的数据代理"></a> vue中的数据代理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>06.数据代理-Object.defineProperty<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        vue中的数据代理</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        1. 通过vm对象来代理data对象中属性的操作 getter setter</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        2. 更加方便的操作data中的数据</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        3. 通过Object.defineProperty()把data对象中所有的属性添加到vm上</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        4. 为每一个添加到wm上的属性都指定 getter、setter方法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        5. 在getter、setter内部操作data中对应的属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        6. vm._data中的属性不是数据代理而是数据劫持，通过数据劫持监听数据改变从而render页面</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第6章: 数据代理-Object.defineProperty&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="原型链" scheme="https://www.odinsam.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 05. mvvm模型</title>
    <link href="https://www.odinsam.com/articles/a38e.html"/>
    <id>https://www.odinsam.com/articles/a38e.html</id>
    <published>2022-10-14T17:52:00.000Z</published>
    <updated>2022-10-15T15:43:15.288Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第5章: mvvm模型</p><span id="more"></span><img src="/images/05.mvvm.png" style="width:700px;height:300px"><figure class="highlight plaintext"><figcaption><span>MVVM 解释</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M - 模型 即 data 中的数据</span><br><span class="line">V - 视图 即 模板 </span><br><span class="line">VM - viewModel 即 vue的实例对象</span><br></pre></td></tr></table></figure><h4 id="data-bindings-数据以对象的形式存储在data中通过databindings将数据绑定在-view-页面中"><a class="markdownIt-Anchor" href="#data-bindings-数据以对象的形式存储在data中通过databindings将数据绑定在-view-页面中"></a> data bindings 数据以对象的形式存储在data中，通过databindings将数据绑定在 view 页面中</h4><h4 id="view页面改变通过-dom-listeners-修改-data中的数据"><a class="markdownIt-Anchor" href="#view页面改变通过-dom-listeners-修改-data中的数据"></a> view页面改变，通过 dom listeners 修改 data中的数据</h4><h4 id="data中所有的属性最后都出现在vm立"><a class="markdownIt-Anchor" href="#data中所有的属性最后都出现在vm立"></a> data中所有的属性，最后都出现在vm立</h4><h4 id="vm所有的属性即vue原型的属性在vue模板中都可以直接使用"><a class="markdownIt-Anchor" href="#vm所有的属性即vue原型的属性在vue模板中都可以直接使用"></a> vm所有的属性即vue原型的属性，在vue模板中都可以直接使用</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第5章: mvvm模型&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 04. el与data的两种写法</title>
    <link href="https://www.odinsam.com/articles/3899.html"/>
    <id>https://www.odinsam.com/articles/3899.html</id>
    <published>2022-10-14T17:26:00.000Z</published>
    <updated>2022-10-15T15:46:25.424Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第4章: el 与 data的两种写法</p><span id="more"></span><p>el 与 data 有两种写法<br>el 的两种写法:</p><pre><code>1. 在new vue(&#123; el:'#root' &#125;) 时同时指定el的容器 2. 在创建vue后 通过实例对象指定el的值  vm.$mount('#root')</code></pre><p>data 的两种写法</p><pre><code>1. 通过对象的形式 data:&#123; title:'hello vue' &#125;2. 使用函数的形式 data() &#123; return &#123; title:'hello vue'  &#125; &#125;</code></pre><p>后期使用函数式组件时，data必须使用函数形式</p><h3 id="font-colorred重点注意font"><a class="markdownIt-Anchor" href="#font-colorred重点注意font"></a> <font color="red">重点注意</font>:</h3><h4 id="font-colorred由vue管理的函数例如-data-的函数式写法一定不能写箭头函数否则this指向的实例就会是window对象font"><a class="markdownIt-Anchor" href="#font-colorred由vue管理的函数例如-data-的函数式写法一定不能写箭头函数否则this指向的实例就会是window对象font"></a> <font color="red">由vue管理的函数(例如 data 的函数式写法)，一定不能写箭头函数，否则this指向的实例就会是window对象</font></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>04.el与data的两种写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>通过vue的实例对象挂载数据:&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            el 与 data 有两种写法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            el 的两种写法:</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 在new vue(&#123; el:&#x27;#root&#x27; &#125;) 时同时指定el的容器 </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 在创建vue后 通过实例对象指定el的值  vm.$mount(&#x27;#root&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            data 的两种写法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 通过对象的形式 data:&#123; title:&#x27;hello vue&#x27; &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 使用函数的形式 data() &#123; return &#123; title:&#x27;hello vue&#x27;  &#125; &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            后期使用函数式组件时，data必须使用函数形式</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            重点注意: 由vue管理的函数(例如 data 的函数式写法)，一定不能写箭头函数，否则this指向的实例就会是window对象</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 写法1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// el: &#x27;#root&#x27;,    // 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用data对象形式</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data: &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     title: &#x27;hello vue&#x27;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     url: &#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用函数式</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">title</span>: <span class="string">&#x27;hello vue !!&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 写法2</span></span></span><br><span class="line"><span class="javascript">        vm.$mount(<span class="string">&#x27;#root&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第4章: el 与 data的两种写法&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 03. 数据绑定</title>
    <link href="https://www.odinsam.com/articles/f50b.html"/>
    <id>https://www.odinsam.com/articles/f50b.html</id>
    <published>2022-10-14T16:43:00.000Z</published>
    <updated>2022-10-15T15:45:19.471Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第3章: vue 的数据绑定</p><span id="more"></span><p>vue有单向数据绑定和双向数据绑定两种</p><ol><li>单向绑定 v-bind 数据只能从data流向页面</li><li>双向绑定 v-model 数据不仅可以从data流向页面，当页面发生改变同样可以修改data的内容</li><li>双向绑定一般都应用在表单元素 如 input select 等</li><li>v-model:value 可以简写为 v-model 因为 v-model默认收集的就是valuede值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>03.数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            vue有单向数据绑定和双向数据绑定两种</span></span><br><span class="line"><span class="comment">            1. 单向绑定 v-bind 数据只能从data流向页面</span></span><br><span class="line"><span class="comment">            2. 双向绑定 v-model 数据不仅可以从data流向页面，当页面发生改变同样可以修改data的内容</span></span><br><span class="line"><span class="comment">            3. 双向绑定一般都应用在表单元素 如 input select 等</span></span><br><span class="line"><span class="comment">            4. v-model:value 可以简写为 v-model 因为 v-model默认收集的就是valuede值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>单向数据绑定 : v-bind 的简写<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>双向数据绑定 v-model<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                如下代码是错误的： [Vue warn]: Failed to resolve directive: modle</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-modle:value</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果如图"><a class="markdownIt-Anchor" href="#效果如图"></a> 效果如图</h4><img src="/images/03.databind.gif" style="width:900px;height:700px">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第3章: vue 的数据绑定&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
    <category term="数据绑定" scheme="https://www.odinsam.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 02. 模板语法</title>
    <link href="https://www.odinsam.com/articles/1660.html"/>
    <id>https://www.odinsam.com/articles/1660.html</id>
    <published>2022-10-14T16:26:00.000Z</published>
    <updated>2022-10-15T15:44:28.691Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第2章: vue 的模板语法.</p><span id="more"></span><p>模板语法有插值语法和指令语法<br>指令语法常用语解析标签 包括标签属性、标签内容、标签事件<br>v-bind绑定</p><ol><li>将 “”中的内容即 url 当做js表达式， url在data中找到对应的链接，所以绑定在a标签的href属性上</li><li>v-bind 可以简写为 :</li><li>v-bind 仅可以绑定数据，单向数据绑定（从data中获取数据绑定到页面中），页面中的数据发生变化，无法修改data中的内容</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>02.模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模板语法有插值语法和指令语法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插值语法一般用于显示标签的内容 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法: &#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                指令语法常用语解析标签 包括标签属性、标签内容、标签事件</span></span><br><span class="line"><span class="comment">                v-bind绑定</span></span><br><span class="line"><span class="comment">                1. 将 “”中的内容即 url 当做js表达式， url在data中找到对应的链接，所以绑定在a标签的href属性上</span></span><br><span class="line"><span class="comment">                2. v-bind 可以简写为 : </span></span><br><span class="line"><span class="comment">                3. v-bind 仅可以绑定数据，单向数据绑定（从data中获取数据绑定到页面中），页面中的数据发生变化，无法修改data中的内容</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>odinsam 的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;Date.now()&quot;</span>&gt;</span>当前时间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第2章: vue 的模板语法.&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 - 01. hello vue</title>
    <link href="https://www.odinsam.com/articles/deab.html"/>
    <id>https://www.odinsam.com/articles/deab.html</id>
    <published>2022-10-14T16:18:00.000Z</published>
    <updated>2022-10-15T15:44:05.568Z</updated>
    
    <content type="html"><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第1章: 初始 vue.</p><span id="more"></span><ol><li>需要创建vue实例，且传入一个配置对象</li><li>root容器中的代码需要符合html规范，只是加入了vue语法</li><li>root容器立的代码被称为 vue 模板</li><li>插值语法  中的内容需要是 js 表达式，且内容可以直接读取到配置的data中所有的属性</li><li>vue实例和容器需要时一一对应</li><li>一旦 data 中的数据发生变化，页面会自动更新</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>01.hello案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1.  需要创建vue实例，且传入一个配置对象 </span></span><br><span class="line"><span class="comment">            2.  root容器中的代码需要符合html规范，只是加入了vue语法</span></span><br><span class="line"><span class="comment">            3.  root容器立的代码被称为 vue 模板</span></span><br><span class="line"><span class="comment">            4.  插值语法 &#123;&#123; $1 &#125;&#125; 中的内容需要是 js 表达式，且内容可以直接读取到配置的data中所有的属性</span></span><br><span class="line"><span class="comment">            5.  vue实例和容器需要时一一对应</span></span><br><span class="line"><span class="comment">            6.  一旦 data 中的数据发生变化，页面会自动更新</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当前语法为 vue 的插值语法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建vue实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//指定当前vue实例为那个容器服务， css选择器选择对应容器</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义对应的数据，可以在对应的容器 el 中使用</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;da3d.html&quot;&gt;【Vue2.0】学习系列&lt;/a&gt; 第1章: 初始 vue.&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 系列</title>
    <link href="https://www.odinsam.com/articles/da3d.html"/>
    <id>https://www.odinsam.com/articles/da3d.html</id>
    <published>2022-10-14T16:16:00.000Z</published>
    <updated>2022-10-15T15:41:45.627Z</updated>
    
    <content type="html"><![CDATA[<p>vue 学习系列的目录.</p><span id="more"></span><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><h4 id="01-hello-vue"><a class="markdownIt-Anchor" href="#01-hello-vue"></a> <a href="deab.html">[01] hello vue</a></h4><h4 id="02-模板语法"><a class="markdownIt-Anchor" href="#02-模板语法"></a> <a href="1660.html">[02] 模板语法</a></h4><h4 id="03-数据绑定"><a class="markdownIt-Anchor" href="#03-数据绑定"></a> <a href="f50b.html">[03] 数据绑定</a></h4><h4 id="04-el与data的两种写法"><a class="markdownIt-Anchor" href="#04-el与data的两种写法"></a> <a href="3899.html">[04] el与data的两种写法</a></h4><h4 id="05-mvvm模型"><a class="markdownIt-Anchor" href="#05-mvvm模型"></a> <a href="a38e.html">[05] mvvm模型</a></h4><h4 id="06-数据代理-objectdefineproperty"><a class="markdownIt-Anchor" href="#06-数据代理-objectdefineproperty"></a> <a href="7c3d.html">[06] 数据代理-Object.defineProperty</a></h4><h4 id="07-事件处理"><a class="markdownIt-Anchor" href="#07-事件处理"></a> <a href="ec6.html">[07] 事件处理</a></h4><h4 id="08-事件修饰符"><a class="markdownIt-Anchor" href="#08-事件修饰符"></a> <a href="48de.html">[08] 事件修饰符</a></h4><h4 id="09-键盘事件"><a class="markdownIt-Anchor" href="#09-键盘事件"></a> <a href="42b7.html">[09] 键盘事件</a></h4><h4 id="10-计算属性"><a class="markdownIt-Anchor" href="#10-计算属性"></a> <a href="3442.html">[10] 计算属性</a></h4><h4 id="11-监视属性"><a class="markdownIt-Anchor" href="#11-监视属性"></a> <a href="88f9.html">[11] 监视属性</a></h4><h4 id="12-样式的绑定"><a class="markdownIt-Anchor" href="#12-样式的绑定"></a> <a href="5a60.html">[12] 样式的绑定</a></h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue 学习系列的目录.&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="https://www.odinsam.com/categories/vue/"/>
    
    <category term="前端" scheme="https://www.odinsam.com/categories/vue/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="https://www.odinsam.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>OdinLog 组件</title>
    <link href="https://www.odinsam.com/articles/86b2.html"/>
    <id>https://www.odinsam.com/articles/86b2.html</id>
    <published>2022-07-03T10:37:10.000Z</published>
    <updated>2022-07-05T13:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>自定义简单的一个日志组件。可以存储本地文件，也可以存储到数据库(目前仅支持 mysql 和 sqlServer 数据库)。后期扩展和ELK结合。具体源代码在github可以查看。</p><span id="more"></span><h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4><p>组件可以生成对应日志文件( bin 目录下)，可用于winform、webapi项目。如果存储在本地，以日志级别 Info、Debug、Error生成文件夹，内部以 yyyy-MM-dd 格式生成文件夹。日志文件以数字标识，如果单个日志文件大小超过5M则另生成日志文件。</p><h4 id="2-组件使用"><a class="markdownIt-Anchor" href="#2-组件使用"></a> 2. 组件使用</h4><p>可以使用依赖注入，也可以在配置Config后直接使用</p><pre><code><figure class="highlight csharp"><figcaption><span>依赖注入</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddOdinSingletonOdinLogs(opt=&gt;</span><br><span class="line">  opt.Config=<span class="keyword">new</span> LogConfig &#123;</span><br><span class="line">      LogSaveType=<span class="keyword">new</span> EnumLogSaveType[]&#123;EnumLogSaveType.All&#125;,</span><br><span class="line">      ConnectionString = <span class="string">&quot;server=xxxx;Database=xxxx;Uid=xxx;Pwd=xxx;&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></code></pre>   <figure class="highlight csharp"><figcaption><span>直接配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OdinLog.Core.OdinLogs = <span class="keyword">new</span> OdinLogs(<span class="keyword">new</span> LogConfig &#123;</span><br><span class="line">       LogSaveType=<span class="keyword">new</span> EnumLogSaveType[]&#123;EnumLogSaveType.All&#125;,</span><br><span class="line">       ConnectionString = <span class="string">&quot;server=xxxx;Database=xxxx;Uid=xxx;Pwd=xxx;&quot;</span>&#125;);)</span><br></pre></td></tr></table></figure>   <figure class="highlight csharp"><figcaption><span>调用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OdinLogs.Info(<span class="keyword">new</span> LogInfo()&#123;LogContent = <span class="string">&quot;log info test&quot;</span>,LogMark=<span class="string">&quot;log mark&quot;</span>, &#125;);</span><br><span class="line">     OdinLogs.Error(</span><br><span class="line">         <span class="keyword">new</span> ExceptionLog()&#123;</span><br><span class="line">             LogContent = <span class="string">&quot;log exception test&quot;</span>,</span><br><span class="line">             LogMark=<span class="string">&quot;log mark&quot;</span>,</span><br><span class="line">             LogException = <span class="keyword">new</span> Exception(<span class="string">&quot;custom exceptioni&quot;</span>)&#125;);</span><br></pre></td></tr></table></figure><pre><code>具体配置参看 LogConfig 结构</code></pre><h4 id="3-存储表结构"><a class="markdownIt-Anchor" href="#3-存储表结构"></a> 3. 存储表结构</h4><p><a href="https://github.com/odinsam/OdinLog/tree/master/OdinLog/doc/DDL/scripts">https://github.com/odinsam/OdinLog/tree/master/OdinLog/doc/DDL/scripts</a></p><h4 id="4-文件夹结构-文件内容格式如下"><a class="markdownIt-Anchor" href="#4-文件夹结构-文件内容格式如下"></a> 4. 文件夹结构、文件内容格式如下：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- logs</span><br><span class="line">--Info</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">0.txt</span><br><span class="line">1.txt</span><br><span class="line">--Debug</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">0.txt</span><br><span class="line">--Error</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">0.txt</span><br></pre></td></tr></table></figure><p>Info、Debug 文件内容格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【 LogId 】: 766c769d349d494daf82fca503666d5d </span><br><span class="line">【 Log Level 】: Info </span><br><span class="line">【 LogTime 】: 2022-07-03 17:59:44 </span><br><span class="line">【 LogContent 】:</span><br><span class="line">log info test</span><br><span class="line">****************************************************************************************************</span><br></pre></td></tr></table></figure><p>Error 文件内容格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">【 LogId 】: 57c2978db92a44959e613f7a1e733d8b </span><br><span class="line">【 Log Level 】: Error </span><br><span class="line">【 LogTime 】: 2022-07-03 18:10:51 </span><br><span class="line">【 Exception Message 】: custom exceptioni</span><br><span class="line">【 Exception Info 】: </span><br><span class="line">&#123;</span><br><span class="line">    &quot;ClassName&quot;: &quot;System.Exception&quot;,</span><br><span class="line">    &quot;Message&quot;: &quot;custom exceptioni&quot;,</span><br><span class="line">    &quot;Data&quot;: null,</span><br><span class="line">    &quot;InnerException&quot;: null,</span><br><span class="line">    &quot;HelpURL&quot;: null,</span><br><span class="line">    &quot;StackTraceString&quot;: null,</span><br><span class="line">    &quot;RemoteStackTraceString&quot;: null,</span><br><span class="line">    &quot;RemoteStackIndex&quot;: 0,</span><br><span class="line">    &quot;ExceptionMethod&quot;: null,</span><br><span class="line">    &quot;HResult&quot;: -2146233088,</span><br><span class="line">    &quot;Source&quot;: null,</span><br><span class="line">    &quot;WatsonBuckets&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">****************************************************************************************************</span><br></pre></td></tr></table></figure><p>具体的代码在 <a href="https://github.com/odinsam/OdinLog">GitHub</a> <a href="https://www.nuget.org/packages/OdinLog"><img src="https://img.shields.io/nuget/v/OdinLog" alt></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自定义简单的一个日志组件。可以存储本地文件，也可以存储到数据库(目前仅支持 mysql 和 sqlServer 数据库)。后期扩展和ELK结合。具体源代码在github可以查看。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql8 远程连接解决办法</title>
    <link href="https://www.odinsam.com/articles/8b92.html"/>
    <id>https://www.odinsam.com/articles/8b92.html</id>
    <published>2022-06-30T07:41:00.000Z</published>
    <updated>2022-06-30T07:43:43.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; ;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="mysql" scheme="https://www.odinsam.com/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://www.odinsam.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ApiLinkMonitor 单服务链路追踪框架</title>
    <link href="https://www.odinsam.com/articles/5b4d.html"/>
    <id>https://www.odinsam.com/articles/5b4d.html</id>
    <published>2021-07-24T12:01:00.000Z</published>
    <updated>2021-07-24T12:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在平时的开发中，虽然我们有日志信息、报错信息等等，但是我们依然在某些时候需要查看项目中方法调用的来龙去脉，这种信息一般叫做链路信息。这里介绍一个单服务用于中小型项目的链路追踪框架。</p><span id="more"></span><p><strong>服务调用链路监控框架</strong></p><ol><li>简介</li></ol><p>项目基于 <a href="https://github.com/odinsam/OdinPlugs.OdinInject">OdinInjectCore</a> 和 <a href="https://github.com/odinsam/OdinPlugs.SnowFlake">SnowFlake</a> 框架开发，使用 .net core 中间件实现，主要用到了 AspectCore.Core 第三方框架为底层服务类方法调用的链路监控。监控的项目调用的链路信息入库 mongo，所以需要搭配 mongo 一起使用.<br>并且</p><ol start="2"><li>使用</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入链路监控</span></span><br><span class="line">services</span><br><span class="line">    .AddSingletonSnowFlake(dataCenterId, workerId)</span><br><span class="line">    .AddOdinTransientMongoDb(</span><br><span class="line">        opt =&gt; &#123; opt.ConnectionString = mongoConnection; opt.DbName = databaseName; &#125;)</span><br><span class="line">    .AddOdinTransientInject&lt;IOdinApiLinkMonitor&gt;();</span><br><span class="line"></span><br><span class="line">services.ConfigureDynamicProxy(config =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ~ 使用通配符的特定全局拦截器</span></span><br><span class="line">        config.Interceptors.AddTyped&lt;OdinAspectCoreInterceptorAttribute&gt;(Predicates.ForService(<span class="string">&quot;*Service&quot;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>链路数据</li></ol><p>controller 调用的 service 类需要以 Service 结尾,例如 接口 ITestService 和 实现类 TestService,controller 的 api 方法被调用后生成链路数据.<br>所有数据均进入 mongo。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 链路的 雪花Id，本次链路唯一</span></span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="comment">// 链路 当前的雪花Id</span></span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324387245330432</span>,</span><br><span class="line">    <span class="comment">// 链路状态</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路状态描述 start 表示本次链路开始</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Start&quot;</span>,</span><br><span class="line">    <span class="comment">// 上层链路雪花Id 0代表没有上层链路</span></span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态描述</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 下级链路雪花Id</span></span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324387245330433</span>,</span><br><span class="line">    <span class="comment">// 链路耗时</span></span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 链路调用的完整类名</span></span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 链路调用的类名</span></span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 调用的方法名</span></span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 本次链路的需要 从小到大排序</span></span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324394790883328</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 链路状态描述  Invoker 表示链路调用中</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="comment">// 与上一层链路的 LinkNext 对应</span></span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324387245330433</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324394790883329</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324394962849792</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324394790883329</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324394962849793</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395122233344</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324394962849793</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395122233345</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395277422592</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="comment">//  链路状态描述  ToEndReturn 表示链路调用返回</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395122233345</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态描述 CatchReturn 表示调用出现异常 但是被catch捕获</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395277422593</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">37</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395520692224</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395277422593</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395520692225</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">133</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395667492864</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395520692225</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395667492865</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">210</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324396925784064</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//  链路状态描述  Over 表示本次链路调用结束</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Over&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395667492865</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 调用成功结束</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;Success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 本次调用 2558 ms</span></span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">2558</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>解析</li></ol><p>通过链路数据得出结论：<br>本次 api 调用：<br>首先 调用 OdinCore.Services.InterfaceServices.ITestService 类的 show 方法,方法内部调用 OdinCore.Services.InterfaceServices.IInerService 类的 show 方法，<br>然后又调用 OdinCore.Services.InterfaceServices.ITTService 类的 show 方法，结果调用出错，但是被 catch 捕获最后返回。</p><p>swagger 调用返回信息如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;SnowFlakeId&quot;</span>: <span class="string">&quot;206324387228553216&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ClassName&quot;</span>: <span class="string">&quot;System.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;ttservice throw&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Data&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;InnerException&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;HelpURL&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;StackTraceString&quot;</span>: <span class="string">&quot;   at OdinPlugs.OdinMvcCore.OdinFilter.ApiInvokerFilterAttribute.OnActionExecuted(ActionExecutedContext context) in /Users/odin/workSpace/github/odinmaf/OdinPlugs/OdinMvcCore/OdinFilter/ApiInvokFilterAttribute.cs:line 109\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextExceptionFilterAsync&gt;g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ExceptionContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeNextResourceFilter()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at OdinPlugs.ApiLinkMonitor.OdinMiddleware.OdinExceptionMiddleware.Invoke(HttpContext context) in /Users/odin/workSpace/github/odinmaf/OdinPlugs.ApiLinkMonitor/OdinMiddleware/OdinExceptionMiddleware.cs:line 34&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;RemoteStackTraceString&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;RemoteStackIndex&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;ExceptionMethod&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;HResult&quot;</span>: <span class="number">-2146233088</span>,</span><br><span class="line">        <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;AspectCore.Core&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;WatsonBuckets&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;StatusCode&quot;</span>: <span class="string">&quot;sys-error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ErrorMessage&quot;</span>: <span class="string">&quot;系统异常，请联系管理员&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;系统异常:[sys-error]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过相同的雪花 Id 最后会清晰的分析出整个调用过程中的过程，并且如果能够结合 <a href="https://github.com/odinsam/OdinPlugs.OdinPlugs">OdinPlugs</a> 框架,可以监控到 controller 中 api 的调用记录，包括入参、时间、返回信息等会更加详细。</p><p>具体的代码在 <a href="https://github.com/odinsam/OdinPlugs.ApiLinkMonitor">GitHub</a> <a href="https://www.nuget.org/packages/OdinPlugs.ApiLinkMonitor"><img src="https://img.shields.io/nuget/v/OdinPlugs.ApiLinkMonitor" alt></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在平时的开发中，虽然我们有日志信息、报错信息等等，但是我们依然在某些时候需要查看项目中方法调用的来龙去脉，这种信息一般叫做链路信息。这里介绍一个单服务用于中小型项目的链路追踪框架。&lt;/p&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term="链路追踪" scheme="https://www.odinsam.com/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
    <category term="ApiLinkMonitor" scheme="https://www.odinsam.com/tags/ApiLinkMonitor/"/>
    
  </entry>
  
  <entry>
    <title>利用BackgroundService封装后台服务</title>
    <link href="https://www.odinsam.com/articles/c075.html"/>
    <id>https://www.odinsam.com/articles/c075.html</id>
    <published>2021-07-22T15:21:00.000Z</published>
    <updated>2021-07-24T11:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章 <a href="https://odinsam.com/articles/2893.html">使用 BackgroundService 类在微服务中实现后台任务</a> 中有介绍到如何利用 BackgroundService 来实现后台服务，这里我们依旧利用 BackgroundService 来进行类似 hangfire 的封装。</p><span id="more"></span><h1 id="odinplugsodinhostedservice"><a class="markdownIt-Anchor" href="#odinplugsodinhostedservice"></a> OdinPlugs.OdinHostedService</h1><h3 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h3><p>1.1 后台任务 - 普通任务，立即执行，只执行一次</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceNomalJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - Nomal - Job - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.2 后台任务 - 延迟调用，只执行一次</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.3 后台任务 - 循环任务执行：重复执行的任务，使用常见的时间循环模式</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.4 后台任务 - 循环任务执行：重复执行的任务(任务执行完后继续自动执行)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceLoopJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - LoopJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.5 后台任务 - 自定义任务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">services.AddOdinBgServiceJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Timer timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">worker</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    opt.StartAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer = <span class="keyword">new</span> Timer(worker, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">2000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    opt.ExecuteAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    opt.StopAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    opt.DisposeAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer?.Dispose();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.6 后台任务 - 多任务执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">services</span><br><span class="line">    .AddOdinBgServiceJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Timer timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">worker</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        opt.StartAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer = <span class="keyword">new</span> Timer(worker, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">2000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        opt.ExecuteAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        opt.StopAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        opt.DisposeAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer?.Dispose();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceLoopJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// new ReceiveRabbitMQHelper().ReceiveMQ(_Options);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - LoopJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceRecurringJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.Period = TimeSpan.FromSeconds(<span class="number">1</span>);</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// new ReceiveRabbitMQHelper().ReceiveMQ(_Options);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - RecurringJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceNomalJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - Nomal- Job - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>具体的代码在 <a href="https://github.com/odinsam/OdinPlugs.OdinHostedService">GitHub</a> <a href="https://www.nuget.org/packages/OdinPlugs.OdinHostedService"><img src="https://img.shields.io/nuget/v/OdinPlugs.OdinHostedService" alt></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前的文章 &lt;a href=&quot;https://odinsam.com/articles/2893.html&quot;&gt;使用 BackgroundService 类在微服务中实现后台任务&lt;/a&gt; 中有介绍到如何利用 BackgroundService 来实现后台服务，这里我们依旧利用 BackgroundService 来进行类似 hangfire 的封装。&lt;/p&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/tags/Net-Core/"/>
    
    <category term="微服务" scheme="https://www.odinsam.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="BackgroundService" scheme="https://www.odinsam.com/tags/BackgroundService/"/>
    
    <category term="后台服务" scheme="https://www.odinsam.com/tags/%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于Mapster对象映射器的封装和使用</title>
    <link href="https://www.odinsam.com/articles/9cc8.html"/>
    <id>https://www.odinsam.com/articles/9cc8.html</id>
    <published>2021-07-15T11:41:00.000Z</published>
    <updated>2021-07-15T11:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>说到 .NET 中的对象映射框架，大部分人的第一映像就是 AutoMapper ，而 Mapster 相对知道的人较少。但其实 Mapster 是一个高性能的对象映射框架，与 AutoMapper 相比，Mapster 在速度和内存占用方面表现更加优秀，可以在只使用1/3内存的情况下获得4倍的性能提升。</p><span id="more"></span><ol><li>基础类</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StuName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StuAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student_DbModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Startup.cs 注册全局映射Config，也可以不注册</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 OdinInjectCore 注入</span></span><br><span class="line">services.AddOdinTypeAdapter(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ForType&lt;ErrorCode_DbModel, ErrorCode_Model&gt;()</span><br><span class="line">                .Map(dest =&gt; dest.ShowMessage, src =&gt; src.CodeShowMessage);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 使用 .net core DI 注入</span></span><br><span class="line">services.AddSingleton&lt;ITypeAdapterMapster&gt;(provider =&gt; <span class="keyword">new</span> TypeAdapterMapster(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ForType&lt;ErrorCode_DbModel, ErrorCode_Model&gt;()</span><br><span class="line">                .Map(dest =&gt; dest.ShowMessage, src =&gt; src.CodeShowMessage);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><ol start="3"><li>使用时获取全局注册Config</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 OdinInjectCore 获取 TypeAdapterMapster</span></span><br><span class="line"><span class="keyword">var</span> mapsterConfig = OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig();</span><br><span class="line"><span class="comment">// 使用 .net core 默认 DI 获取 TypeAdapterMapster</span></span><br><span class="line"><span class="keyword">var</span> mapsterConfig = services.BuildServiceProvider().GetService&lt;ITypeAdapterMapster&gt;().GetConfig();</span><br></pre></td></tr></table></figure><ol start="4"><li>获取数据准备映射转换对象</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 SqlSugar 获取数据库中的数据</span></span><br><span class="line">List&lt;Student_DbModel&gt; stuDbModels = DbScoped.Sugar.Queryable&lt;Student_DbModel&gt;().ToList();</span><br><span class="line">Student_DbModel stuDbModel = stuDbModels[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><ol start="6"><li>对象映射转换</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用全局映射配置转换目标对象类型</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射配置转换目标对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为没有传全局映射配置, 此时虽然全局配置也有 StudentName 属性映射 StuName 的配置，但是会以当前自定义配置为准</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射+全局映射配置转换目标对象对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为全局映射配置中有 StudentName 属性映射 StuName 的配置，所以当自定义配置与全局配置都存在时，以全局配置为准</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">            opt.Map(dest =&gt; dest.StuAddress, src =&gt; src.StudentAddress);</span><br><span class="line">        &#125;,</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><ol start="7"><li><p>集合映射转换</p><p>将 stuDbModels List&lt;ErrorCode_DbModel&gt; 集合映射转换为 stuLst List<Student> 类型的集合</Student></p></li></ol><p>泛型参数说明:</p><table><thead><tr><th style="text-align:left">参数名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Student_DbModel</td><td style="text-align:left">映射的源类型</td></tr><tr><td style="text-align:left">Student</td><td style="text-align:left">转换的目标类型</td></tr><tr><td style="text-align:left">List<Student></Student></td><td style="text-align:left">最终转换后的集合类型</td></tr></tbody></table><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用全局映射配置转换目标对象类型</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射配置转换目标对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为没有传全局映射配置, 此时虽然全局配置也有 StudentName 属性映射 StuName 的配置，但是会以当前自定义配置为准</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射+全局映射配置转换目标对象对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为全局映射配置中有 StudentName 属性映射 StuName 的配置，所以当自定义配置与全局配置都存在时，以全局配置为准</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">            opt.Map(dest =&gt; dest.StuAddress, src =&gt; src.StudentAddress);</span><br><span class="line">        &#125;,</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>关于 Mapster 更详细的用法，请参照 <a href="https://github.com/MapsterMapper/Mapster">Mapster</a> 官网。</p><p>具体封装代码详见 <a href="https://github.com/odinsam/OdinPlugs.Utils">Github</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;说到 .NET 中的对象映射框架，大部分人的第一映像就是 AutoMapper ，而 Mapster 相对知道的人较少。但其实 Mapster 是一个高性能的对象映射框架，与 AutoMapper 相比，Mapster 在速度和内存占用方面表现更加优秀，可以在只使用1/3内存的情况下获得4倍的性能提升。&lt;/p&gt;</summary>
    
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/categories/Net-Core/"/>
    
    
    <category term=".Net Core" scheme="https://www.odinsam.com/tags/Net-Core/"/>
    
    <category term="Mapster" scheme="https://www.odinsam.com/tags/Mapster/"/>
    
  </entry>
  
  <entry>
    <title>.Net中关于Json序列化Long类型数据的解决办法</title>
    <link href="https://www.odinsam.com/articles/4ad7.html"/>
    <id>https://www.odinsam.com/articles/4ad7.html</id>
    <published>2021-07-06T15:11:09.000Z</published>
    <updated>2021-07-06T16:06:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在分布式的项目中，我们的数据库Id不能再像以前一样使用int类型自动增长，这时候我们需要一个在网络当中都要能够保持唯一的值，通常情况我们会使用Guid来解决这个问题，但是作为string类型，他并不适合作为主键。尤其是在查询等需要索引操作的时候显得尤为重要。</p></blockquote><span id="more"></span><blockquote><ol><li>这时候我们通常会选择使用雪花Id来解决这个问题，他是一个能在网络当中能够保证唯一的数值number类型的数字，对应在csharp中是long类型。具体雪花Id的原理网上都有，这里直接上生成雪花Id的代码：</li></ol></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinSnowFlake</span> : <span class="title">IOdinSnowFlake</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 开始时间截((new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Utc)-Jan1st1970).TotalMilliseconds)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">long</span> twepoch;</span><br><span class="line">    <span class="comment">// 机器id所占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> workerIdBits = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 数据标识id所占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> datacenterIdBits = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> maxWorkerId = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="comment">// 支持的最大数据标识id，结果是31</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> maxDatacenterId = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="comment">// 序列在id中占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> sequenceBits = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">// 数据标识id向左移17位(12+5)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="comment">// 机器ID向左移12位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="comment">// 时间截向左移22位(5+5+12)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line">    <span class="comment">// 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> sequenceMask = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; sequenceBits);</span><br><span class="line">    <span class="comment">// 数据中心ID(0~31)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> datacenterId &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 工作机器ID(0~31)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> workerId &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 毫秒内序列(0~4095)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> sequence &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 上次生成ID的时间截</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> lastTimestamp &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt; dicContainer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 雪花ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;datacenterId&quot;&gt;</span>数据中心ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;workerId&quot;&gt;</span>工作机器ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSnowFlake</span>(<span class="params"><span class="built_in">long</span> datacenterId, <span class="built_in">long</span> workerId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.twepoch = (<span class="built_in">long</span>)((<span class="keyword">new</span> DateTime(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc) - Jan1st1970).TotalMilliseconds);</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="built_in">string</span>.Format(<span class="string">&quot;datacenter Id can&#x27;t be greater than &#123;0&#125; or less than 0&quot;</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="built_in">string</span>.Format(<span class="string">&quot;worker Id can&#x27;t be greater than &#123;0&#125; or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">        <span class="keyword">this</span>.sequence = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">this</span>.lastTimestamp = <span class="number">-1L</span>;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer == <span class="literal">null</span>)</span><br><span class="line">            dicContainer = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitDic</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer == <span class="literal">null</span>)</span><br><span class="line">            dicContainer = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearDic</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer != <span class="literal">null</span>)</span><br><span class="line">            dicContainer.Clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获得下一个ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">NextId</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (<span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span> timestamp = GetCurrentTimestamp();</span><br><span class="line">            <span class="keyword">if</span> (timestamp &gt; lastTimestamp) <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = <span class="number">0L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (timestamp == lastTimestamp) <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">                <span class="keyword">if</span> (sequence == <span class="number">0</span>) <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = GetNextTimestamp(lastTimestamp); <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//当前时间小于上一次ID生成的时间戳，证明系统时钟被回拨，此时需要做回拨处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">                <span class="keyword">if</span> (sequence &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = lastTimestamp; <span class="comment">//停留在最后一次时间戳上，等待系统时间追上后即完全度过了时钟回拨问题。</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = lastTimestamp + <span class="number">1</span>; <span class="comment">//直接进位到下一个毫秒</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//throw new Exception(string.Format(&quot;Clock moved backwards.  Refusing to generate id for &#123;0&#125; milliseconds&quot;, lastTimestamp - timestamp));</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lastTimestamp = timestamp; <span class="comment">//上次生成ID的时间截</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">            <span class="keyword">var</span> id = ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |</span><br><span class="line">                (datacenterId &lt;&lt; datacenterIdShift) |</span><br><span class="line">                (workerId &lt;&lt; workerIdShift) |</span><br><span class="line">                sequence;</span><br><span class="line">            <span class="keyword">if</span> (!dicContainer.ContainsKey(id))</span><br><span class="line">            &#123;</span><br><span class="line">                dicContainer.Add(id, id);</span><br><span class="line">                <span class="keyword">return</span> id;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> NextId();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解析雪花ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">AnalyzeId</span>(<span class="params"><span class="built_in">long</span> Id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">var</span> timestamp = (Id &gt;&gt; timestampLeftShift);</span><br><span class="line">        <span class="keyword">var</span> time = Jan1st1970.AddMilliseconds(timestamp + twepoch);</span><br><span class="line">        sb.Append(time.ToLocalTime().ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:fff&quot;</span>));</span><br><span class="line">        <span class="keyword">var</span> datacenterId = (Id ^ (timestamp &lt;&lt; timestampLeftShift)) &gt;&gt; datacenterIdShift;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + datacenterId);</span><br><span class="line">        <span class="keyword">var</span> workerId = (Id ^ ((timestamp &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift))) &gt;&gt; workerIdShift;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + workerId);</span><br><span class="line">        <span class="keyword">var</span> sequence = Id &amp; sequenceMask;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + sequence);</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lastTimestamp&quot;&gt;</span>上次生成ID的时间截<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>当前时间戳<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">GetNextTimestamp</span>(<span class="params"><span class="built_in">long</span> lastTimestamp</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">long</span> timestamp = GetCurrentTimestamp();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            timestamp = GetCurrentTimestamp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取当前时间戳</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">GetCurrentTimestamp</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">long</span>)(DateTime.UtcNow - Jan1st1970).TotalMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DateTime Jan1st1970 = <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码解释：</strong></p><ol><li><p>提供了构造函数，其中datacenterId为当前数据中心Id:一般从1开始。workerId是机器Id,<font color="red">需要注意的是在网络节点当中的服务器，这个Id不能重复</font></p></li><li><p>代码的 NextId() 方法将会生成一个 18位长的long类型的雪花Id。</p></li><li><p>AnalyzeId() 方法可以简单的解析一个long的数值是不是符合雪花Id的规范。<font color="red">这个解析不精准，只能判断格式大致是否正确</font>具体解析规则可以看代码。</p></li><li><p>有了这个Id，我们通常可以开心的在代码当中以application/json格式返回一个对象，比如</p></li></ol><p><img src="/images/4ad7/code.png" alt="code"></p><p>输出的结果是</p><p><img src="/images/4ad7/result.png" alt="result"></p><p><strong>这是因为 JavaScript 数值精度是32位，如果整数数度超过32位，就会被当作浮点数处理。换句话说，如果从服务端生成的JSON，某个值是64位整数，传到前端JavaScript，再传回服务端，不做任何运算，都可能出现失真。</strong></p><p>解决问题的办法：将long作为string类型序列化输出 代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Stu</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">JsonConverter(typeof(JsonConverterLong))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JsonConverterLong 类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonConverterLong</span> : <span class="title">JsonConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否可以转换</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;objectType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">CanConvert</span>(<span class="params">Type objectType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 读json</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;reader&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;objectType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;existingValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serializer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ReadJson</span>(<span class="params">JsonReader reader, Type objectType, <span class="built_in">object</span> existingValue, JsonSerializer serializer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((reader.ValueType == <span class="literal">null</span> || reader.ValueType == <span class="keyword">typeof</span>(<span class="built_in">long</span>?)) &amp;&amp; reader.Value == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span>.TryParse(reader.Value != <span class="literal">null</span> ? reader.Value.ToString() : <span class="string">&quot;&quot;</span>, <span class="keyword">out</span> <span class="built_in">long</span> <span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 写json</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;writer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serializer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteJson</span>(<span class="params">JsonWriter writer, <span class="built_in">object</span> <span class="keyword">value</span>, JsonSerializer serializer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</span><br><span class="line">            writer.WriteValue(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            writer.WriteValue(<span class="keyword">value</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在分布式的项目中，我们的数据库Id不能再像以前一样使用int类型自动增长，这时候我们需要一个在网络当中都要能够保持唯一的值，通常情况我们会使用Guid来解决这个问题，但是作为string类型，他并不适合作为主键。尤其是在查询等需要索引操作的时候显得尤为重要。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vscode 使用 git-commit-plugin 插件规范提交 Git</title>
    <link href="https://www.odinsam.com/articles/34fe.html"/>
    <id>https://www.odinsam.com/articles/34fe.html</id>
    <published>2021-06-30T13:49:00.000Z</published>
    <updated>2021-07-06T16:02:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在团队协作开发时，每个人提交代码时都会写 commit message。每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。本文将介绍 Git 提交的规范以及如何利用 git-commit-plugin 插件快速提交规范的commit。</p></blockquote><span id="more"></span><blockquote><p>一般来说，大厂都有一套的自己的提交规范，尤其是在一些大型开源项目中，commit message 都是十分一致的。因此，我们需要制定统一标准，促使团队形成一致的代码提交风格，更好的提高工作效率，成为一名有追求的工程师。其中 AngularJS 在 github 上 的提交记录被业内许多人认可，逐渐被大家引用。</p></blockquote><p><strong>Commit message 的格式</strong></p><p>每次提交，Commit message 都包括三个部分：header，body 和 footer。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type(scope):空格subject</span><br><span class="line">换行</span><br><span class="line">[body]</span><br><span class="line">换行</span><br><span class="line">[footer]</span><br></pre></td></tr></table></figure><p><strong>1. type 类型</strong></p><p>type 是 commit 的类别，只允许如下几种标识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 主要type</span><br><span class="line">feat:     增加新功能</span><br><span class="line">fix:      修复bug</span><br><span class="line"></span><br><span class="line"># 特殊type</span><br><span class="line"> docs:    只改动了文档相关的内容</span><br><span class="line">style:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span><br><span class="line">build:    构造工具的或者外部依赖的改动，例如webpack，npm</span><br><span class="line">refactor:  代码重构时使用</span><br><span class="line">revert:   执行git revert打印的message</span><br><span class="line"></span><br><span class="line"># 暂不使用type</span><br><span class="line">test:     添加测试或者修改现有测试</span><br><span class="line">perf:     提高性能的改动</span><br><span class="line">ci:       与CI（持续集成服务）有关的改动</span><br><span class="line">chore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure><p><strong>2. scope</strong></p><pre><code>scope也为必填项，用于描述改动的范围，格式为项目名/模块名，例如：xxxServices 。如果一次commit修改多个模块，建议拆分成多次commit，以便更好追踪和维护。</code></pre><p><strong>3. subject</strong></p><pre><code>commit 目的的简短描述，不超过50个字符。结尾一般是 #33224 这样的超链接。链接到本次提交的 url 但不强制</code></pre><p><strong>4. body</strong></p><pre><code>对本次 commit 的详细描述</code></pre><p><strong>5. footer</strong></p><pre><code>Footer 部分只用于以下两种情况：</code></pre><blockquote><p>5.1. 不兼容变动: 如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。例如下边这样：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;attribute&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;@&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure><blockquote><p>5.2. 关闭 Issue: 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p></blockquote><p>完整的提交demo如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fix(dev-infra): remove bots from special thanks section</span><br><span class="line"></span><br><span class="line">With this change we remove known used bots from special thanks section in the changelog.</span><br><span class="line"></span><br><span class="line">PR Close #42697</span><br></pre></td></tr></table></figure><blockquote><p>那么每次都这样编写提交的内容，还要注意对应的格式。我们有没有简单方便的办法呢，那就是使用对应工具的插件。<a href="https://github.com/odinsam/git-commit-plugin">git-commit-plugin</a> 插件可以帮助我们快速的边写提交的信息，但是插件本身并不支持格式化。所以，我在该插件的基础上做了二次开发，具体使用如下：</p></blockquote><ol><li><p>下载安装对应的插件：<a href="https://github.com/odinsam/git-commit-plugin/releases/download/1.0.6/git-commit-plugin-1.0.6.vsix">git-commit-plugin-1.0.6.vsix</a></p></li><li><p>在插件的扩展配置中，进行对应的提交模板配置。可以配置多个，这是因为我公司和我自己的提交格式都不一样。具体可以参见项目的 <a href="https://github.com/odinsam/git-commit-plugin/blob/master/README.md">readme.md</a></p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;GitCommitPlugin.Templates&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;templateName&quot;</span>: <span class="string">&quot;Angular&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;templateContent&quot;</span>: <span class="string">&quot;&lt;icon&gt;&lt;space&gt;&lt;type&gt;(&lt;scope&gt;):&lt;space&gt;&lt;subject&gt;&lt;enter&gt;&lt;body&gt;&lt;enter&gt;&lt;footer&gt;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;templateName&quot;</span>: <span class="string">&quot;git-cz&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;templateContent&quot;</span>: <span class="string">&quot;&lt;type&gt;(&lt;scope&gt;):&lt;space&gt;&lt;icon&gt;&lt;space&gt;&lt;subject&gt;&lt;enter&gt;&lt;body&gt;&lt;enter&gt;&lt;footer&gt;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li>配置插件是否启用图标</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;GitCommitPlugin.ShowEmoji&quot;</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="4"><li>最后就可以方便的提交使用了。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在团队协作开发时，每个人提交代码时都会写 commit message。每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。本文将介绍 Git 提交的规范以及如何利用 git-commit-plugin 插件快速提交规范的commit。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Git" scheme="https://www.odinsam.com/categories/Git/"/>
    
    
    <category term="Git" scheme="https://www.odinsam.com/tags/Git/"/>
    
    <category term="VsCode" scheme="https://www.odinsam.com/tags/VsCode/"/>
    
    <category term="插件" scheme="https://www.odinsam.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
