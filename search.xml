<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo Pure主题给Post页面添加keywords</title>
    <url>//articles/409f.html</url>
    <content><![CDATA[<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 这里是他的中文文档，无论是结合 Github、Gitee 或者是在私人的云端都可以快速部署，非常高效快捷。为了更好的seo优化，使用pure主题给每一个post页面添加keywords 关键字。</p>
</blockquote>
<span id="more"></span>
<h4 id="找到主题-purelayout_commonheadejs-文件在-title-标签后添加以下代码"><a class="markdownIt-Anchor" href="#找到主题-purelayout_commonheadejs-文件在-title-标签后添加以下代码"></a> 找到主题 pure/layout/_common/head.ejs 文件，在 title 标签后添加以下代码:</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (post.tags &amp;&amp; post.tags.length) &#123; %&gt; </span><br><span class="line">	&lt;% <span class="keyword">var</span> kw = <span class="string">&quot;&quot;</span>;post.tags.forEach(<span class="function"><span class="params">t</span>=&gt;</span>&#123; kw+=t.name+<span class="string">&#x27;,&#x27;</span> &#125;);kw = kw.substr(<span class="number">0</span>,kw.length-<span class="number">1</span>) %&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&lt;%= kw %&gt;&quot;</span> /&gt;</span></span></span><br><span class="line">	&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.keywords)&#123; %&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&lt;%= config.keywords %&gt;&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;%&#125; %&gt;</span><br></pre></td></tr></table></figure>
<h4 id="这样每一个页面都可以依据发布时的tag生成keywords标签"><a class="markdownIt-Anchor" href="#这样每一个页面都可以依据发布时的tag生成keywords标签"></a> 这样每一个页面都可以依据发布时的tag生成keywords标签</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Hexo,Seo,Pure&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="如果发布时没有tag那么会依据hexo的配置文件font-colorred注意不是pure的配置文件font-_configyml-中的-keywords-生成对应的-meta-标签"><a class="markdownIt-Anchor" href="#如果发布时没有tag那么会依据hexo的配置文件font-colorred注意不是pure的配置文件font-_configyml-中的-keywords-生成对应的-meta-标签"></a> 如果发布时没有tag，那么会依据hexo的配置文件(<font color="red">注意不是pure的配置文件</font>) _config.yml 中的 keywords 生成对应的 meta 标签</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;.Net Core,javascript,typescript,html5,css,css3,linux,react,vue,js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Seo</tag>
        <tag>Pure</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net Core使用SqlSugar和Cap</title>
    <url>//articles/ed30.html</url>
    <content><![CDATA[<blockquote>
<p>近期的一次面试当中聊起了 .Net Core 中的 EF 框架和分布式的事务，因为在项目中也遇到过并发导致 EF Core 性能和报错的各种问题，所以就和面试官吐槽了一下，面试官说他们公司用的 SqlSugar 。这个开源组件库我以前知道的，但很久没有关注。回家看了一下发现这个东西已经非常完善，特此将项目中的 EF Core 变更为了 SqlSugar并且加入了 Cap，顺便记录一下遇到的问题。</p>
</blockquote>
<span id="more"></span>
<h4 id="1-sqlsugar简介"><a class="markdownIt-Anchor" href="#1-sqlsugar简介"></a> 1. SqlSugar简介</h4>
<p>   SqlSugar是一款 老牌 .NET 开源ORM框架，由果糖大数据科技团队维护和更新 ，Github star数仅次于EF 和 Dapper。优点： 简单易用、功能齐全、高性能、轻量级、服务齐全、有专业技术支持一天18小时服务。支持数据库有 MySql、SqlServer、Sqlite、Oracle 、 postgresql、达梦、人大金仓。我的项目习惯了Code First，第一次使用也不知道是否正确。</p>
<p><strong>Startup.cs</strong> - SqlSugar 注入代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddTransient&lt;OdinProjectSugarDbContext&gt;();</span><br><span class="line">OdinInjectHelper.ServiceProvider = services.BuildServiceProvider();</span><br><span class="line"><span class="keyword">var</span> sugarEntity = OdinInjectHelper.GetService&lt;OdinProjectSugarDbContext&gt;();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 初始化数据库</span></span><br><span class="line"><span class="comment">//修改cnf.config Host配置的链接字符串  enable修改为true，即可自动化初识数据库</span></span><br><span class="line"><span class="keyword">if</span> (_Options.DbEntity.InitDb)</span><br><span class="line">&#123;</span><br><span class="line">	sugarEntity.CreateTable(<span class="string">&quot;db_odinCore&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>OdinProjectSugarDbContext.cs</strong> - DbContext定义以及初始化数据库</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinProjectSugarDbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    SqlSugarClient db;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinProjectSugarDbContext</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        db = DbScoped.Sugar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateTable</span>(<span class="params"><span class="built_in">string</span> databaseName, <span class="built_in">bool</span> Backup = <span class="literal">false</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;	</span><br><span class="line">            <span class="comment">// 判断数据库是否存在，如果不存在这里会有异常</span></span><br><span class="line">            flag = db.DbMaintenance.GetDataBaseList(db).Contains(databaseName);</span><br><span class="line">        &#125;</span><br><span class="line">        catch</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果不存在 初始化创建数据库</span></span><br><span class="line">            db.DbMaintenance.CreateDatabase(databaseName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Logger.Information(<span class="string">$&quot;【 自动创建数据库 】&quot;</span>);</span><br><span class="line">                db.DbMaintenance.CreateDatabase(databaseName);</span><br><span class="line">                <span class="comment">// 我在所有的表后边都实现了一个自己的接口 IDbTable </span></span><br><span class="line">                <span class="keyword">var</span> dbTable = <span class="keyword">typeof</span>(IDbTable);</span><br><span class="line">                <span class="comment">// 找到所有实现了 IDbTable 的类 就是Mysql中对应的表</span></span><br><span class="line">                <span class="keyword">var</span> types = <span class="keyword">this</span>.GetType().Assembly.GetTypes().Where(t =&gt; dbTable.IsAssignableFrom(t));</span><br><span class="line">                <span class="comment">// 是否备份表</span></span><br><span class="line">                <span class="keyword">if</span> (Backup)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> types)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 判断表是否存在  如果不存在则新建表</span></span><br><span class="line">                        <span class="keyword">if</span> (!OdinSugarHelper.CheckTable(item))</span><br><span class="line">                        &#123;</span><br><span class="line">                            DbScoped.Sugar.CodeFirst.BackupTable().InitTables(item);</span><br><span class="line">                            Log.Logger.Information(<span class="string">$&quot;创建数据表【 <span class="subst">&#123;item.ToString()&#125;</span> 】&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> types)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!OdinSugarHelper.CheckTable(item))</span><br><span class="line">                        &#123;</span><br><span class="line">                            DbScoped.Sugar.CodeFirst.InitTables(item);</span><br><span class="line">                            Log.Logger.Information(<span class="string">$&quot;创建数据表【 <span class="subst">&#123;item.ToString()&#125;</span> 】&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                Log.Logger.Information(<span class="string">$&quot;启用【 数据库初始化 】---开始配置&quot;</span>);</span><br><span class="line">                SampleData.Init();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSugarDbSet</span>&lt;<span class="title">Aop_ApiInvokerCatch_DbModel</span>&gt; ApiInvokerCatchs</span> &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> OdinSugarDbSet&lt;Aop_ApiInvokerCatch_DbModel&gt;(db); &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSugarDbSet</span>&lt;<span class="title">Aop_ApiInvokerRecord_DbModel</span>&gt; ApiInvokerRecords</span> &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> OdinSugarDbSet&lt;Aop_ApiInvokerRecord_DbModel&gt;(db); &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSugarDbSet</span>&lt;<span class="title">ErrorCode_DbModel</span>&gt; ErrorCodes</span> &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> OdinSugarDbSet&lt;ErrorCode_DbModel&gt;(db); &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>OdinSugarHelper.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinSugarHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> SqlSugarClient Db = DbScoped.Sugar;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 检查表是否存在</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckTable</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> tableName = Db.EntityMaintenance.GetTableName(type);</span><br><span class="line">        <span class="keyword">return</span> Db.DbMaintenance.IsAnyTable(tableName, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 检查表是否存在</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckTable</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> tableName = Db.EntityMaintenance.GetTableName(<span class="keyword">typeof</span>(T));</span><br><span class="line">        <span class="keyword">return</span> Db.DbMaintenance.IsAnyTable(tableName, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 检查表是否存在</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;TableName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckTable</span>(<span class="params"><span class="built_in">string</span> TableName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Db.DbMaintenance.IsAnyTable(TableName, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样程序在运行的时候就基于DbContext的定义可以在数据库新建表。</p>
<h4 id="2-基于-sqlsugar-使用-cap"><a class="markdownIt-Anchor" href="#2-基于-sqlsugar-使用-cap"></a> 2. 基于 SqlSugar 使用 cap</h4>
<p>  CAP 是一个在分布式系统中（SOA，MicroService）实现事件总线及最终一致性（分布式事务）的一个开源的 C# 库，她具有轻量级，高性能，易使用等特点。</p>
<p><strong>Startup.cs</strong> - SqlSugar 注入代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddOdinCapInject(_Options.DbEntity.ConnectionString, _Options.MongoDb.MongoConnection, _Options.RabbitMQ);</span><br></pre></td></tr></table></figure>
<p><strong>AddOdinCapInject</strong> - 方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddOdinCapInject</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, <span class="built_in">string</span> mysqlConnectionString, <span class="built_in">string</span> mongoConnectionString, RabbitMQOptions rabbitMQOptions</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddCap(x =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果你使用的ADO.NET，根据数据库选择进行配置：</span></span><br><span class="line">        <span class="comment">// x.UseSqlServer(&quot;数据库连接字符串&quot;);</span></span><br><span class="line">        x.UseMySql(mysqlConnectionString);</span><br><span class="line">        <span class="comment">// x.UsePostgreSql(&quot;数据库连接字符串&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果你使用的 MongoDB，你可以添加如下配置：</span></span><br><span class="line">        <span class="comment">// x.UseMongoDB(mongoConnectionString);  //注意，仅支持MongoDB 4.0+集群</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//CAP支持 RabbitMQ、Kafka、AzureServiceBus 等作为MQ，根据使用选择配置：</span></span><br><span class="line">        x.UseRabbitMQ(rb =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            rb.HostName = rabbitMQOptions.HostNames[<span class="number">0</span>];</span><br><span class="line">            rb.UserName = rabbitMQOptions.Account.UserName;</span><br><span class="line">            rb.Password = rabbitMQOptions.Account.Password;</span><br><span class="line">            rb.VirtualHost = rabbitMQOptions.VirtualHost;</span><br><span class="line">            rb.Port = rabbitMQOptions.Port;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// x.UseKafka(&quot;ConnectionStrings&quot;);</span></span><br><span class="line">        <span class="comment">// x.UseAzureServiceBus(&quot;ConnectionStrings&quot;);</span></span><br><span class="line">        x.UseDashboard();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> services;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>OdinCapHelper.cs</strong> - 封装，注入到service中即可使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinCapHelper</span> : <span class="title">IOdinCapHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CapPublish</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> publishName, T contentObj, Action action = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> db = DbScoped.Sugar;</span><br><span class="line">        <span class="keyword">var</span> capBus = OdinInjectHelper.GetService&lt;ICapPublisher&gt;();</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = (MySqlConnection)db.Ado.Connection)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> transaction = connection.BeginTransaction(capBus, autoCommit: <span class="literal">false</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (connection.State != ConnectionState.Open)</span><br><span class="line">                &#123;</span><br><span class="line">                    connection.Open();</span><br><span class="line">                &#125;</span><br><span class="line">                db.Ado.Transaction = (IDbTransaction)transaction.DbTransaction;<span class="comment">//这行很重要</span></span><br><span class="line">                <span class="keyword">if</span> (action != <span class="literal">null</span>) action();</span><br><span class="line">                capBus.Publish&lt;T&gt;(publishName, contentObj);</span><br><span class="line">                transaction.Commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="red">这里需要注意的是，如果和我一样是使用mysql数据库，那么需要讲nuget包由 SqlSugarCore 替换为 SqlSugarCore.MySqlConnector 切记！！！ 切记！！！</font></p>
<p>** Controller ** - Action方法中发布消息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> db = DbScoped.Sugar;</span><br><span class="line">OdinCapHelper.CapPublish(<span class="string">&quot;Sample.RabbitMQ.MySql&quot;</span>, DateTime.Now, () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">&quot;to do something&quot;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>Controller</strong> - Action方法中订阅消费消息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">CapSubscribe(<span class="meta-string">&quot;Sample.RabbitMQ.MySql&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Task&gt; <span class="title">CheckReceivedMessage</span>(<span class="params">DateTime time</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(time);</span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码可以在 <a href="https://github.com/odinsam/OdinMA">GitHub</a>中找到。</p>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>SqlSugar</tag>
        <tag>Cap</tag>
      </tags>
  </entry>
  <entry>
    <title>ApiLinkMonitor 单服务链路追踪框架</title>
    <url>//articles/5b4d.html</url>
    <content><![CDATA[<p>在平时的开发中，虽然我们有日志信息、报错信息等等，但是我们依然在某些时候需要查看项目中方法调用的来龙去脉，这种信息一般叫做链路信息。这里介绍一个单服务用于中小型项目的链路追踪框架。</p>
<span id="more"></span>
<p><strong>服务调用链路监控框架</strong></p>
<ol>
<li>简介</li>
</ol>
<p>项目基于 <a href="https://github.com/odinsam/OdinPlugs.OdinInject">OdinInjectCore</a> 和 <a href="https://github.com/odinsam/OdinPlugs.SnowFlake">SnowFlake</a> 框架开发，使用 .net core 中间件实现，主要用到了 AspectCore.Core 第三方框架为底层服务类方法调用的链路监控。监控的项目调用的链路信息入库 mongo，所以需要搭配 mongo 一起使用.<br>
并且</p>
<ol start="2">
<li>使用</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入链路监控</span></span><br><span class="line">services</span><br><span class="line">    .AddSingletonSnowFlake(dataCenterId, workerId)</span><br><span class="line">    .AddOdinTransientMongoDb(</span><br><span class="line">        opt =&gt; &#123; opt.ConnectionString = mongoConnection; opt.DbName = databaseName; &#125;)</span><br><span class="line">    .AddOdinTransientInject&lt;IOdinApiLinkMonitor&gt;();</span><br><span class="line"></span><br><span class="line">services.ConfigureDynamicProxy(config =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ~ 使用通配符的特定全局拦截器</span></span><br><span class="line">        config.Interceptors.AddTyped&lt;OdinAspectCoreInterceptorAttribute&gt;(Predicates.ForService(<span class="string">&quot;*Service&quot;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>链路数据</li>
</ol>
<p>controller 调用的 service 类需要以 Service 结尾,例如 接口 ITestService 和 实现类 TestService,controller 的 api 方法被调用后生成链路数据.<br>
所有数据均进入 mongo。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 链路的 雪花Id，本次链路唯一</span></span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="comment">// 链路 当前的雪花Id</span></span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324387245330432</span>,</span><br><span class="line">    <span class="comment">// 链路状态</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路状态描述 start 表示本次链路开始</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Start&quot;</span>,</span><br><span class="line">    <span class="comment">// 上层链路雪花Id 0代表没有上层链路</span></span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态描述</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 下级链路雪花Id</span></span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324387245330433</span>,</span><br><span class="line">    <span class="comment">// 链路耗时</span></span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 链路调用的完整类名</span></span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 链路调用的类名</span></span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 调用的方法名</span></span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 本次链路的需要 从小到大排序</span></span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324394790883328</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 链路状态描述  Invoker 表示链路调用中</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="comment">// 与上一层链路的 LinkNext 对应</span></span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324387245330433</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324394790883329</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324394962849792</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324394790883329</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324394962849793</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395122233344</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Invoker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324394962849793</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395122233345</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395277422592</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="comment">//  链路状态描述  ToEndReturn 表示链路调用返回</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395122233345</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 链路调用返回的状态描述 CatchReturn 表示调用出现异常 但是被catch捕获</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395277422593</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">37</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITTService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395520692224</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395277422593</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395520692225</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">133</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;IInerService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324395667492864</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;ToEndReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395520692225</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;CatchReturn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">206324395667492865</span>,</span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">210</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="string">&quot;OdinCore.Services.InterfaceServices.ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="string">&quot;ITestService&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="string">&quot;show&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Id&quot;</span>: <span class="number">206324387228553216</span>,</span><br><span class="line">    <span class="attr">&quot;CurrentId&quot;</span>: <span class="number">206324396925784064</span>,</span><br><span class="line">    <span class="attr">&quot;LinkStatusEnum&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//  链路状态描述  Over 表示本次链路调用结束</span></span><br><span class="line">    <span class="attr">&quot;LinkStatusStr&quot;</span>: <span class="string">&quot;Over&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkPrevious&quot;</span>: <span class="number">206324395667492865</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusEnum&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 调用成功结束</span></span><br><span class="line">    <span class="attr">&quot;InvokerReturnStatusStr&quot;</span>: <span class="string">&quot;Success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LinkNext&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 本次调用 2558 ms</span></span><br><span class="line">    <span class="attr">&quot;ElapsedTime&quot;</span>: <span class="number">2558</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassFullName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerClassName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;InvokerMethodName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;LinkSort&quot;</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>解析</li>
</ol>
<p>通过链路数据得出结论：<br>
本次 api 调用：<br>
首先 调用 OdinCore.Services.InterfaceServices.ITestService 类的 show 方法,方法内部调用 OdinCore.Services.InterfaceServices.IInerService 类的 show 方法，<br>
然后又调用 OdinCore.Services.InterfaceServices.ITTService 类的 show 方法，结果调用出错，但是被 catch 捕获最后返回。</p>
<p>swagger 调用返回信息如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;SnowFlakeId&quot;</span>: <span class="string">&quot;206324387228553216&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ClassName&quot;</span>: <span class="string">&quot;System.Exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;ttservice throw&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Data&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;InnerException&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;HelpURL&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;StackTraceString&quot;</span>: <span class="string">&quot;   at OdinPlugs.OdinMvcCore.OdinFilter.ApiInvokerFilterAttribute.OnActionExecuted(ActionExecutedContext context) in /Users/odin/workSpace/github/odinmaf/OdinPlugs/OdinMvcCore/OdinFilter/ApiInvokFilterAttribute.cs:line 109\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeNextExceptionFilterAsync&gt;g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ExceptionContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeNextResourceFilter()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State&amp; next, Scope&amp; scope, Object&amp; state, Boolean&amp; isCompleted)\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.&lt;InvokeAsync&gt;g__Logged|17_1(ResourceInvoker invoker)\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.&lt;Invoke&gt;g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n   at Microsoft.AspNetCore.MiddlewareAnalysis.AnalysisMiddleware.Invoke(HttpContext httpContext)\n   at OdinPlugs.ApiLinkMonitor.OdinMiddleware.OdinExceptionMiddleware.Invoke(HttpContext context) in /Users/odin/workSpace/github/odinmaf/OdinPlugs.ApiLinkMonitor/OdinMiddleware/OdinExceptionMiddleware.cs:line 34&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;RemoteStackTraceString&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;RemoteStackIndex&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;ExceptionMethod&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;HResult&quot;</span>: <span class="number">-2146233088</span>,</span><br><span class="line">        <span class="attr">&quot;Source&quot;</span>: <span class="string">&quot;AspectCore.Core&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;WatsonBuckets&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;StatusCode&quot;</span>: <span class="string">&quot;sys-error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ErrorMessage&quot;</span>: <span class="string">&quot;系统异常，请联系管理员&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;系统异常:[sys-error]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过相同的雪花 Id 最后会清晰的分析出整个调用过程中的过程，并且如果能够结合 <a href="https://github.com/odinsam/OdinPlugs.OdinPlugs">OdinPlugs</a> 框架,可以监控到 controller 中 api 的调用记录，包括入参、时间、返回信息等会更加详细。</p>
<p>具体的代码在 <a href="https://github.com/odinsam/OdinPlugs.ApiLinkMonitor">GitHub</a> <a href="https://www.nuget.org/packages/OdinPlugs.ApiLinkMonitor"><img src="https://img.shields.io/nuget/v/OdinPlugs.ApiLinkMonitor" alt></a></p>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>链路追踪</tag>
        <tag>ApiLinkMonitor</tag>
      </tags>
  </entry>
  <entry>
    <title>IdentityServer结合Mysql</title>
    <url>//articles/7094.html</url>
    <content><![CDATA[<blockquote>
<p>IdentityServer4 是为 <a href="http://Asp.Net">Asp.Net</a> Core 2.0+ 系列量身打造的一款基于 OpenID Connect 和 OAuth 2.0 认证框架，官网提供了对应持久化到SQL Server数据库的方法。但是在持久化到Mysql数据库时，会出现 <font color="red">Specified key was too long</font> 的错误。我们可以通过重写 OnModelCreating 方法的方式解决问题。</p>
</blockquote>
<span id="more"></span>
<ol>
<li>
<p>使用 MySql.EntityFrameworkCore</p>
</li>
<li>
<p>ConfigureServices 添加代码如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> connectionString = <span class="string">@&quot;Server=ip;database=databasename;uid=userid;pwd=password;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> migrationsAssembly = <span class="keyword">typeof</span>(Startup).GetTypeInfo().Assembly.GetName().Name;</span><br><span class="line"><span class="keyword">var</span> mysqlVersion = <span class="keyword">new</span> MySqlServerVersion(<span class="keyword">new</span> Version(<span class="number">8</span>, <span class="number">0</span>, <span class="number">21</span>));</span><br><span class="line">services.AddIdentityServer()</span><br><span class="line">                .AddDeveloperSigningCredential()</span><br><span class="line">                <span class="comment">// 客户端和资源的数据库存储</span></span><br><span class="line">                <span class="comment">// ConfigurationDbContext</span></span><br><span class="line">                <span class="comment">// dotnet ef migrations add ConfigDbContext -c ConfigurationDbContext -o Data/Migrations/IdentityServer/ConfiguragtionDb</span></span><br><span class="line">                <span class="comment">// dotnet ef database update -c ConfigurationDbContext</span></span><br><span class="line">                .AddConfigurationStore(opt =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    opt.ConfigureDbContext = context =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        context.UseMySQL(_Options.DbEntity.ConnectionString, sql =&gt; sql.MigrationsAssembly(migrationsAssembly));</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 令牌和授权码的数据库存储</span></span><br><span class="line">                <span class="comment">// PersistedGrantDbContext</span></span><br><span class="line">                <span class="comment">// dotnet ef migrations add OperationContext -c PersistedGrantDbContext  -o Data/Migrations/IdentityServer/OperationDb</span></span><br><span class="line">                <span class="comment">// dotnet ef database update -c PersistedGrantDbContext</span></span><br><span class="line">                .AddOperationalStore(opt =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    opt.ConfigureDbContext = context =&gt;</span><br><span class="line">                        context.UseMySQL(_Options.DbEntity.ConnectionString, sql =&gt; sql.MigrationsAssembly(migrationsAssembly));</span><br><span class="line">                    opt.EnableTokenCleanup = <span class="literal">true</span>;</span><br><span class="line">                    opt.TokenCleanupInterval = <span class="number">30</span>;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            services.AddIdentityServerDbContext&lt;ConfigurationDbContext&gt;(options =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        options.ConfigureDbContext = builder =&gt; builder.UseMySQL(_Options.DbEntity.ConnectionString, db =&gt; db.MigrationsAssembly(migrationsAssembly));</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .AddIdentityServerDbContext&lt;PersistedGrantDbContext&gt;(options =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        options.ConfigureDbContext = builder =&gt; builder.UseMySQL(_Options.DbEntity.ConnectionString, db =&gt; db.MigrationsAssembly(migrationsAssembly));</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更改Identity中关于用户和角色的处理到Entityframework</span></span><br><span class="line">            <span class="comment">// dotnet ef migrations add UserStoreContext -c OdinIdentityEntities -o Data/Migrations/IdentityServer/UserDb</span></span><br><span class="line">            <span class="comment">// dotnet ef database update -c OdinIdentityEntities</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装包如下</p>
<p>IdentityServer4<br><br>
IdentityServer4.EntityFramework<br><br>
Microsoft.EntityFrameworkCore.Tools<br><br>
Microsoft.AspNet.Identity.EntityFramework<br><br>
Microsoft.EntityFrameworkCore<br><br>
IdentityServer4.AspNetIdentity<br></p>
</li>
<li>
<p>添加 ApplicationDbContext.cs、ApplicationUser.cs 和 ApplicationRole.cs</p>
</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationDbContext</span> : <span class="title">Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext</span>&lt;<span class="title">ApplicationUser</span>, <span class="title">ApplicationRole</span>, <span class="title">Guid</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplicationDbContext</span>(<span class="params">DbContextOptions&lt;ApplicationDbContext&gt; options</span>) : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;IdUser&gt; IdentityUsers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;IdUser&gt; IdentityRoles &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;IdentityUserClaim&gt; IdentityUserClaim &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 其他表</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnModelCreating(builder);</span><br><span class="line">        <span class="comment">// mysql 修改索引长度 解决  Specified key was too long; max key length is 3072 bytes</span></span><br><span class="line">        builder.Entity(<span class="string">&quot;Microsoft.AspNetCore.Identity.IdentityRole&quot;</span>, b =&gt;</span><br><span class="line">                  &#123;</span><br><span class="line">                      b.Property&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Id&quot;</span>)</span><br><span class="line">                          .HasColumnType(<span class="string">&quot;varchar(256)&quot;</span>);</span><br><span class="line">                  &#125;);</span><br><span class="line">       	builder.Entity(<span class="string">&quot;Microsoft.AspNetCore.Identity.IdentityUser&quot;</span>, b =&gt;</span><br><span class="line">              &#123;</span><br><span class="line">                  b.Property&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Id&quot;</span>)</span><br><span class="line">                      .HasColumnType(<span class="string">&quot;varchar(256)&quot;</span>);</span><br><span class="line">              &#125;);</span><br><span class="line">       builder.Entity(<span class="string">&quot;Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;string&gt;&quot;</span>, b =&gt;</span><br><span class="line">              &#123;</span><br><span class="line">                  b.Property&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;LoginProvider&quot;</span>)</span><br><span class="line">                          .HasColumnType(<span class="string">&quot;varchar(256)&quot;</span>);</span><br><span class="line"></span><br><span class="line">                  b.Property&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;ProviderKey&quot;</span>)</span><br><span class="line">                      .HasColumnType(<span class="string">&quot;varchar(256)&quot;</span>);</span><br><span class="line">              &#125;);</span><br><span class="line">       builder.Entity(<span class="string">&quot;Microsoft.AspNetCore.Identity.IdentityUserToken&lt;string&gt;&quot;</span>, b =&gt;</span><br><span class="line">                  &#123;</span><br><span class="line"></span><br><span class="line">                      b.Property&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;LoginProvider&quot;</span>)</span><br><span class="line">                          .HasColumnType(<span class="string">&quot;varchar(256)&quot;</span>);</span><br><span class="line"></span><br><span class="line">                      b.Property&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">                          .HasColumnType(<span class="string">&quot;varchar(256)&quot;</span>);</span><br><span class="line">                  &#125;);</span><br><span class="line">       builder.Entity(<span class="string">&quot;OdinOIS.Models.DbModels.IdentityUserStore.IdentityUserClaim&quot;</span>, b =&gt;</span><br><span class="line">              &#123;</span><br><span class="line">                  b.Property&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;ClaimId&quot;</span>)</span><br><span class="line">                      .HasColumnType(<span class="string">&quot;varchar(256)&quot;</span>);</span><br><span class="line"></span><br><span class="line">              &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationUser</span> : <span class="title">Microsoft.AspNetCore.Identity.IdentityUser</span>&lt;<span class="title">Guid</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//可以在这里扩展</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationRole</span> : <span class="title">Microsoft.AspNetCore.Identity.IdentityRole</span>&lt;<span class="title">Guid</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>
<p>控制台输入</p>
<p>dotnet ef migrations add ConfigDbContext -c ConfigurationDbContext -o Date\Migrations\IdentityServer\ConfiguragtionDb<br><br>
dotnet ef database update ConfigDbContext -c ConfigurationDbContext<br><br>
dotnet ef migrations add ConfigDbContext -c PersistedGrantDbContext -o Date\Migrations\IdentityServer\PersistedGrantDb<br><br>
dotnet ef database update ConfigDbContext -c PersistedGrantDbContext<br><br>
dotnet ef migrations add UserStoreContext -c OdinIdentityEntities -o Data/Migrations/IdentityServer/UserDb<br><br>
dotnet ef database update -c OdinIdentityEntities</p>
</li>
</ol>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>IdentityServer4</tag>
        <tag>Mysql</tag>
        <tag>.Net Core</tag>
      </tags>
  </entry>
  <entry>
    <title>Serilog封装扩展并写入Mysql</title>
    <url>//articles/b919.html</url>
    <content><![CDATA[<blockquote>
<p>Serilog是 .NET 中最著名的结构化日志类库。大多数情况下，中小型项目会将日志直接记录在一个对应的文件夹中比如Logs文件夹，并且可以按照日志的等级创建子文件夹比如errror、debug等等，再按照日期创建子文件最后按照日志文件大小上限做日志文件的划分。在一些大型项目中需要将日志写入数据库，文章讲述如何使用Serilog日志类库在mysql数据库中自动创建logs表并将日志写入表中。</p>
</blockquote>
<span id="more"></span> 
<ol>
<li>
<p>封装模型：</p>
<p>LogWriteFileModel.cs</p>
</li>
</ol>
   <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogWriteFileModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FileName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> FileSizeLimitBytes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> RollOnFileSizeLimit &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Shared &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> TimeSpan FlushToDiskInterval &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = TimeSpan.FromSeconds(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LogWriteToConsoleModel.cs</p>
   <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogWriteToConsoleModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OutputTemplate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> SystemConsoleTheme ConsoleTheme &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = SystemConsoleTheme.Colored;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LogWriteMySqlModel.cs</p>
   <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogWriteMySqlModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>扩展类</p>
<p>安装package Serilog.Sinks.MySQL, Version=4.0.0.0，LoggerConfigurationExtends.cs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LoggerConfigurationExtends</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoggerConfiguration <span class="title">OdinWriteLog</span>(<span class="params"><span class="keyword">this</span> LoggerConfiguration loggerConfiguration, LogWriteFileModel logWriteFileModel, LogWriteToConsoleModel logWriteToConsole, LogWriteMySqlModel logWriteMySqlModel</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> loggerConfiguration</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Debug, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             )</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Error, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             )</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Fatal, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             )</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Information, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             )</span><br><span class="line">             .WriteTo.OdinWrite(</span><br><span class="line">                 LogEventLevel.Warning, logWriteFileModel, logWriteToConsole, logWriteMySqlModel</span><br><span class="line">             );</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoggerConfiguration <span class="title">OdinWrite</span>(<span class="params"><span class="keyword">this</span> LoggerSinkConfiguration loggerSinkConfiguration, LogEventLevel logLevel, LogWriteFileModel logWriteFileModel, LogWriteToConsoleModel logWriteToConsole, LogWriteMySqlModel logWriteMySqlModel</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> loggerSinkConfiguration.Logger(fileLogger =&gt;</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">var</span> config = SerilogHelper.OdinWriteToFile(fileLogger, logLevel, logWriteFileModel);</span><br><span class="line">             <span class="keyword">if</span> (logWriteToConsole != <span class="literal">null</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                 config.WriteTo.Console(</span><br><span class="line">                     outputTemplate:</span><br><span class="line">                         <span class="built_in">string</span>.IsNullOrEmpty(logWriteToConsole.OutputTemplate)</span><br><span class="line">                         ?</span><br><span class="line">                         <span class="string">&quot;&#123;Timestamp:yyyy-MM-dd HH:mm:ss&#125; [&#123;Level&#125;] &#123;Message&#125;&#123;NewLine&#125;&#123;Exception&#125;&quot;</span></span><br><span class="line">                         :</span><br><span class="line">                         logWriteToConsole.OutputTemplate,</span><br><span class="line">                     theme: logWriteToConsole.ConsoleTheme</span><br><span class="line">                 );</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (logWriteMySqlModel != <span class="literal">null</span>)</span><br><span class="line">                 config.WriteTo.MySQL(connectionString: logWriteMySqlModel.ConnectionString);</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>封装类:  SerilogHelper.cs</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerilogHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoggerConfiguration <span class="title">OdinWriteToFile</span>(<span class="params">LoggerConfiguration fileLogger, LogEventLevel logLevel, LogWriteFileModel logWriteModel</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fileLogger.Filter</span><br><span class="line">               .ByIncludingOnly(p =&gt; p.Level.Equals(logLevel))</span><br><span class="line">               .WriteTo.File(</span><br><span class="line">                   path:</span><br><span class="line">                    <span class="built_in">string</span>.IsNullOrEmpty(logWriteModel.FileName) ?</span><br><span class="line">                        <span class="string">$&quot;logs/<span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyyMMdd&quot;</span>)&#125;</span>/log-<span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyyMMdd&quot;</span>)&#125;</span>-<span class="subst">&#123;logLevel.ToString()&#125;</span>.txt&quot;</span></span><br><span class="line">                        :</span><br><span class="line">                        logWriteModel.FileName,</span><br><span class="line">                   fileSizeLimitBytes: logWriteModel.FileSizeLimitBytes,</span><br><span class="line">                   rollOnFileSizeLimit: logWriteModel.RollOnFileSizeLimit,</span><br><span class="line">                   shared: logWriteModel.Shared,</span><br><span class="line">                   flushToDiskInterval: logWriteModel.FlushToDiskInterval</span><br><span class="line">               );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Log设置</span></span><br><span class="line">Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">    <span class="comment">// 最小的日志输出级别</span></span><br><span class="line">    .MinimumLevel.Information()</span><br><span class="line">    <span class="comment">//.MinimumLevel.Information ()</span></span><br><span class="line">    <span class="comment">// 日志调用类命名空间如果以 System 开头，覆盖日志输出最小级别为 Information</span></span><br><span class="line">    .MinimumLevel.Override(<span class="string">&quot;System&quot;</span>, LogEventLevel.Information)</span><br><span class="line">    <span class="comment">// 日志调用类命名空间如果以 Microsoft 开头，覆盖日志输出最小级别为 Information</span></span><br><span class="line">    .MinimumLevel.Override(<span class="string">&quot;Microsoft&quot;</span>, LogEventLevel.Information)</span><br><span class="line">    .OdinWriteLog(</span><br><span class="line">        <span class="keyword">new</span> LogWriteFileModel &#123; &#125;, <span class="keyword">new</span> LogWriteToConsoleModel &#123; &#125;, <span class="keyword">new</span> LogWriteMySqlModel &#123; ConnectionString = Configuration.GetSection(<span class="string">&quot;ProjectConfigOptions:DbEntity:ConnectionString&quot;</span>).Value &#125;</span><br><span class="line">    )</span><br><span class="line">    .CreateLogger();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>.Net Core</tag>
        <tag>Serilog</tag>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net中关于Json序列化Long类型数据的解决办法</title>
    <url>//articles/4ad7.html</url>
    <content><![CDATA[<blockquote>
<p>在分布式的项目中，我们的数据库Id不能再像以前一样使用int类型自动增长，这时候我们需要一个在网络当中都要能够保持唯一的值，通常情况我们会使用Guid来解决这个问题，但是作为string类型，他并不适合作为主键。尤其是在查询等需要索引操作的时候显得尤为重要。</p>
</blockquote>
<span id="more"></span>
<blockquote>
<ol>
<li>这时候我们通常会选择使用雪花Id来解决这个问题，他是一个能在网络当中能够保证唯一的数值number类型的数字，对应在csharp中是long类型。具体雪花Id的原理网上都有，这里直接上生成雪花Id的代码：</li>
</ol>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinSnowFlake</span> : <span class="title">IOdinSnowFlake</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 开始时间截((new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Utc)-Jan1st1970).TotalMilliseconds)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">long</span> twepoch;</span><br><span class="line">    <span class="comment">// 机器id所占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> workerIdBits = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 数据标识id所占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> datacenterIdBits = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> maxWorkerId = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="comment">// 支持的最大数据标识id，结果是31</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> maxDatacenterId = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="comment">// 序列在id中占的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> sequenceBits = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">// 数据标识id向左移17位(12+5)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="comment">// 机器ID向左移12位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="comment">// 时间截向左移22位(5+5+12)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line">    <span class="comment">// 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">long</span> sequenceMask = <span class="number">-1L</span> ^ (<span class="number">-1L</span> &lt;&lt; sequenceBits);</span><br><span class="line">    <span class="comment">// 数据中心ID(0~31)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> datacenterId &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 工作机器ID(0~31)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> workerId &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 毫秒内序列(0~4095)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> sequence &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">// 上次生成ID的时间截</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> lastTimestamp &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt; dicContainer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 雪花ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;datacenterId&quot;&gt;</span>数据中心ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;workerId&quot;&gt;</span>工作机器ID<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinSnowFlake</span>(<span class="params"><span class="built_in">long</span> datacenterId, <span class="built_in">long</span> workerId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.twepoch = (<span class="built_in">long</span>)((<span class="keyword">new</span> DateTime(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc) - Jan1st1970).TotalMilliseconds);</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="built_in">string</span>.Format(<span class="string">&quot;datacenter Id can&#x27;t be greater than &#123;0&#125; or less than 0&quot;</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="built_in">string</span>.Format(<span class="string">&quot;worker Id can&#x27;t be greater than &#123;0&#125; or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">        <span class="keyword">this</span>.sequence = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">this</span>.lastTimestamp = <span class="number">-1L</span>;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer == <span class="literal">null</span>)</span><br><span class="line">            dicContainer = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitDic</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer == <span class="literal">null</span>)</span><br><span class="line">            dicContainer = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">long</span>, <span class="built_in">long</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearDic</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dicContainer != <span class="literal">null</span>)</span><br><span class="line">            dicContainer.Clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获得下一个ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">NextId</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (<span class="keyword">this</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span> timestamp = GetCurrentTimestamp();</span><br><span class="line">            <span class="keyword">if</span> (timestamp &gt; lastTimestamp) <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = <span class="number">0L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (timestamp == lastTimestamp) <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">                <span class="keyword">if</span> (sequence == <span class="number">0</span>) <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = GetNextTimestamp(lastTimestamp); <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//当前时间小于上一次ID生成的时间戳，证明系统时钟被回拨，此时需要做回拨处理</span></span><br><span class="line">            &#123;</span><br><span class="line">                sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">                <span class="keyword">if</span> (sequence &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = lastTimestamp; <span class="comment">//停留在最后一次时间戳上，等待系统时间追上后即完全度过了时钟回拨问题。</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">                &#123;</span><br><span class="line">                    timestamp = lastTimestamp + <span class="number">1</span>; <span class="comment">//直接进位到下一个毫秒</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//throw new Exception(string.Format(&quot;Clock moved backwards.  Refusing to generate id for &#123;0&#125; milliseconds&quot;, lastTimestamp - timestamp));</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lastTimestamp = timestamp; <span class="comment">//上次生成ID的时间截</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">            <span class="keyword">var</span> id = ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |</span><br><span class="line">                (datacenterId &lt;&lt; datacenterIdShift) |</span><br><span class="line">                (workerId &lt;&lt; workerIdShift) |</span><br><span class="line">                sequence;</span><br><span class="line">            <span class="keyword">if</span> (!dicContainer.ContainsKey(id))</span><br><span class="line">            &#123;</span><br><span class="line">                dicContainer.Add(id, id);</span><br><span class="line">                <span class="keyword">return</span> id;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> NextId();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解析雪花ID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">AnalyzeId</span>(<span class="params"><span class="built_in">long</span> Id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">var</span> timestamp = (Id &gt;&gt; timestampLeftShift);</span><br><span class="line">        <span class="keyword">var</span> time = Jan1st1970.AddMilliseconds(timestamp + twepoch);</span><br><span class="line">        sb.Append(time.ToLocalTime().ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:fff&quot;</span>));</span><br><span class="line">        <span class="keyword">var</span> datacenterId = (Id ^ (timestamp &lt;&lt; timestampLeftShift)) &gt;&gt; datacenterIdShift;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + datacenterId);</span><br><span class="line">        <span class="keyword">var</span> workerId = (Id ^ ((timestamp &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift))) &gt;&gt; workerIdShift;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + workerId);</span><br><span class="line">        <span class="keyword">var</span> sequence = Id &amp; sequenceMask;</span><br><span class="line">        sb.Append(<span class="string">&quot;_&quot;</span> + sequence);</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lastTimestamp&quot;&gt;</span>上次生成ID的时间截<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>当前时间戳<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">GetNextTimestamp</span>(<span class="params"><span class="built_in">long</span> lastTimestamp</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">long</span> timestamp = GetCurrentTimestamp();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp)</span><br><span class="line">        &#123;</span><br><span class="line">            timestamp = GetCurrentTimestamp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取当前时间戳</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">long</span> <span class="title">GetCurrentTimestamp</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">long</span>)(DateTime.UtcNow - Jan1st1970).TotalMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DateTime Jan1st1970 = <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>代码解释：</strong></p>
<ol>
<li>
<p>提供了构造函数，其中datacenterId为当前数据中心Id:一般从1开始。workerId是机器Id,<font color="red">需要注意的是在网络节点当中的服务器，这个Id不能重复</font></p>
</li>
<li>
<p>代码的 NextId() 方法将会生成一个 18位长的long类型的雪花Id。</p>
</li>
<li>
<p>AnalyzeId() 方法可以简单的解析一个long的数值是不是符合雪花Id的规范。<font color="red">这个解析不精准，只能判断格式大致是否正确</font>具体解析规则可以看代码。</p>
</li>
<li>
<p>有了这个Id，我们通常可以开心的在代码当中以application/json格式返回一个对象，比如</p>
</li>
</ol>
<p><img src="/images/4ad7/code.png" alt="code"></p>
<p>输出的结果是</p>
<p><img src="/images/4ad7/result.png" alt="result"></p>
<p><strong>这是因为 JavaScript 数值精度是32位，如果整数数度超过32位，就会被当作浮点数处理。换句话说，如果从服务端生成的JSON，某个值是64位整数，传到前端JavaScript，再传回服务端，不做任何运算，都可能出现失真。</strong></p>
<p>解决问题的办法：将long作为string类型序列化输出 代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Stu</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">JsonConverter(typeof(JsonConverterLong))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JsonConverterLong 类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonConverterLong</span> : <span class="title">JsonConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否可以转换</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;objectType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">CanConvert</span>(<span class="params">Type objectType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 读json</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;reader&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;objectType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;existingValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serializer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">object</span> <span class="title">ReadJson</span>(<span class="params">JsonReader reader, Type objectType, <span class="built_in">object</span> existingValue, JsonSerializer serializer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((reader.ValueType == <span class="literal">null</span> || reader.ValueType == <span class="keyword">typeof</span>(<span class="built_in">long</span>?)) &amp;&amp; reader.Value == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">long</span>.TryParse(reader.Value != <span class="literal">null</span> ? reader.Value.ToString() : <span class="string">&quot;&quot;</span>, <span class="keyword">out</span> <span class="built_in">long</span> <span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 写json</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;writer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;serializer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteJson</span>(<span class="params">JsonWriter writer, <span class="built_in">object</span> <span class="keyword">value</span>, JsonSerializer serializer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</span><br><span class="line">            writer.WriteValue(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            writer.WriteValue(<span class="keyword">value</span> + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Vue2.0 - 01. hello vue</title>
    <url>//articles/deab.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第1章: 初始 vue.</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<ol>
<li>需要创建vue实例，且传入一个配置对象</li>
<li>root容器中的代码需要符合html规范，只是加入了vue语法</li>
<li>root容器立的代码被称为 vue 模板</li>
<li>插值语法 {{ $1 }} 中的内容需要是 js 表达式，且内容可以直接读取到配置的data中所有的属性</li>
<li>vue实例和容器需要时一一对应</li>
<li>一旦 data 中的数据发生变化，页面会自动更新</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>01.hello案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1.  需要创建vue实例，且传入一个配置对象 </span></span><br><span class="line"><span class="comment">            2.  root容器中的代码需要符合html规范，只是加入了vue语法</span></span><br><span class="line"><span class="comment">            3.  root容器立的代码被称为 vue 模板</span></span><br><span class="line"><span class="comment">            4.  插值语法 &#123;&#123; $1 &#125;&#125; 中的内容需要是 js 表达式，且内容可以直接读取到配置的data中所有的属性</span></span><br><span class="line"><span class="comment">            5.  vue实例和容器需要时一一对应</span></span><br><span class="line"><span class="comment">            6.  一旦 data 中的数据发生变化，页面会自动更新</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当前语法为 vue 的插值语法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建vue实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//指定当前vue实例为那个容器服务， css选择器选择对应容器</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义对应的数据，可以在对应的容器 el 中使用</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>插值语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 02. 模板语法</title>
    <url>//articles/1660.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第2章: vue 的模板语法.</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<p>模板语法有插值语法和指令语法<br>
指令语法常用语解析标签 包括标签属性、标签内容、标签事件<br>
v-bind绑定</p>
<ol>
<li>将 “”中的内容即 url 当做js表达式， url在data中找到对应的链接，所以绑定在a标签的href属性上</li>
<li>v-bind 可以简写为 :</li>
<li>v-bind 仅可以绑定数据，单向数据绑定（从data中获取数据绑定到页面中），页面中的数据发生变化，无法修改data中的内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>02.模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模板语法有插值语法和指令语法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插值语法一般用于显示标签的内容 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法: &#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                指令语法常用语解析标签 包括标签属性、标签内容、标签事件</span></span><br><span class="line"><span class="comment">                v-bind绑定</span></span><br><span class="line"><span class="comment">                1. 将 “”中的内容即 url 当做js表达式， url在data中找到对应的链接，所以绑定在a标签的href属性上</span></span><br><span class="line"><span class="comment">                2. v-bind 可以简写为 : </span></span><br><span class="line"><span class="comment">                3. v-bind 仅可以绑定数据，单向数据绑定（从data中获取数据绑定到页面中），页面中的数据发生变化，无法修改data中的内容</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>odinsam 的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;Date.now()&quot;</span>&gt;</span>当前时间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 03. 数据绑定</title>
    <url>//articles/f50b.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第3章: vue 的数据绑定</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<p>vue有单向数据绑定和双向数据绑定两种</p>
<ol>
<li>单向绑定 v-bind 数据只能从data流向页面</li>
<li>双向绑定 v-model 数据不仅可以从data流向页面，当页面发生改变同样可以修改data的内容</li>
<li>双向绑定一般都应用在表单元素 如 input select 等</li>
<li>v-model:value 可以简写为 v-model 因为 v-model默认收集的就是valuede值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>03.数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            vue有单向数据绑定和双向数据绑定两种</span></span><br><span class="line"><span class="comment">            1. 单向绑定 v-bind 数据只能从data流向页面</span></span><br><span class="line"><span class="comment">            2. 双向绑定 v-model 数据不仅可以从data流向页面，当页面发生改变同样可以修改data的内容</span></span><br><span class="line"><span class="comment">            3. 双向绑定一般都应用在表单元素 如 input select 等</span></span><br><span class="line"><span class="comment">            4. v-model:value 可以简写为 v-model 因为 v-model默认收集的就是valuede值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>单向数据绑定 : v-bind 的简写<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>双向数据绑定 v-model<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                如下代码是错误的： [Vue warn]: Failed to resolve directive: modle</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-modle:value</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">title</span>: <span class="string">&#x27;hello vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="效果如图"><a class="markdownIt-Anchor" href="#效果如图"></a> 效果如图</h4>
<img src="/images/03.databind.gif" style="width:900px;height:700px">]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>数据绑定</tag>
        <tag>v-bind</tag>
        <tag>v-model</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 04. el与data的两种写法</title>
    <url>//articles/3899.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第4章: el 与 data的两种写法</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<p>el 与 data 有两种写法<br>
el 的两种写法:</p>
<pre><code>1. 在new vue(&#123; el:'#root' &#125;) 时同时指定el的容器 
2. 在创建vue后 通过实例对象指定el的值  vm.$mount('#root')
</code></pre>
<p>data 的两种写法</p>
<pre><code>1. 通过对象的形式 data:&#123; title:'hello vue' &#125;
2. 使用函数的形式 data() &#123; return &#123; title:'hello vue'  &#125; &#125;
</code></pre>
<p>后期使用函数式组件时，data必须使用函数形式</p>
<h3 id="font-colorred重点注意font"><a class="markdownIt-Anchor" href="#font-colorred重点注意font"></a> <font color="red">重点注意</font>:</h3>
<h4 id="font-colorred由vue管理的函数例如-data-的函数式写法一定不能写箭头函数否则this指向的实例就会是window对象font"><a class="markdownIt-Anchor" href="#font-colorred由vue管理的函数例如-data-的函数式写法一定不能写箭头函数否则this指向的实例就会是window对象font"></a> <font color="red">由vue管理的函数(例如 data 的函数式写法)，一定不能写箭头函数，否则this指向的实例就会是window对象</font></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>04.el与data的两种写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>通过vue的实例对象挂载数据:&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            el 与 data 有两种写法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            el 的两种写法:</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 在new vue(&#123; el:&#x27;#root&#x27; &#125;) 时同时指定el的容器 </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 在创建vue后 通过实例对象指定el的值  vm.$mount(&#x27;#root&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            data 的两种写法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 通过对象的形式 data:&#123; title:&#x27;hello vue&#x27; &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 使用函数的形式 data() &#123; return &#123; title:&#x27;hello vue&#x27;  &#125; &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            后期使用函数式组件时，data必须使用函数形式</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            重点注意: 由vue管理的函数(例如 data 的函数式写法)，一定不能写箭头函数，否则this指向的实例就会是window对象</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 写法1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// el: &#x27;#root&#x27;,    // 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用data对象形式</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// data: &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     title: &#x27;hello vue&#x27;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     url: &#x27;http://www.odinsam.com&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用函数式</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">title</span>: <span class="string">&#x27;hello vue !!&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 写法2</span></span></span><br><span class="line"><span class="javascript">        vm.$mount(<span class="string">&#x27;#root&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>el</tag>
        <tag>data</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 06. 数据代理-Object.defineProperty</title>
    <url>//articles/7c3d.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第6章: 数据代理-Object.defineProperty</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user=&#123;<span class="attr">name</span>:<span class="string">&#x27;odinsam&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(user,<span class="string">&#x27;age&#x27;</span>,&#123;<span class="attr">value</span>:<span class="number">20</span>,<span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="attr">writable</span>:<span class="literal">true</span>,<span class="attr">configurable</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line"><span class="comment">// user的key-value    key:name    value:odinsam</span></span><br><span class="line"><span class="comment">// user的key-value    key:sex    value:男</span></span><br><span class="line"><span class="comment">//user的key-value    key:age    value:20</span></span><br><span class="line"></span><br><span class="line">user.age=<span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">user.age</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="keyword">delete</span> user.age</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line">user的key-value    key:name    value:odinsam</span><br><span class="line">user的key-value    key:sex    value:男</span><br></pre></td></tr></table></figure>
<h3 id="objectdefineproperty的-get-set-用法"><a class="markdownIt-Anchor" href="#objectdefineproperty的-get-set-用法"></a> Object.defineProperty的 get set 用法</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> user=&#123;<span class="attr">name</span>:<span class="string">&#x27;odinsam&#x27;</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(user,<span class="string">&#x27;age&#x27;</span>,&#123; <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> number &#125; <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123; number=value &#125; &#125;)</span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line"><span class="comment">// user的key-value    key:name    value:odinsam</span></span><br><span class="line"><span class="comment">// user的key-value    key:sex    value:男</span></span><br><span class="line"><span class="comment">//user的key-value    key:age    value:20</span></span><br><span class="line"></span><br><span class="line">user.age=<span class="number">30</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">user.age</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="keyword">delete</span> user.age</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> user)&#123; <span class="built_in">console</span>.log(<span class="string">`user的key-value    key:<span class="subst">$&#123;key&#125;</span>    value:<span class="subst">$&#123;user[key]&#125;</span>`</span>) &#125;</span><br><span class="line">user的key-value    key:name    value:odinsam</span><br><span class="line">user的key-value    key:sex    value:男</span><br></pre></td></tr></table></figure>
<h3 id="原始的数据代理-obj2通过数据代理获取obj1的x属性"><a class="markdownIt-Anchor" href="#原始的数据代理-obj2通过数据代理获取obj1的x属性"></a> 原始的数据代理 obj2通过数据代理获取obj1的x属性</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原始的数据代理</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">y</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj1.x;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">        obj1.x = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="vue中的数据代理"><a class="markdownIt-Anchor" href="#vue中的数据代理"></a> vue中的数据代理</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>06.数据代理-Object.defineProperty<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        vue中的数据代理</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        1. 通过vm对象来代理data对象中属性的操作 getter setter</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        2. 更加方便的操作data中的数据</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        3. 通过Object.defineProperty()把data对象中所有的属性添加到vm上</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        4. 为每一个添加到wm上的属性都指定 getter、setter方法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        5. 在getter、setter内部操作data中对应的属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        6. vm._data中的属性不是数据代理而是数据劫持，通过数据劫持监听数据改变从而render页面</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 05. mvvm模型</title>
    <url>//articles/a38e.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第5章: mvvm模型</p>
<span id="more"></span>
<img src="/images/05.mvvm.png" style="width:700px;height:300px">
<figure class="highlight plaintext"><figcaption><span>MVVM 解释</span></figcaption><table><tr><td class="code"><pre><span class="line">M - 模型 即 data 中的数据</span><br><span class="line">V - 视图 即 模板 </span><br><span class="line">VM - viewModel 即 vue的实例对象</span><br></pre></td></tr></table></figure>
<h4 id="data-bindings-数据以对象的形式存储在data中通过databindings将数据绑定在-view-页面中"><a class="markdownIt-Anchor" href="#data-bindings-数据以对象的形式存储在data中通过databindings将数据绑定在-view-页面中"></a> data bindings 数据以对象的形式存储在data中，通过databindings将数据绑定在 view 页面中</h4>
<h4 id="view页面改变通过-dom-listeners-修改-data中的数据"><a class="markdownIt-Anchor" href="#view页面改变通过-dom-listeners-修改-data中的数据"></a> view页面改变，通过 dom listeners 修改 data中的数据</h4>
<h4 id="data中所有的属性最后都出现在vm立"><a class="markdownIt-Anchor" href="#data中所有的属性最后都出现在vm立"></a> data中所有的属性，最后都出现在vm立</h4>
<h4 id="vm所有的属性即vue原型的属性在vue模板中都可以直接使用"><a class="markdownIt-Anchor" href="#vm所有的属性即vue原型的属性在vue模板中都可以直接使用"></a> vm所有的属性即vue原型的属性，在vue模板中都可以直接使用</h4>
]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>mvvm</tag>
        <tag>ViewModel</tag>
        <tag>view</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 08. 事件修饰符</title>
    <url>//articles/48de.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第8章: 事件修饰符</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<ol>
<li>prevent 阻止默认事件</li>
<li>stop 阻止事件冒泡</li>
<li>once 事件只触发一次</li>
<li>capture 事件捕获模式 和 冒泡模式刚好相反</li>
<li>self 是有event.target 是当前操作的元素时才触发</li>
<li>passive 事件的默认行为立即执行，无需等待回调完毕 移动端常用</li>
<li>修饰符可以连续写，例如 @click.stop.prevent</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>08. 事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.parentdv</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.childdv</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. prevent 阻止默认事件</span></span><br><span class="line"><span class="comment">            2. stop 阻止事件冒泡</span></span><br><span class="line"><span class="comment">            3. once 事件只触发一次</span></span><br><span class="line"><span class="comment">            4. capture 事件捕获模式 和 冒泡模式刚好相反</span></span><br><span class="line"><span class="comment">            5. self 是有event.target 是当前操作的元素时才触发</span></span><br><span class="line"><span class="comment">            6. passive 事件的默认行为立即执行，无需等待回调完毕</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue  事件修饰符<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--阻止默认事件    @click.prevent--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://odinsam.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickShow&quot;</span>&gt;</span></span><br><span class="line">                点击弹窗，阻止默认事件 - @click.prevent &lt;/a</span><br><span class="line">            &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--阻止事件冒泡    @click.stop--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parentdv&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;parentClick&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>事件捕获模式 - @click.capture<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;childdv&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;childClick&quot;</span>&gt;</span></span><br><span class="line">                    阻止事件冒泡 - @click.stop</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事件只触发一次    @click.once--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;btnOnceClick&quot;</span>&gt;</span></span><br><span class="line">                事件只触发一次 - @click.once&lt;/button</span><br><span class="line">            &gt;<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当event.target==self才触发事件    @click.self--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parentdv&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;dvselfClick&quot;</span>&gt;</span></span><br><span class="line">                @click.self=&quot;dvselfClick&quot;</span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;childBtnClick&quot;</span>&gt;</span></span><br><span class="line">                    按钮点击会冒泡，但div的click有self修饰符，所以不触发div的click事件</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事件的默认行为立即执行，无需等待回调完毕    @click.passive--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>显示姓名&#123;&#123;showName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.passive</span>=<span class="string">&quot;btnClickPassive&quot;</span>&gt;</span>@click.passive<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">userName</span>: <span class="string">&#x27;odinsam&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">showName</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">clickShow</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;function clickShow&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">parentClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;parent click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">childClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;child click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnOnceClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;click once&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dvselfClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;div self click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">childBtnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;child Btn Click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnClickPassive</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;#&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.showName = <span class="built_in">this</span>.userName;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>prevent</tag>
        <tag>stop</tag>
        <tag>once</tag>
        <tag>capture</tag>
        <tag>self</tag>
        <tag>passive</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 07. 事件处理</title>
    <url>//articles/ec6.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第7章: 事件处理</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<ol>
<li>事件绑定 使用 v-on: 绑定事件</li>
<li>click事件可以简写为 @click</li>
<li>无参数的事件处理方法 会有一个默认参数 event 代表 eventObject</li>
<li>带参数的时间处理方法 也可以带 eventObject 使用 $event传递</li>
<li>事件处理函数需要配置在methods中，最终会体现在vm上</li>
<li>事件处理函数都是被vue管理的函数，this指向vm或者组件对象实例。不可以使用箭头函数，否则this指向window</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>07.事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                1. 事件绑定 使用 v-on: 绑定事件</span></span><br><span class="line"><span class="comment">                2. click事件可以简写为 @click</span></span><br><span class="line"><span class="comment">                3. 无参数的事件处理方法 会有一个默认参数 event 代表 eventObject</span></span><br><span class="line"><span class="comment">                4. 带参数的时间处理方法 也可以带 eventObject 使用 $event传递</span></span><br><span class="line"><span class="comment">                5. 事件处理函数需要配置在methods中，最终会体现在vm上</span></span><br><span class="line"><span class="comment">                6. 事件处理函数都是被vue管理的函数，this指向vm或者组件对象实例。不可以使用箭头函数，否则this指向window</span></span><br><span class="line"><span class="comment">                7. </span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue 事件处理<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfoWithParams(userName,$event)&quot;</span>&gt;</span></span><br><span class="line">                提示信息2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">userName</span>: <span class="string">&#x27;odinsam&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">showInfo</span>(<span class="params">event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;无参处理函数 showInfo&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">showInfoWithParams</span>(<span class="params">un, event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;带参处理函数 showInfoWithParams&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">`input userName: <span class="subst">$&#123;un&#125;</span>, event对象:<span class="subst">$&#123;event&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>v-on</tag>
        <tag>@click</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 09. 键盘事件</title>
    <url>//articles/42b7.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第9章: 键盘事件</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<ol>
<li>vue 中常用的按键别名<br>
回车    enter<br>
删除    delete<br>
退格    backSpace<br>
退出    esc<br>
空格    space<br>
换行    tab<br>
上      up<br>
下      down<br>
左      left<br>
右      right</li>
<li>vue未提供别名的按键可以使用按键的原始的key去绑定，但要注意转换为  kebab-case 例如 CapsLock caps-lock</li>
<li>可以使用 @keyup.按键别名 绑定对应的按键事件</li>
<li>tab无法使用keyup绑定 需要使用keydown绑定</li>
<li>系统修饰按键  ctrl   alt     shift   meta
<ol>
<li>如果配合keyup使用：按下系统修饰键，再按下其他键，随后释放其他键，事件才会触发</li>
<li>如果配合keydown使用 正常触发</li>
</ol>
</li>
<li>也可以使用keyCode去绑定，但不推荐  @keyup.keyCode 有可能不同系统不同键盘的keycode不一样导致一些问题</li>
<li>Vue.config.keyCodes 可以自定义键名   Vue.config.keyCodes.自定义名 = 键码<br>
Vue.config.keyCodes.huiche = 13  指定huiche 为按键13 即enter</li>
<li>按键别名可以组合使用 例如  @keyup.ctrl.y 即ctrl+y 触发事件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>09.键盘事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. vue 中常用的按键别名</span></span><br><span class="line"><span class="comment">                回车    enter</span></span><br><span class="line"><span class="comment">                删除    delete </span></span><br><span class="line"><span class="comment">                退格    backSpace</span></span><br><span class="line"><span class="comment">                退出    esc</span></span><br><span class="line"><span class="comment">                空格    space</span></span><br><span class="line"><span class="comment">                换行    tab</span></span><br><span class="line"><span class="comment">                上      up</span></span><br><span class="line"><span class="comment">                下      down</span></span><br><span class="line"><span class="comment">                左      left</span></span><br><span class="line"><span class="comment">                右      right</span></span><br><span class="line"><span class="comment">            2. vue未提供别名的按键可以使用按键的原始的key去绑定，但要注意转换为  kebab-case 例如 CapsLock caps-lock</span></span><br><span class="line"><span class="comment">            3. 可以使用 @keyup.按键别名 绑定对应的按键事件</span></span><br><span class="line"><span class="comment">            4. tab无法使用keyup绑定 需要使用keydown绑定</span></span><br><span class="line"><span class="comment">            5. 系统修饰按键  ctrl   alt     shift   meta</span></span><br><span class="line"><span class="comment">                1. 如果配合keyup使用：按下系统修饰键，再按下其他键，随后释放其他键，事件才会触发</span></span><br><span class="line"><span class="comment">                2. 如果配合keydown使用 正常触发</span></span><br><span class="line"><span class="comment">            6. 也可以使用keyCode去绑定，但不推荐  @keyup.keyCode 有可能不同系统不同键盘的keycode不一样导致一些问题</span></span><br><span class="line"><span class="comment">            7. Vue.config.keyCodes 可以自定义键名   Vue.config.keyCodes.自定义名 = 键码</span></span><br><span class="line"><span class="comment">                    Vue.config.keyCodes.huiche = 13  指定huiche 为按键13 即enter</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue 键盘事件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lbl&quot;</span>&gt;</span>按键按下的是 &#123;&#123;inputKey&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup</span>=<span class="string">&quot;showinfo&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">userName</span>: <span class="string">&#x27;odinsam&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">inputKey</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">showinfo</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.inputKey = <span class="string">`e.key:<span class="subst">$&#123;e.key&#125;</span>      e.keyCode=<span class="subst">$&#123;e.keyCode&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>keydown</tag>
        <tag>keyup</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 10. Computed计算属性</title>
    <url>//articles/3442.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第10章: computed计算属性</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="computed计算属性"><a class="markdownIt-Anchor" href="#computed计算属性"></a> Computed计算属性</h4>
<ol>
<li>get 当模板读取fullname时，get会被调用，且返回值作为fullname的值</li>
<li>get 的调用时机：  1. 初次读取fullname时  2.所有依赖的数据发生变化时 firstName  lastName</li>
<li>相对于method实现，如果模板多个位置需要显示fullname时 method的方法会调用多次 而计算属性的get只调用一次</li>
<li>计算属性最终会出现在vm上可以直接使用，例如使用button直接修改fullname</li>
<li>如果修改计算属性，必须有set方法</li>
<li>如果计算属性只有get没有set则可以简写</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>10.计算属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue 计算属性<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>firstname&lt;/span</span><br><span class="line">            &gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>lastname&lt;/span</span><br><span class="line">            &gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>全名:&#123;&#123;fullname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>直接修改计算属性fullname<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">firstName</span>: <span class="string">&#x27;odin&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">lastName</span>: <span class="string">&#x27;sam&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.fullname = <span class="string">&#x27;suiji-shu&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. get 当模板读取fullname时，get会被调用，且返回值作为fullname的值</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. get 的调用时机：  1. 初次读取fullname时  2.所有依赖的数据发生变化时 firstName  lastName</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                3. 相对于method实现，如果模板多个位置需要显示fullname时 method的方法会调用多次 而计算属性的get只调用一次</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                4. 计算属性最终会出现在vm上可以直接使用，例如使用button直接修改fullname</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                5. 如果修改计算属性，必须有set方法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                */</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">fullname</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName;</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> arr = value.split(<span class="string">&#x27;-&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.firstName = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.lastName = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 6. 如果计算属性只有get没有set则可以简写</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// fullname()&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     return this.firstName + &#x27;-&#x27; + this.lastName;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 11. Watch监视属性</title>
    <url>//articles/88f9.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第11章: 监视属性</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="watch监视属性"><a class="markdownIt-Anchor" href="#watch监视属性"></a> Watch监视属性</h4>
<ol>
<li>当监视的属性发生变化时，回调函数 handler 会自动调用进行相关操作</li>
<li>监视的属性必须存在，才可以监视</li>
<li>监视属性两种写法
<ol>
<li>在new vue时配置watch</li>
<li>在new vue创建完成后，通过 vm.$watch(‘监视的属性’,{ //监视的配置内容 })</li>
</ol>
</li>
<li>监视多级结构中某个属性的变化 对象.属性 监视</li>
<li>watch 默认不检测对象内部值的改变,可以通过 deep:true 进行深度监视</li>
<li>监视属性不光可以监视data中的属性、对象也可以监视计算属性</li>
<li>监视属性可以简写，但代价是不能再配置 immediate、deep</li>
</ol>
<figure class="highlight js"><figcaption><span>监视属性简写</span></figcaption><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">	<span class="function"><span class="title">personState</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//回调处理函数</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">vm.$watch(<span class="string">&#x27;personState&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//回调处理函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>computed 计算属性能完成的watch都可以完成。watch可以完成的computed不一定能完成。例如：watch可以进行异步操作</li>
<li>所有被vue管理的函数最好写成普通函数，这样this指向才vm或者组件对象实例</li>
<li>所有不被vue管理的函数（定时器，ajax回调等）最好写成箭头函数，这样this指向才vm或者组件对象实例</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>11.监视属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>vue 监视属性<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>人生真的是&#123;&#123;personState&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>修改人生的状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>对象内容x &#123;&#123;obj.x&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnXClick&quot;</span>&gt;</span>btn add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>对象内容y &#123;&#123;obj.y&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnYClick&quot;</span>&gt;</span>btn add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">state</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">obj</span>: &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.state = !<span class="built_in">this</span>.state;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnXClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.obj.x ++;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnYClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.obj.y++;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">personState</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.state ? <span class="string">&#x27;大起&#x27;</span> : <span class="string">&#x27;大落&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            1. 当监视的属性发生变化时，回调函数 handler 会自动调用进行相关操作</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            2. 监视的属性必须存在，才可以监视</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            3. 监视属性两种写法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                1. 在new vue时配置watch</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                2. 在new vue创建完成后，通过 vm.$watch(&#x27;监视的属性&#x27;,&#123; //监视的配置内容 &#125;) </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            4. 监视多级结构中某个属性的变化 对象.属性 监视</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            5. watch 默认不检测对象内部值的改变,可以通过 deep:true 进行深度监视</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            6. 监视属性不光可以监视data中的属性、对象也可以监视计算属性</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            7. 监视属性可以简写，但代价是不能再配置 immediate、deep</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                watch:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    personState(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        //回调处理函数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                vm.$watch(&#x27;personState&#x27;,function(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    //回调处理函数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            8. computed 计算属性能完成的watch都可以完成。watch可以完成的computed不一定能完成。例如：watch可以进行异步操作</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            备注：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            所有被vue管理的函数最好写成普通函数，这样this指向才vm或者组件对象实例</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            所有不被vue管理的函数（定时器，ajax回调等）最好写成箭头函数，这样this指向才vm或者组件对象实例</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            */</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">personState</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`watch: 计算属性 personState 被修改了，原始值是:<span class="subst">$&#123;oldValue&#125;</span> 新值为:<span class="subst">$&#123;newValue&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">state</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//初始化时让 handler 调用一次</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`watch: state 被修改了，原始值是:<span class="subst">$&#123;oldValue&#125;</span> 新值为:<span class="subst">$&#123;newValue&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;obj.x&#x27;</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//初始化时让 handler 调用一次</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`watch: obj.x 被修改了，原始值是:<span class="subst">$&#123;oldValue&#125;</span> 新值为:<span class="subst">$&#123;newValue&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// watch 默认不检测对象内部值的改变,可以通过 deep:true 进行深度监视</span></span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;obj&#x27;</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">deep</span>:<span class="literal">true</span>,  <span class="comment">//进行深度监视</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// immediate: true, //初始化时让 handler 调用一次</span></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">`watch: obj 被修改了 obj.x:<span class="subst">$&#123;newValue.x&#125;</span>    obj.x:<span class="subst">$&#123;newValue.y&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//监视属性的简写 </span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">personState</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`watch: 计算属性 personState 被修改了，原始值是:<span class="subst">$&#123;oldValue&#125;</span> 新值为:<span class="subst">$&#123;newValue&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//监视属性的第二种写法 首先保证vm创建完毕</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// vm.$watch(&#x27;state&#x27;, &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     immediate: true, //初始化时让 handler 调用一次</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         console.log(</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//             `state 被修改了，原始值是:$&#123;oldValue&#125; 新值为:$&#123;newValue&#125;`</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         );</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>watch</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 12. 样式的绑定</title>
    <url>//articles/5a60.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第12章: 样式的绑定</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<ol>
<li>:class=’’ 可以绑定对应的class样式  可以是 字符串、数组、对象</li>
<li>:style=’’ 可以绑定对应的style样式  可以是 直接绑定或者是数组、对象</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>12.样式绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.dvbasic</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.dv1</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.dv2</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: coral;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.dv3</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">222</span>, <span class="number">216</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.ddvv1</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">33</span>, <span class="number">32</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.ddvv2</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">241</span>, <span class="number">227</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.ddvv3</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. :class=&#x27;&#x27; 可以绑定对应的class样式  可以是 字符串、数组、对象</span></span><br><span class="line"><span class="comment">            2. :style=&#x27;&#x27; 可以绑定对应的style样式  可以是 直接绑定或者是数组、对象</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;dvClass&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dv1Click&quot;</span>&gt;</span></span><br><span class="line">                div1 - click :class 绑定class样式</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;dv2Class&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dv2Click&quot;</span>&gt;</span></span><br><span class="line">                div2 - click :class 绑定class样式 数组形式绑定</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;dv3Class&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dv3Click&quot;</span>&gt;</span></span><br><span class="line">                div3 - click :class 绑定class样式 对象形式绑定</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: fsize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">                div4 - :style=&quot;&#123;fontSize: fsize+&#x27;px&#x27;&#125;&quot; 绑定style样式</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span></span><br><span class="line">                div4 - :style=&quot;styleObject&quot; 绑定style样式</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dvbasic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span></span><br><span class="line">                div5 - :style=&quot;styleArr&quot; 绑定style样式</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">styleArr</span>: [</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">fontSize</span>: <span class="string">&#x27;30px&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    ],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">styleObject</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">fontSize</span>: <span class="string">&#x27;20px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">backgroundColor</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">fsize</span>: <span class="number">40</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dvClass</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dv2Class</span>: [],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dv3Class</span>: &#123; <span class="attr">ddvv1</span>: <span class="literal">false</span>, <span class="attr">ddvv2</span>: <span class="literal">false</span>, <span class="attr">ddvv3</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dv1ArrClass</span>: [<span class="string">&#x27;dv1&#x27;</span>, <span class="string">&#x27;dv2&#x27;</span>, <span class="string">&#x27;dv3&#x27;</span>]</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dv1Click</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dvClass = <span class="built_in">this</span>.dv1ArrClass[index];</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dv2Click</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.dv2Class.length === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.push(<span class="string">&#x27;ddvv1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.push(<span class="string">&#x27;ddvv2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.push(<span class="string">&#x27;ddvv3&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.shift();</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.shift();</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.dv2Class.shift();</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">dv3Click</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dv3Class.ddvv1 = !<span class="built_in">this</span>.dv3Class.ddvv1;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dv3Class.ddvv2 = !<span class="built_in">this</span>.dv3Class.ddvv2;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dv3Class.ddvv3 = !<span class="built_in">this</span>.dv3Class.ddvv3;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>class</tag>
        <tag>style</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 14. vue.set方法</title>
    <url>//articles/c533.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第14章: vue.set方法</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="vue监视数据的原理"><a class="markdownIt-Anchor" href="#vue监视数据的原理"></a> vue监视数据的原理</h4>
<ol>
<li>vue会监视data中所有层次的数据</li>
<li>通过setter实现数据监视，并且要在new vue时就传入需要监视的数据</li>
<li>对象中后续追加的属性，vue默认不做响应式处理</li>
<li>如果需要给添加的属性做响应式处理 需要使用 set api<br>
Vue.set(data.target,‘prototypeName’/index,‘prototypeValue’)<br>
this.$set(data.target,‘prototypeName’/index,‘prototypeValue’)</li>
<li>对于数组的更新 需要使用api push、pop、shift、unshift、splice、sort、reverse 或者 Vue.set() | this.$set()</li>
<li>Vue.set() | vm.$set() 不能给vm的根数即data直接添加属性</li>
<li>核心是使用 Object.defineProperty 实现了数据劫持</li>
</ol>
<table border="1">
  <thead>
    </thead><td>方法</td>
    <td>使用</td>
    <td>描述</td>
  
  <tbody>
    <tr>
      <td>push</td>
      <td>
        const length = arrayObj. push([item1 [item2 [. .
        . [itemN ]]]])
      </td>
      <td>
        将一个或多个新元素添加到数组结尾，并返回数组新长度
      </td>
    </tr>
    <tr>
      <td>pop</td>
      <td>const obj = arrayObj.pop()</td>
      <td>移除最后一个元素并返回该元素值</td>
    </tr>
    <tr>
      <td>shift</td>
      <td>const obj = arrayObj.shift()</td>
      <td>
        移除最前一个元素并返回该元素值，数组中元素自动前移
      </td>
    </tr>
    <tr>
      <td>unshift</td>
      <td>
        const length = arrayObj.unshift([item1 [item2 [.
        . . [itemN ]]]])
      </td>
      <td>
        将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度
      </td>
    </tr>
    <tr>
      <td>splice</td>
      <td>
        const deleteArr =
        arrayObj.splice(deletePos,deleteCount,[newItem1,newItem2])
      </td>
      <td>
        删除从指定位置deletePos开始的指定数量deleteCount的元素[并添加一个或多个新的元素]，数组形式返回所移除的元素
      </td>
    </tr>
    <tr>
      <td>sort</td>
      <td>const sortArr = arrayObj.sort()</td>
      <td>
        反转元素（最前的排到最后、最后的排到最前），返回数组地址
      </td>
    </tr>
    <tr>
      <td>reverse</td>
      <td>const reverseArr = arrayObj.reverse()</td>
      <td>
        反转元素（最前的排到最后、最后的排到最前），返回数组地址
      </td>
    </tr>
  </tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>14.vue_set方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#root</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">                <span class="attribute">justify-content</span>: space-evenly;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.conditiondv</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                vue监视数据的原理</span></span><br><span class="line"><span class="comment">                1. vue会监视data中所有层次的数据</span></span><br><span class="line"><span class="comment">                2. 通过setter实现数据监视，并且要在new vue时就传入需要监视的数据</span></span><br><span class="line"><span class="comment">                3. 对象中后续追加的属性，vue默认不做响应式处理</span></span><br><span class="line"><span class="comment">                4. 如果需要给添加的属性做响应式处理 需要使用 set api</span></span><br><span class="line"><span class="comment">                    Vue.set(data.target,&#x27;prototypeName&#x27;/index,&#x27;prototypeValue&#x27;)</span></span><br><span class="line"><span class="comment">                    this.$set(data.target,&#x27;prototypeName&#x27;/index,&#x27;prototypeValue&#x27;)</span></span><br><span class="line"><span class="comment">                5. 对于数组的更新 需要使用api push、pop、shift、unshift、splice、sort、reverse 或者 Vue.set() | this.$set()</span></span><br><span class="line"><span class="comment">                6, Vue.set() | vm.$set() 不能给vm的根数即data直接添加属性</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>对象动态添加属性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    &gt;</span>this.$set(data.object,&#x27;prototypeName&#x27;,&#x27;prototypeValue&#x27;)&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    &gt;</span>Vue.set(data.object,&#x27;prototypeName&#x27;,&#x27;prototypeValue&#x27;)&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,k) in student&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>key:&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>----<span class="tag">&lt;<span class="name">span</span>&gt;</span>value:&#123;&#123;v&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addPrototypeClick&quot;</span>&gt;</span>add prototype<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>对象动态修改数组属性<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    &gt;</span>this.$set(data.object,&#x27;prototypeName&#x27;,&#x27;prototypeValue&#x27;)&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,k) in student&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>key:&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>----<span class="tag">&lt;<span class="name">span</span>&gt;</span>value:&#123;&#123;v&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobbyClick&quot;</span>&gt;</span>add prototype<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeHobbyClick&quot;</span>&gt;</span>使用数组的变更方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>方法<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>使用<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>push<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                const length = arrayObj. push([item1 [item2 [. .</span><br><span class="line">                                . [itemN ]]]])</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                将一个或多个新元素添加到数组结尾，并返回数组新长度</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>pop<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>const obj = arrayObj.pop()<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>移除最后一个元素并返回该元素值<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>shift<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>const obj = arrayObj.shift()<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                移除最前一个元素并返回该元素值，数组中元素自动前移</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>unshift<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                const length = arrayObj.unshift([item1 [item2 [.</span><br><span class="line">                                . . [itemN ]]]])</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                将一个或多个新元素添加到数组开始，数组中的元素自动后移，返回数组新长度</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>splice<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                const deleteArr =</span><br><span class="line">                                arrayObj.splice(deletePos,deleteCount,[newItem1,newItem2])</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                删除从指定位置deletePos开始的指定数量deleteCount的元素[并添加一个或多个新的元素]，数组形式返回所移除的元素</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>sort<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>const sortArr = arrayObj.sort()<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                反转元素（最前的排到最后、最后的排到最前），返回数组地址</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>reverse<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>const reverseArr = arrayObj.reverse()<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                反转元素（最前的排到最后、最后的排到最前），返回数组地址</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">student</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">hobby</span>: [<span class="string">&#x27;抽烟&#x27;</span>, <span class="string">&#x27;喝酒&#x27;</span>, <span class="string">&#x27;烫头&#x27;</span>]</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">addPrototypeClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;function addPClick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$set(<span class="built_in">this</span>.student, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">addHobbyClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;function addHobbyClick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$set(</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.student.hobby,</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.student.hobby.length,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;学习-&#x27;</span> + <span class="built_in">this</span>.student.hobby.length</span></span><br><span class="line"><span class="javascript">                    );</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">changeHobbyClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;function changeHobbyClick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.student.hobby.push(</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;push new hobby-&#x27;</span> + <span class="built_in">this</span>.student.hobby.length</span></span><br><span class="line"><span class="javascript">                    );</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vue.set</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 15. 表单数据的收集</title>
    <url>//articles/d63a.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第15章: 表单数据的收集</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<p>表单数据收集:</p>
<ol>
<li>&lt;input type=“text” v-model=“userName”/&gt; v-model收集的是value值,即用户输入的值</li>
<li>&lt;input type=“radio” name=“sex” value=‘male’  v-model=“sex” /&gt; v-model收集的是value值, 需要给标签配置value</li>
<li>&lt;input type=“checkbox” value=‘game’  v-model=“hobby” /&gt;<br>
如果没有配置value 则收集的是checked true or false<br>
如果配置了value v-model的初始值是非数组，则收集的是checked true or false<br>
如果配置了value v-model的初始值是数组，则收集的是value组成的数组</li>
<li>v-model 有三个修饰符,可连续使用  v-model.trim.lazy=‘password’<br>
lazy 延迟收集，失去焦点再收集数据<br>
trim 过滤收尾空格<br>
number 将输入的字符串转换为数值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>15.表单数据的收集<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            表单数据收集:</span></span><br><span class="line"><span class="comment">            1. &lt;input type=&quot;text&quot; v-model=&quot;userName&quot;/&gt; v-model收集的是value值,即用户输入的值</span></span><br><span class="line"><span class="comment">            2. &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&#x27;male&#x27;  v-model=&quot;sex&quot;  /&gt; v-model收集的是value值, 需要给标签配置value</span></span><br><span class="line"><span class="comment">            3. &lt;input type=&quot;checkbox&quot; value=&#x27;game&#x27;  v-model=&quot;hobby&quot;  /&gt; </span></span><br><span class="line"><span class="comment">                如果没有配置value 则收集的是checked true or false</span></span><br><span class="line"><span class="comment">                如果配置了value v-model的初始值是非数组，则收集的是checked true or false</span></span><br><span class="line"><span class="comment">                如果配置了value v-model的初始值是数组，则收集的是value组成的数组</span></span><br><span class="line"><span class="comment">            4. v-model 有三个修饰符  </span></span><br><span class="line"><span class="comment">                lazy 延迟收集，失去焦点再收集数据   </span></span><br><span class="line"><span class="comment">                trim 过滤收尾空格  </span></span><br><span class="line"><span class="comment">                number 将输入的字符串转换为数值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单数据的收集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;submitForm&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>账号&lt;/span</span><br><span class="line">                        &gt;<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model.lazy.trim</span>=<span class="string">&quot;userInfo.account&quot;</span></span></span><br><span class="line"><span class="tag">                        /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码&lt;/span</span><br><span class="line">                        &gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.pwd&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>年龄&lt;/span</span><br><span class="line">                        &gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">value</span>=<span class="string">&quot;male&quot;</span></span></span><br><span class="line"><span class="tag">                        /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">value</span>=<span class="string">&quot;female&quot;</span></span></span><br><span class="line"><span class="tag">                        /&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">value</span>=<span class="string">&quot;study&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span></span></span><br><span class="line"><span class="tag">                        /&gt;</span>学习</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">value</span>=<span class="string">&quot;game&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span></span></span><br><span class="line"><span class="tag">                        /&gt;</span>游戏</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span></span></span><br><span class="line"><span class="tag">                        /&gt;</span>吃饭</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">select</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">name</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">id</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model</span>=<span class="string">&quot;userInfo.address&quot;</span></span></span><br><span class="line"><span class="tag">                        &gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;nanjing&quot;</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>其他信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">name</span>=<span class="string">&quot;other&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">id</span>=<span class="string">&quot;other&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">v-model</span>=<span class="string">&quot;userInfo.other&quot;</span></span></span><br><span class="line"><span class="tag">                        &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                            阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://odinsam.com&quot;</span></span></span><br><span class="line"><span class="tag">                                &gt;</span>《用户协议》&lt;/a</span><br><span class="line">                            &gt;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">userInfo</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">account</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">pwd</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">age</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">sex</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">hobby</span>: [],</span></span><br><span class="line"><span class="javascript">                        <span class="attr">address</span>: <span class="string">&#x27;nanjing&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">other</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">agree</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">submitForm</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;function submitForm&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>v-model</tag>
        <tag>value</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 13.  vue指令</title>
    <url>//articles/9cac.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第13章: vue指令</p>
<span id="more"></span>
<h3 id="数据绑定"><a class="markdownIt-Anchor" href="#数据绑定"></a> 数据绑定</h3>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<ol>
<li>v-text 向所在的节点渲染文本内容，html 会原样输出不解析。 并且节点的原始内容会被替换相对于插值语法在此显得更加灵活</li>
<li>v-html 在指定节点中渲染包含 html 结构的内容 容易导致xss攻击</li>
<li>v-cloak 当 vue 实例创建完毕并接管容器后会移除 v-cloak 属性。可搭配样式 [v-cloak]{ display:none; } 解决网速过慢页面展示{{xxx}}的问题</li>
<li>v-once 所在节点在初始动态渲染后，就视为静止内容，以后数据的改动不会引起 v-once 所在的结构的更新，可用于优化性能。</li>
<li>v-pre 跳过所在节点的编译过程，vue不在编译节点内容提升性能</li>
<li>v-show 条件渲染  v-show=“bool值或者返回bool类型的表达式” 。  适用于切换较高的场景。DOM 未被移除，只是通过样式 display:none 隐藏</li>
<li>v-if 条件渲染   v-if=“bool值或者返回bool类型的表达式” 。 适用于切换较低的场景。DOM 被移除，可能无法获取dom元素</li>
<li>v-if 可搭配 v-else-if v-else 但是整体结构不能打断</li>
<li>整体渲染可以使用 <template></template> 但是只能使用 v-if 不能使用v-show</li>
<li>v-for 列表渲染 遍历数组 v-for=“item in array” :key=“<a href="http://item.id">item.id</a>”</li>
<li>v-for 列表渲染 遍历对象 v-for=&quot;(v,k) in object&quot; :key=“k”</li>
<li>v-for 列表渲染 遍历字符串 v-for=&quot;(char,index) in string&quot; :key=“index”</li>
<li>v-for 列表渲染 遍历数值(次数) v-for=&quot;(num,index) in number&quot; :key=“index”</li>
<li>key是虚拟dom的标识，当数据发生变化时，会依据key做dom的diff比较运行。如果key使用index在数组进行了逆序的添加、删除等操作破坏了原有顺序会发生bug</li>
<li>key一般最好使用id、手机号、身份证号等唯一标识</li>
<li>如果没有逆序操作，使用index作为key的值夜没有问题</li>
<li>自定义指令 示例： <span v-big="customNum"></span><br>
指令名定义时不加 v- ，使用时加 v-<br>
指令名如果是多个单词，需要使用 kebab-case 命名方式，不要用驼峰命名<br>
第一种写法<br>
new vue中配置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">    <span class="function"><span class="title">big</span>(<span class="params">ele, binding</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 第一次调用: 当指令与元素成功绑定  第n次调用: 当指令所在模板被重新解析时</span></span><br><span class="line">        ele.innerText = binding.value * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对象是</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
第二种写法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">big: &#123;</span><br><span class="line">    <span class="function"><span class="title">bind</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">&#x27;1次调用 - 当指令与元素绑定成功时调用，在内存，页面并没有元素&#x27;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">inserted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">&#x27;1或n次调用 - 指令所在的元素被插入页面时调用&#x27;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;1或n次调用: 当指令所在模板被重新解析时&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
全局写法<br>
vm.directive('指令名',配置对象) 或 vm.directive(‘指令名’,回调函数)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>13.内置指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#root</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">                <span class="attribute">justify-content</span>: space-evenly;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.conditiondv</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                ### 数据绑定</span></span><br><span class="line"><span class="comment">                1. v-text 向所在的节点渲染文本内容，html 会原样输出不解析。 并且节点的原始内容会被替换（ &#123;&#123;&#125;&#125; 插值语法在此显得更加灵活 ）</span></span><br><span class="line"><span class="comment">                2. v-html 在指定节点中渲染包含 html 结构的内容 容易导致xss攻击</span></span><br><span class="line"><span class="comment">                3. v-cloak 当 vue 实例创建完毕并接管容器后会移除 v-cloak 属性。可搭配样式 [v-cloak]&#123; display:none; &#125; 解决网速过慢页面展示&#123;&#123;xxx&#125;&#125;的问题</span></span><br><span class="line"><span class="comment">                4. v-once 所在节点在初始动态渲染后，就视为静止内容，以后数据的改动不会引起 v-once 所在的结构的更新，可用于优化性能。</span></span><br><span class="line"><span class="comment">                5. v-pre 跳过所在节点的编译过程，vue不在编译节点内容提升性能</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>v-text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;vtext&quot;</span>&gt;</span>span原有内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>v-html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;vhtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>v-cloak<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-cloak</span></span></span><br><span class="line"><span class="tag">                    &gt;</span>当 vue 实例创建完毕并接管容器后会移除 v-cloak 属性&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>v-once<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>初始onceNum为 &#123;&#123;onceNum&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>onceNum当前值为 &#123;&#123;onceNum&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnAddNum&quot;</span>&gt;</span>btnAddNum<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span></span></span><br><span class="line"><span class="tag">                    &gt;</span>跳过所在节点的编译过程，vue不在编译节点内容提升性能&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                ### 条件渲染</span></span><br><span class="line"><span class="comment">                6. v-show 条件渲染  v-show=&quot;bool值或者返回bool类型的表达式&quot; 。  适用于切换较高的场景。DOM 未被移除，只是通过样式 display:none 隐藏</span></span><br><span class="line"><span class="comment">                7. v-if 条件渲染   v-if=&quot;bool值或者返回bool类型的表达式&quot; 。 适用于切换较低的场景。DOM 被移除，可能无法获取dom元素</span></span><br><span class="line"><span class="comment">                8. v-if 可搭配 v-else-if v-else 但是整体结构不能打断</span></span><br><span class="line"><span class="comment">                9. 整体渲染可以使用 &lt;template&gt;&lt;/template&gt; 但是只能使用 v-if 不能使用v-show</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;vshow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;conditiondv&quot;</span>&gt;</span>v-show=&quot;vshow&quot;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;vshowBtnClick&quot;</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;vif&quot;</span> <span class="attr">class</span>=<span class="string">&quot;conditiondv&quot;</span>&gt;</span>v-if=&quot;vif&quot;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;vifBtnClick&quot;</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;num===1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;conditiondv&quot;</span>&gt;</span>v-if=&quot;num===1&quot;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;div&gt;整体结构不能打断&lt;/div&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;num===2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;conditiondv&quot;</span>&gt;</span></span><br><span class="line">                    v-else-if=&quot;num===2&quot;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;conditiondv&quot;</span>&gt;</span>v-else<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;conditionClick&quot;</span>&gt;</span>conditionClick<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                ### 列表渲染</span></span><br><span class="line"><span class="comment">                10. v-for 列表渲染 遍历数组 v-for=&quot;item in array&quot; :key=&quot;item.id&quot; </span></span><br><span class="line"><span class="comment">                11. v-for 列表渲染 遍历对象 v-for=&quot;(v,k) in object&quot; :key=&quot;k&quot;</span></span><br><span class="line"><span class="comment">                12. v-for 列表渲染 遍历字符串 v-for=&quot;(char,index) in string&quot; :key=&quot;index&quot;</span></span><br><span class="line"><span class="comment">                13. v-for 列表渲染 遍历数值(次数) v-for=&quot;(num,index) in number&quot; :key=&quot;index&quot;</span></span><br><span class="line"><span class="comment">                14. key是虚拟dom的标识，当数据发生变化时，会依据key做dom的diff比较运行。如果key使用index在数组进行了逆序的添加、删除等操作破坏了原有顺序会发生bug</span></span><br><span class="line"><span class="comment">                15. key一般最好使用id、手机号、身份证号等唯一标识</span></span><br><span class="line"><span class="comment">                16. 如果没有逆序操作，使用index作为key的值夜没有问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>遍历数组 v-for=&quot;item in array&quot; :key=&quot;item.id&quot; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span></span><br><span class="line">                        index:&#123;&#123;index&#125;&#125; id:&#123;&#123;user.id&#125;&#125; 姓名:&#123;&#123;user.name&#125;&#125;</span><br><span class="line">                        年龄:&#123;&#123;user.age&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>遍历对象 v-for=&quot;(v,k) in object&quot; :key=&quot;k&quot;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,k) in users[0]&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">                        key:&#123;&#123;k&#125;&#125; value:&#123;&#123;v&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    &gt;</span>遍历字符串 v-for=&quot;(char,index) in string&quot;</span><br><span class="line">                    :key=&quot;index&quot;&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) in users[0].name&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                        char:&#123;&#123;char&#125;&#125; index:&#123;&#123;index&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                    &gt;</span>遍历数值(次数) v-for=&quot;(num,index) in number&quot;</span><br><span class="line">                    :key=&quot;index&quot;&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) in 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                        number:&#123;&#123;number&#125;&#125; index:&#123;&#123;index&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    17. 自定义指令 示例： &lt;span v-big=&quot;customNum&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">                        指令名定义时不加 v- ，使用时加 v-</span></span><br><span class="line"><span class="comment">                        指令名如果是多个单词，需要使用 kebab-case 命名方式，不要用驼峰命名</span></span><br><span class="line"><span class="comment">                    第一种写法 </span></span><br><span class="line"><span class="comment">                    new vue中配置</span></span><br><span class="line"><span class="comment">                    directives: &#123;</span></span><br><span class="line"><span class="comment">                        big(ele, binding) &#123;</span></span><br><span class="line"><span class="comment">                            // 第一次调用: 当指令与元素成功绑定  第n次调用: 当指令所在模板被重新解析时</span></span><br><span class="line"><span class="comment">                            ele.innerText = binding.value * 10;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                        //对象是</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    第二种写法</span></span><br><span class="line"><span class="comment">                    big: &#123;</span></span><br><span class="line"><span class="comment">                        bind(ele, binding) &#123;</span></span><br><span class="line"><span class="comment">                            console.log(</span></span><br><span class="line"><span class="comment">                                &#x27;1次调用 - 当指令与元素绑定成功时调用，在内存，页面并没有元素&#x27;</span></span><br><span class="line"><span class="comment">                            );</span></span><br><span class="line"><span class="comment">                        &#125;,</span></span><br><span class="line"><span class="comment">                        inserted(ele, binding) &#123;</span></span><br><span class="line"><span class="comment">                            console.log(</span></span><br><span class="line"><span class="comment">                                &#x27;1或n次调用 - 指令所在的元素被插入页面时调用&#x27;</span></span><br><span class="line"><span class="comment">                            );</span></span><br><span class="line"><span class="comment">                        &#125;,</span></span><br><span class="line"><span class="comment">                        update(ele, binding) &#123;</span></span><br><span class="line"><span class="comment">                            console.log(&#x27;1或n次调用: 当指令所在模板被重新解析时&#x27;);</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    全局写法</span></span><br><span class="line"><span class="comment">                    vm.$directive(&#x27;指令名&#x27;,配置对象) 或 vm.$directive(&#x27;指令名&#x27;,回调函数)</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>自定义指令<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>customNum:&#123;&#123;customNum&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>放大10倍后的值:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;customNum&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnCustomNumAdd&quot;</span>&gt;</span>btnCustomNumAdd<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">customNum</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">onceNum</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">num</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">vtext</span>: <span class="string">&#x27;&lt;span&gt;vtext指令&lt;/span&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">vhtml</span>: <span class="string">&#x27;&lt;a href=&quot;http://odinsam.com&quot;&gt;v-html容易导致xss攻击&lt;/a&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">vshow</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">vif</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">users</span>: [</span></span><br><span class="line"><span class="javascript">                        &#123; <span class="attr">id</span>: <span class="string">&#x27;no1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;odinsam1&#x27;</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123; <span class="attr">id</span>: <span class="string">&#x27;no2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;odinsam2&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span> &#125;,</span></span><br><span class="line"><span class="javascript">                        &#123; <span class="attr">id</span>: <span class="string">&#x27;no3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;odinsam3&#x27;</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;</span></span><br><span class="line"><span class="javascript">                    ]</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">vshowBtnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;function vshowBtnClick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.vshow = !<span class="built_in">this</span>.vshow;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">vifBtnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;function vifBtnClick&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.vif = !<span class="built_in">this</span>.vif;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">conditionClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num++;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.num &gt; <span class="number">3</span>) <span class="built_in">this</span>.num = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnAddNum</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.onceNum++;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">btnCustomNumAdd</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.customNum++;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// big(ele, binding) &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     ele.innerText = binding.value * 10;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">big</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">bind</span>(<span class="params">ele, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;1次调用 - 当指令与元素绑定成功时调用，在内存，页面并没有元素&#x27;</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">inserted</span>(<span class="params">ele, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;1或n次调用 - 指令所在的元素被插入页面时调用&#x27;</span></span></span><br><span class="line"><span class="javascript">                        );</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">update</span>(<span class="params">ele, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;1或n次调用: 当指令所在模板被重新解析时&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>全局指令</tag>
        <tag>指令</tag>
        <tag>directives</tag>
        <tag>directive</tag>
        <tag>v-text</tag>
        <tag>v-html</tag>
        <tag>v-cloak</tag>
        <tag>v-once</tag>
        <tag>v-pre</tag>
        <tag>v-show</tag>
        <tag>v-if</tag>
        <tag>v-else-if</tag>
        <tag>v-else</tag>
        <tag>v-for</tag>
        <tag>key</tag>
        <tag>自定义指令</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 16. Filter过滤器</title>
    <url>//articles/4c6a.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第 16 章: Filter过滤器</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="filter过滤器"><a class="markdownIt-Anchor" href="#filter过滤器"></a> Filter过滤器:</h4>
<ol>
<li>对现实的数据进行特性格式化后再显示(适用于一些简单的逻辑处理)</li>
<li>注册过滤器 Vue.filter(‘name’,function(){}); 或 new Vue(filters:{ filtername([params]){} })</li>
<li>使用过滤器 {{name | filtername1[ | filtername2]}} 或者 v-bind:属性=“name | filtername1[ | filtername2]”</li>
<li>过滤器可以接受额外参数，多个过滤器可以串联</li>
<li>并没有改变元数据，只是产生新的对应数据</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>16.过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            过滤器:</span></span><br><span class="line"><span class="comment">            1. 对现实的数据进行特性格式化后再显示(适用于一些简单的逻辑处理)</span></span><br><span class="line"><span class="comment">            2. 注册过滤器 Vue.filter(&#x27;name&#x27;,function()&#123;&#125;); 或 new Vue(filters:&#123; filtername([params])&#123;&#125; &#125;)</span></span><br><span class="line"><span class="comment">            3. 使用过滤器 &#123;&#123;name | filtername1[ | filtername2]&#125;&#125; 或者 v-bind:属性=&quot;name | filtername1[ | filtername2]&quot;</span></span><br><span class="line"><span class="comment">            4. 过滤器可以接受额外参数，多个过滤器可以串联</span></span><br><span class="line"><span class="comment">            5. 并没有改变元数据，只是产生新的对应数据</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>无参过滤器:&#123;&#123; username | usernameFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                带参过滤器:&#123;&#123; username | usernameFormaterWithParams(&#x27;参数&#x27;)&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                串联过滤器:&#123;&#123; username | usernameFormater |</span><br><span class="line">                usernameFormaterWithParams(&#x27;参数&#x27;)&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>无参全局过滤器:&#123;&#123; username | globalFilter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                带参全局过滤器:&#123;&#123; username | globalFilterWithParams(&#x27;global&#x27;)&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">                全局过滤器+局部过滤器:&#123;&#123; username |</span><br><span class="line">                usernameFormaterWithParams(&#x27;参数&#x27;) |</span><br><span class="line">                globalFilterWithParams(&#x27;global&#x27;)&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        Vue.filter(<span class="string">&#x27;globalFilter&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value + <span class="string">&#x27;-无参全局过滤器&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        Vue.filter(<span class="string">&#x27;globalFilterWithParams&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value, param</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value + <span class="string">&#x27;-带参全局过滤器-&#x27;</span> + param;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">username</span>: <span class="string">&#x27;odinsam&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">usernameFormater</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> value + <span class="string">&#x27;-无参数&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">usernameFormaterWithParams</span>(<span class="params">value, param</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> value + <span class="string">&#x27;-带参数&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>filter</tag>
        <tag>filters</tag>
        <tag>过滤器</tag>
        <tag>全局过滤器</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 17. 生命周期</title>
    <url>//articles/5bf8.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第 17 章: 生命周期</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。<br>
<img src="/images/lifecycle.png"></p>
]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>生命周期</tag>
        <tag>挂载</tag>
        <tag>销毁</tag>
        <tag>更新</tag>
        <tag>beforeCreate</tag>
        <tag>created</tag>
        <tag>beforeMount</tag>
        <tag>mounted</tag>
        <tag>beforeUpdate</tag>
        <tag>update</tag>
        <tag>beforeDestroy</tag>
        <tag>destroyed</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 18.3 Vue组件-内置关系</title>
    <url>//articles/e7e4.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第 18.3 章: vue组件-内置关系</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<ol>
<li>vue的内置关系  VueComponent.prototype.__proto__ === Vue.prototype</li>
<li>通过这关系，组件实例对象vc可以访问到Vue原型上的属性、方法</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>18.3.vue的内置关系<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. vue的内置关系  VueComponent.prototype.__proto__ === Vue.prototype</span></span><br><span class="line"><span class="comment">            2. 通过这关系，组件实例对象vc可以访问到Vue原型上的属性、方法</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Student</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.b = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> d = <span class="keyword">new</span> Demo();</span></span><br><span class="line"><span class="javascript">        <span class="comment">//显示原型属性</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;Demo.prototype&#x27;</span>, Demo.prototype);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//隐式原型属性</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;d.__proto__&#x27;</span>, d.__proto__);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 显示原型属性 和  隐式原型属性 都指向了原型对象</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Demo.prototype.x = <span class="number">100</span>; <span class="comment">//通过显示原型属性操作原型对象，添加x属性 100</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;d.__proto__.x&#x27;</span>, d.__proto__.x); <span class="comment">// 可以输出 100</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;Demo.prototype == d.__proto__&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            Demo.prototype == d.__proto__</span></span><br><span class="line"><span class="javascript">        ); <span class="comment">//返回true</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.prototype.testProto = <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> Student = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;Student&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;odinsam&#x27;</span>, <span class="attr">proto</span>: <span class="number">0</span> &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;h2&gt;student组件&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;div&gt;Vue.prototype.testProto = 100; 获取结果为: &#123;&#123;proto&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                    &lt;button @click=&quot;getVmTestProto&quot;&gt;获取vm上的testProto&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">                &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">getVmTestProto</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.testProto);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.proto = <span class="built_in">this</span>.testProto;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">test</span>: <span class="string">&#x27;test proto&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">components</span>: &#123; Student &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;Vue.prototype === vm.__proto__&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            Vue.prototype === vm.__proto__</span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">        <span class="comment">// VueComponent.prototype.__proto__ === Vue.prototype</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 组件实例对象vc可以访问到Vue原型上的属性、方法</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;Student.prototype === vm.___proto__&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            Student.prototype === vm.___proto__</span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>prototype</tag>
        <tag>__proto__</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 18.2 Vue组件-组件嵌套</title>
    <url>//articles/ff66.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第 18.2 章: vue组件-组件嵌套</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>18.2.组件嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        Vue.config.productionTip = false;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        const Student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            name: &#x27;Student&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    stuName: &#x27;odinsam&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    stuAge: 20</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#x27;margin-left:50px;&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Student组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓名：</span><span class="template-variable">&#123;&#123;<span class="name">stuName</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;<span class="name">stuAge</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        const School = &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            name: &#x27;school&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            components: &#123; Student &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    schName: &#x27;vue学校&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    schAddress: &#x27;南京&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>School组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>课程：</span><span class="template-variable">&#123;&#123;<span class="name">schName</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>地址：</span><span class="template-variable">&#123;&#123;<span class="name">schAddress</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>在校学生<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">Student</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        const Hello = &#123; name: &#x27;Hello&#x27;, template: `<span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>` &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        const App = &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            name: &#x27;App&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            components: &#123; Hello, school: School &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>App组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">style</span>=<span class="string">&#x27;margin-left:50px;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">school</span> <span class="attr">style</span>=<span class="string">&#x27;margin-left:50px;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            el: &#x27;#root&#x27;, // 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            components: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                App</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>component</tag>
        <tag>嵌套</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 18.4 Vue组件-单文件组件</title>
    <url>//articles/9c18.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第 18.4 章: vue组件-单文件组件</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>18.4.单文件组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;App&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        App</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;App&gt;&lt;/App&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;App组件&lt;/h2&gt;  </span><br><span class="line">        &lt;Student&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components:&#123; Student &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:aquamarine;</span><br><span class="line">    padding: 20px;   </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Studen组件&lt;/h2&gt;    </span><br><span class="line">        &lt;span&gt;&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">    background-color: bisque;</span><br><span class="line">    padding: 20px;   </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>component</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 19. Vue脚手架</title>
    <url>//articles/d49a.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第 19 章: Vue脚手架</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<ol>
<li>全局安装 npm install -g @vue/cli</li>
<li><font color="red">切换到需要创建项目的目录</font>，然后创建项目 vue create 项目名称</li>
<li>进入项目目录，启动项目 npm serve</li>
<li>vue.js 与 vue.runtime.mini.js 的区别
<ol>
<li>vue.js 是完整版的 vue，包含核心功能+模板解析器</li>
<li>vue.runtime.mini.js 是运行时版本，只包含核心功能，没有模板解析器</li>
</ol>
</li>
<li>vue.runtime.mini.js 因为没有模板解析器，所以不能使用 template 配置项，需要 render 函数接收到的 createElement 函数去指定具体内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>使用 vue inspect &gt; output.js 可以查看到vue脚手架的默认配置</li>
<li>使用 vue.config.js 可以对脚手架进行个性化定制。详情 <a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 系列</title>
    <url>//articles/da3d.html</url>
    <content><![CDATA[<p>vue2.0 基础学习目录. <a href="e255.html">vue2.0 进阶学习的目录</a></p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2>
<h4 id="01-hello-vue"><a class="markdownIt-Anchor" href="#01-hello-vue"></a> <a href="deab.html">[01] hello vue</a></h4>
<h4 id="02-模板语法"><a class="markdownIt-Anchor" href="#02-模板语法"></a> <a href="1660.html">[02] 模板语法</a></h4>
<h4 id="03-数据绑定"><a class="markdownIt-Anchor" href="#03-数据绑定"></a> <a href="f50b.html">[03] 数据绑定</a></h4>
<h4 id="04-el与data的两种写法"><a class="markdownIt-Anchor" href="#04-el与data的两种写法"></a> <a href="3899.html">[04] el与data的两种写法</a></h4>
<h4 id="05-mvvm模型"><a class="markdownIt-Anchor" href="#05-mvvm模型"></a> <a href="a38e.html">[05] mvvm模型</a></h4>
<h4 id="06-数据代理-objectdefineproperty"><a class="markdownIt-Anchor" href="#06-数据代理-objectdefineproperty"></a> <a href="7c3d.html">[06] 数据代理-Object.defineProperty</a></h4>
<h4 id="07-事件处理"><a class="markdownIt-Anchor" href="#07-事件处理"></a> <a href="ec6.html">[07] 事件处理</a></h4>
<h4 id="08-事件修饰符"><a class="markdownIt-Anchor" href="#08-事件修饰符"></a> <a href="48de.html">[08] 事件修饰符</a></h4>
<h4 id="09-键盘事件"><a class="markdownIt-Anchor" href="#09-键盘事件"></a> <a href="42b7.html">[09] 键盘事件</a></h4>
<h4 id="10-computed计算属性"><a class="markdownIt-Anchor" href="#10-computed计算属性"></a> <a href="3442.html">[10] Computed计算属性</a></h4>
<h4 id="11-watch监视属性"><a class="markdownIt-Anchor" href="#11-watch监视属性"></a> <a href="88f9.html">[11] Watch监视属性</a></h4>
<h4 id="12-样式的绑定"><a class="markdownIt-Anchor" href="#12-样式的绑定"></a> <a href="5a60.html">[12] 样式的绑定</a></h4>
<h4 id="13-vue指令"><a class="markdownIt-Anchor" href="#13-vue指令"></a> <a href="9cac.html">[13] vue指令</a></h4>
<h4 id="14-vueset方法"><a class="markdownIt-Anchor" href="#14-vueset方法"></a> <a href="c533.html">[14] vue.set方法</a></h4>
<h4 id="15-表单数据的收集"><a class="markdownIt-Anchor" href="#15-表单数据的收集"></a> <a href="d63a.html">[15] 表单数据的收集</a></h4>
<h4 id="16-filter过滤器"><a class="markdownIt-Anchor" href="#16-filter过滤器"></a> <a href="4c6a.html">[16] Filter过滤器</a></h4>
<h4 id="17-生命周期"><a class="markdownIt-Anchor" href="#17-生命周期"></a> <a href="5bf8.html">[17] 生命周期</a></h4>
<h4 id="181-vue组件-非单文件组件"><a class="markdownIt-Anchor" href="#181-vue组件-非单文件组件"></a> <a href="fd0a.html">[18.1] vue组件 - 非单文件组件</a></h4>
<h4 id="182-vue组件-组件嵌套"><a class="markdownIt-Anchor" href="#182-vue组件-组件嵌套"></a> <a href="ff66.html">[18.2] vue组件 - 组件嵌套</a></h4>
<h4 id="183-vue组件-内置关系"><a class="markdownIt-Anchor" href="#183-vue组件-内置关系"></a> <a href="e7e4.html">[18.3] vue组件 - 内置关系</a></h4>
<h4 id="184-vue组件-单文件组件"><a class="markdownIt-Anchor" href="#184-vue组件-单文件组件"></a> <a href="9c18.html">[18.4] vue组件 - 单文件组件</a></h4>
<h4 id="19-vue脚手架"><a class="markdownIt-Anchor" href="#19-vue脚手架"></a> <a href="d49a.html">[19] Vue脚手架</a></h4>
]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 03. mixins混入配置项</title>
    <url>//articles/6426.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 01 章: props配置项</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="mixins混入配置项"><a class="markdownIt-Anchor" href="#mixins混入配置项"></a> mixins混入配置项</h4>
<ol>
<li>可以吧多个组件公用的配置提取成一个混入对象</li>
<li>定义见 mixin.js</li>
<li>使用分为局部混合和全局混合。</li>
<li>局部混合：引入混合对象 import {mixin,mixinData} from ‘…/mixin’;在vueComponent配置项中 mixins:[mixin,mixinData]</li>
<li>全局混合：在main.js中 引入 import {mixin,mixinData} from ‘…/mixin’; 使用 Vue.mixin({ mixin, mixinData });混合</li>
<li>当混入配置与组件配置冲突时，如果是data、methods等，以组件自身数据、方法为主。但如果是有冲突的生命周期钩子，则都会运行。且现执行混合中的钩子函数后执行组件自身的钩子函数</li>
</ol>
<h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h4>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mixin, mixinData &#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span>;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//全局混入</span></span><br><span class="line">Vue.mixin(&#123; mixin, mixinData &#125;);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>mixin.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">showName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;组件挂载了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixinData = &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;mixin数据&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>school.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;mixindata与组件data冲突时:&#123;&#123;value&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;学校名：&#123;&#123;schoolName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;showName&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mixin,mixinData&#125; from &#x27;../mixin&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            value:&#x27;组件data&#x27;,</span><br><span class="line">            name:&#x27;School组件&#x27;,</span><br><span class="line">            schoolName:&#x27;vue学院&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mixins:[mixin,mixinData]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:500px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;showName&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mixin&#125; from &#x27;../mixin.js&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&#x27;Student组件&#x27;,</span><br><span class="line">            stuName:&#x27;odinsam&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mixins: [mixin],</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        console.log(&#x27;student自身的mounted&#x27;);</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:500px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>mixin</tag>
        <tag>混入</tag>
        <tag>混合</tag>
        <tag>全局混入</tag>
        <tag>全局混合</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 02. props配置项</title>
    <url>//articles/40e6.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 01 章: props配置项</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="props配置项"><a class="markdownIt-Anchor" href="#props配置项"></a> props配置项</h4>
<ol>
<li>让组件接收外部传过来的数据 &lt;Student stuName=“odinsam” :age=“10”&gt;&lt;/Student&gt;</li>
<li>如果使用props传递数组、对象、方法等数据时，应该是 &lt;Student :getStudentName=“getStudentName”&gt;&lt;/Student&gt;通过props传递函数getStudentName</li>
<li>接收数据</li>
</ol>
<figure class="highlight js"><figcaption><span>简单接收</span></figcaption><table><tr><td class="code"><pre><span class="line">props: [<span class="string">&#x27;stuName&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>接收的同时限制数据类型</span></figcaption><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    <span class="attr">stuName</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">Number</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>接收的同时 限制数据类型、限制必要性、指定默认值</span></figcaption><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    <span class="attr">stuName</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">className</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&quot;1班&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>props是只读的，Vue底层会检测对props的修改。如果进行了修改，会发出警告。如果业务需要修改，name复制props内容到data中，修改data中的数据</li>
</ol>
<h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h4>
<figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        props配置项</span><br><span class="line">        1. 让组件接收外部传过来的数据 &lt;Student stuName=&quot;odinsam&quot; :age=&quot;10&quot;&gt;&lt;/Student&gt;</span><br><span class="line">        2. 接收数据</span><br><span class="line">            简单接收 props: [&#x27;stuName&#x27;, &#x27;age&#x27;]</span><br><span class="line"></span><br><span class="line">            接收的同时限制数据类型</span><br><span class="line">            props: &#123;</span><br><span class="line">                stuName: String,</span><br><span class="line">                age: Number,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            接收的同时 限制数据类型、限制必要性、指定默认值</span><br><span class="line">            props: &#123;</span><br><span class="line">                stuName: &#123;</span><br><span class="line">                    type: String,</span><br><span class="line">                    required:true,</span><br><span class="line">                &#125;,</span><br><span class="line">                age: &#123;</span><br><span class="line">                    type: Number,</span><br><span class="line">                    required:true,</span><br><span class="line">                &#125;,</span><br><span class="line">                className: &#123;</span><br><span class="line">                    type: String,</span><br><span class="line">                    default:&quot;1班&quot;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        3. props是制度的，Vue底层会检测对props的修改。如果进行了修改，会发出警告。如果业务需要修改，name复制props内容到data中，修改data中的数据</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;Student stuName=&quot;odinsam&quot; :age=&quot;10&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">        &lt;span&gt;年龄：&#123;&#123;myAge&#125;&#125;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">        &lt;span&gt;班级：&#123;&#123;className&#125;&#125;&lt;/span&gt;&lt;br /&gt;</span><br><span class="line">        &lt;button @click=&quot;changeAge&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            myAge:this.age</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeAge() &#123;</span><br><span class="line">            this.myAge++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 简单接收</span><br><span class="line">    // props: [&#x27;stuName&#x27;, &#x27;age&#x27;]</span><br><span class="line"></span><br><span class="line">    // 接收的同时限制数据类型</span><br><span class="line">    /*</span><br><span class="line">    props: &#123;</span><br><span class="line">        stuName: String,</span><br><span class="line">        age: Number,</span><br><span class="line">    &#125;</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    props: &#123;</span><br><span class="line">        stuName: &#123;</span><br><span class="line">            type: String,</span><br><span class="line">            required:true,</span><br><span class="line">        &#125;,</span><br><span class="line">        age: &#123;</span><br><span class="line">            type: Number,</span><br><span class="line">            required:true,</span><br><span class="line">        &#125;,</span><br><span class="line">        className: &#123;</span><br><span class="line">            type: String,</span><br><span class="line">            default:&quot;1班&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>props</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 04. plugins插件</title>
    <url>//articles/ec79.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 04 章: plugins插件</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="plugins插件"><a class="markdownIt-Anchor" href="#plugins插件"></a> plugins插件</h4>
<ol>
<li>包含install方法的对象，install的第一个参数是vue，第二个以后得参数是插件使用者传递的数据</li>
<li>插件可以给vue添加实例方法、实例属性</li>
<li>使用插件： 在创建Vue实例前 Vue.use(plugins, { value1: ‘value1’, value2: ‘value2’ });</li>
<li>插件也可以 添加全局过滤器、添加全局指令、添加全局混入</li>
</ol>
<h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> 示例代码</h4>
<figure class="highlight js"><figcaption><span>plugins</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    vue插件</span></span><br><span class="line"><span class="comment">    1. 包含install方法的对象，install的第一个参数是vue，第二个以后得参数是插件使用者传递的数据</span></span><br><span class="line"><span class="comment">    2. 插件可以给vue添加实例方法、实例属性</span></span><br><span class="line"><span class="comment">    3. 使用插件： 在创建Vue实例前 Vue.use(plugins, &#123; value1: &#x27;value1&#x27;, value2: &#x27;value2&#x27; &#125;);</span></span><br><span class="line"><span class="comment">    4. 插件也可以 添加全局过滤器、添加全局指令、添加全局混入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">install</span>(<span class="params">Vue, options</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;install 插件&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;options&#x27;</span>, options);</span><br><span class="line">        <span class="comment">//添加实例方法、实例属性</span></span><br><span class="line">        Vue.prototype.pluginMethod = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;invoke plugins myMethod&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;myMethod param value&#x27;</span>, value);</span><br><span class="line">        &#125;;</span><br><span class="line">        Vue.prototype.pluginPrototype = <span class="string">&#x27;odinsam plugins&#x27;</span>;</span><br><span class="line">        <span class="comment">//添加全局过滤器</span></span><br><span class="line">        Vue.filter(<span class="string">&#x27;odinFilter&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;odinFilter 被调用&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> value + <span class="string">&#x27;-odinFilter 被调用&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//添加全局指令</span></span><br><span class="line">        Vue.directive(<span class="string">&#x27;big&#x27;</span>, &#123;</span><br><span class="line">            <span class="function"><span class="title">bind</span>(<span class="params">ele, binding</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(</span><br><span class="line">                    <span class="string">&#x27;1次调用 - 当指令与元素绑定成功时调用，在内存，页面并没有元素&#x27;</span></span><br><span class="line">                );</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;binding&#x27;</span>, binding);</span><br><span class="line">                ele.innerText = <span class="string">&#x27;v-big指令显示&#x27;</span> + binding.value;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">inserted</span>(<span class="params">ele, binding</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;1或n次调用 - 指令所在的元素被插入页面时调用&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">update</span>(<span class="params">ele, binding</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;1或n次调用: 当指令所在模板被重新解析时&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//添加全局混入</span></span><br><span class="line">        Vue.mixin(&#123;</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">pluginMixinValue</span>: <span class="string">&#x27;plugins mixin data&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span>;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//使用插件</span></span><br><span class="line">Vue.use(plugins, &#123; <span class="attr">value1</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="attr">value2</span>: <span class="string">&#x27;value2&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;插件混入+插件过滤器:&#123;&#123;pluginMixinValue | odinFilter&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span&gt;插件v-big指令:&lt;/span&gt;&lt;span v-big=&quot;value&quot;&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;invokeMyMethod&quot;&gt;调用插件中的myMethod方法&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName: &#x27;odinsam&#x27;,</span><br><span class="line">            value:&#x27;组件value&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        invokeMyMethod() &#123;</span><br><span class="line">            this.pluginMethod(this.pluginPrototype);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:500px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>全局指令</tag>
        <tag>directive</tag>
        <tag>filter</tag>
        <tag>全局过滤器</tag>
        <tag>mixin</tag>
        <tag>全局混入</tag>
        <tag>全局混合</tag>
        <tag>插件</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 05. vue的style</title>
    <url>//articles/4576.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 05 章: vue的style</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="vue的style"><a class="markdownIt-Anchor" href="#vue的style"></a> vue的style</h4>
<ol>
<li>多个组件的style可能会出现class重名的情况，当class重名，后引入的组件样式会覆盖之前的同名样式</li>
<li>可以在组件的 style 标签中添加 scoped属性，让当前style仅作用于当前组件(app的style不加scoped)</li>
<li>style 标签还有lang属性，默认是css。若要修改less，需注意:需要添加 less-loader.</li>
<li>npm view webpack version 可以查看对应版本</li>
<li>vue2 webpack使用的4.46 less-load 8以后得版本是为了迎合webpack5 所以需要安装less-loader 7版本</li>
<li>安装 npm i less-loader@7</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;span class=&quot;namecls&quot;&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;span class=&quot;lessname&quot;&gt;less 样式&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:400px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">    .lessname</span><br><span class="line">    &#123;</span><br><span class="line">        font-size:30px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.namecls</span><br><span class="line">    &#123;</span><br><span class="line">        color:blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>school.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;schooldv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;School组件&lt;/h2&gt;</span><br><span class="line">        &lt;span class=&quot;namecls&quot;&gt;姓名：&#123;&#123;schoolName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            schoolName:&#x27;vue学校&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;css&quot;&gt;</span><br><span class="line">.schooldv&#123;</span><br><span class="line">    background-color:cadetblue;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">.namecls</span><br><span class="line">&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>style</tag>
        <tag>less</tag>
        <tag>scoped</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 06. webStorage浏览器的本地存储</title>
    <url>//articles/fef3.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 06 章: webStorage浏览器的本地存储</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="webstorage浏览器的本地存储"><a class="markdownIt-Anchor" href="#webstorage浏览器的本地存储"></a> webStorage浏览器的本地存储</h4>
<ol>
<li>浏览器通过 window.sessionStorage 和 window.localStorage 属性实现本地存储</li>
<li>相关api<br>
xxxStorage.setItem(‘key’,‘value’) 存储数据<br>
xxxStorage.getItem(‘key’) 读取数据<br>
xxxStorage.removeItem(‘key’) 删除某个数据<br>
xxxStorage.clear()  清空所有数据</li>
<li>sessionStorage 存储的内容会随着浏览器的关闭而消失.</li>
<li>localStorage 存储的内容需要手动调用api清除</li>
<li>xxxStorage.getItem(‘key’) 如果key不存在，则返回null</li>
<li>JSON.parse(null) 返回的依然是null</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>Student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model.lazy=&quot;addStuName&quot; @keyup.enter=&quot;addStu&quot;&gt;&lt;br/&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;stu in stus&quot; :key=&quot;stu.id&quot;&gt;&#123;&#123;stu.stuName&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;button @click=&quot;changeStuName&quot;&gt;修改第一个学生的姓名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            addStuName: &#x27;&#x27;,</span><br><span class="line">            //从localStorage中获取数据 如果为null则返回空数组。确保用户打开浏览器时显示的是上次保存在localStorage中的数据</span><br><span class="line">            stus: JSON.parse(localStorage.getItem(&#x27;stu&#x27;)) || []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addStu() &#123;</span><br><span class="line">            const newStu = &#123; id: this.stus.length, stuName: this.addStuName &#125;;</span><br><span class="line">            this.stus.push(newStu);</span><br><span class="line">            this.addStuName=&#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        //修改第一个学生的姓名，此时需要开启深度监视，否则无法watch无法监视到stu内部的元素属性的修改，就无法触发监视事件（修改localStorage中的数据）</span><br><span class="line">        changeStuName() &#123;</span><br><span class="line">            this.stus[0].stuName = this.stus[0].stuName+&#x27;change&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        stus: &#123;</span><br><span class="line">            //放弃watch的简写方式开启深度监视，确保当修改了stu数组内部元素的属性后依旧可以监视到数据改变并存储到localStorage中</span><br><span class="line">            deep: true,</span><br><span class="line">            handler(value) &#123;</span><br><span class="line">                localStorage.setItem(&#x27;stu&#x27;,JSON.stringify(value))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>localStorage</tag>
        <tag>sessionStorage</tag>
        <tag>本地存储</tag>
        <tag>webStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 07. vue自定义事件</title>
    <url>//articles/e1f2.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 07 章: vue自定义事件</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="vue自定义事件"><a class="markdownIt-Anchor" href="#vue自定义事件"></a> vue自定义事件</h4>
<ol>
<li>
<p>可以给组件使用 v-on:自定义事件=“事件处理方法” 或者 @自定义事件=“事件处理方法” 来绑定并处理自定义事件.适用于子组件给父组件传递数据</p>
</li>
<li>
<p>在组件中 使用 this.$emit(‘自定义事件’,参数) 的形式触发自定义事件.参数可以是 字符串、数值、数组或者对象。</p>
</li>
<li>
<p>也可以通过 ref=‘refName’ 在mounted中 使用 $on 的方式绑定并处理自定义事件</p>
</li>
<li>
<p>mounted中使用 this.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>e</mi><mi>f</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">refs.refName.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit">s</span><span class="mord mathrm">.</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">e</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mord mathit" style="margin-right:0.10903em;">N</span><span class="mord mathit">a</span><span class="mord mathit">m</span><span class="mord mathit">e</span><span class="mord mathrm">.</span></span></span></span>on(‘自定义事件’,function(参数){ })的方式绑定并处理</p>
</li>
<li>
<p>ref结合mounted与$on的写法更灵活，比如延迟触发、axios后再处理事件</p>
</li>
<li>
<p>在绑定的组件可以使用 this.$off() 解绑自定义事件.</p>
<p>this.$off(‘eventName’)  解绑一个自定义事件</p>
<p>this.$off([‘eventName1’,‘eventName2’])  解绑多个自定义事件</p>
<p>this.$off()  解绑所有的自定义事件</p>
</li>
<li>
<p>如果组件被销毁，那么绑定的自定义事件不再有效果。</p>
</li>
<li>
<p>注意: mounted 中 $on的回调函数中,this是当前绑定自定事件的组件对象vc，而不是vue对象vm。 如果需要vm则需要将回调函数写为箭头函数</p>
</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;sendStuName&quot;&gt;自定义事件-回传学生的名字&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;unbind&quot;&gt;解绑自定义事件&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;destoryStu&quot;&gt;销毁组件&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&#x27;title&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendStuName() &#123;</span><br><span class="line">            console.log(&#x27;function sendStuName&#x27;);</span><br><span class="line">            //触发自定义事件 customEvent,传参对象</span><br><span class="line">            this.$emit(&#x27;customEvent&#x27;,&#123;name:this.stuName&#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        unbind() &#123;</span><br><span class="line">            //解绑一个自定义事件</span><br><span class="line">            this.$off(&#x27;customEvent&#x27;)</span><br><span class="line">            //解绑多个自定义事件</span><br><span class="line">            this.$off([&#x27;customEvent&#x27;])</span><br><span class="line">            // 解绑所有的自定义事件</span><br><span class="line">            this.$off()</span><br><span class="line">        &#125;,</span><br><span class="line">        destoryStu() &#123;</span><br><span class="line">            // 销毁当前组件对象</span><br><span class="line">            this.$destroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    unbind: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:300px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        vue自定义事件</span><br><span class="line">        1. 可以给组件使用 v-on:自定义事件=&quot;事件处理方法&quot; 或者 @自定义事件=&quot;事件处理方法&quot; 来绑定并处理自定义事件.适用于子组件给父组件传递数据</span><br><span class="line">        2. 在组件中 使用 this.$emit(&#x27;自定义事件&#x27;,参数) 的形式触发自定义事件.参数可以是 字符串、数值、数组或者对象。</span><br><span class="line">        2. 也可以通过 ref=&#x27;refName&#x27; 在mounted中 使用 $on 的方式绑定并处理自定义事件</span><br><span class="line">        3. mounted中使用 this.$refs.refName.$on(&#x27;自定义事件&#x27;,function(参数)&#123; &#125;)的方式绑定并处理</span><br><span class="line">        4. ref结合mounted与$on的写法更灵活，比如延迟触发、axios后再处理事件</span><br><span class="line">        5. 在绑定的组件可以使用 this.$off() 解绑自定义事件. </span><br><span class="line">            this.$off(&#x27;eventName&#x27;)  解绑一个自定义事件</span><br><span class="line">            this.$off([&#x27;eventName1&#x27;,&#x27;eventName2&#x27;])  解绑多个自定义事件</span><br><span class="line">            this.$off()  解绑所有的自定义事件</span><br><span class="line">        6. 如果组件被销毁，那么绑定的自定义事件不再有效果。</span><br><span class="line">        7. 注意: mounted 中 $on的回调函数中,this是当前绑定自定事件的组件对象vc，而不是vue对象vm。 如果需要vm则需要将回调函数写为箭头函数</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;span&gt;学生组件的姓名是:&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;!--组件student 绑定自定义事件customEvent 事件处理方法getStuName --&gt;</span><br><span class="line">    &lt;Student v-on:customEvent=&quot;getStuName&quot; title=&quot;v-on方式绑定自定义事件&quot;&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;Student @customEvent=&quot;getStuName&quot; title=&quot;@ 方式绑定自定义事件&quot;&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;Student ref=&quot;stu&quot;  title=&quot;ref emit方式绑定自定义事件&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 直接处理自定义事件</span><br><span class="line">        getStuName(param) &#123;</span><br><span class="line">            console.log(&#x27;param&#x27;, param);</span><br><span class="line">            this.stuName = param.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        // 通过 mounted+$refs+$on 的方式处理自定时间。方式更灵活。 例如延迟处理、axios后处理等等.</span><br><span class="line">        // 回调函数的this是绑定自定事件的组件即stu组件，无法获取到当前app组件的stuName，需要改为箭头函数或者使用注释行的代码</span><br><span class="line">        this.$refs.stu.$on(&#x27;customEvent&#x27;,(param)=&gt; &#123;</span><br><span class="line">            console.log(&#x27;this.stu.$on&#x27;, param);</span><br><span class="line">            this.stuName = param.name;</span><br><span class="line">        &#125;)</span><br><span class="line">        // this.$refs.stu.$on(&#x27;customEvent&#x27;,getStuName)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-evenly;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>mounted</tag>
        <tag>emit</tag>
        <tag>on</tag>
        <tag>off</tag>
        <tag>refs</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 08. 全局事件总线</title>
    <url>//articles/10d9.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 08 章: 全局事件总线</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="vue全局事件总线"><a class="markdownIt-Anchor" href="#vue全局事件总线"></a> vue全局事件总线</h4>
<ol>
<li>一种组件间通信的方式，适用于任意组件通信</li>
<li>在main.js中通过 beforeCreate(){ Vue.prototype.$bus = this; } 安装全局事件总线</li>
<li>主要利用的原理是 VueComponent.prototype.__proto__ === Vue.prototype vc可以使用在vm的原型上添加的属性、方法来实现.</li>
<li>通信方式主要依靠自定义事件，在需要通信的双方(app.vue/student.vue)添加自定义事件和处理自定义事件.</li>
</ol>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    全局事件总线:</span></span><br><span class="line"><span class="comment">    1. 一种组件间通信的方式，适用于任意组件通信</span></span><br><span class="line"><span class="comment">    2. 在main.js中通过 beforeCreate()&#123; Vue.prototype.$bus = this; &#125; 安装全局事件总线</span></span><br><span class="line"><span class="comment">    3. 主要利用的原理是 VueComponent.prototype.__proto__ === Vue.prototype vc可以使用在vm的原型上添加的属性、方法来实现.</span></span><br><span class="line"><span class="comment">    4. 通信方式主要依靠自定义事件，在需要通信的双方(app.vue/student.vue)添加自定义事件和处理自定义事件.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        Vue.prototype.$bus = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        </span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">    &lt;span&gt;学生的姓名是:&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">    &lt;Student ref=&quot;stu&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        //给student添加自定义事件</span><br><span class="line">        this.$bus.$on(&#x27;customEvent&#x27;, (param) =&gt; &#123;</span><br><span class="line">            this.stuName = param.name;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">        this.$bus.off(&#x27;customEvent&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button @click=&quot;busEventClick&quot;&gt;通过全局事件总线触发事件传递数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam-eventBus&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        busEventClick() &#123;</span><br><span class="line">            console.log(&#x27;function busEventClick&#x27;);</span><br><span class="line">            this.$bus.$emit(&#x27;customEvent&#x27;,&#123;name:this.stuName&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>eventbus</tag>
        <tag>全局事件总线</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 09. 消息订阅与发布</title>
    <url>//articles/ac9b.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 09 章: 消息订阅与发布</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="消息订阅与发布"><a class="markdownIt-Anchor" href="#消息订阅与发布"></a> 消息订阅与发布</h4>
<ol>
<li>yarn add pubsub-js 安装消息订阅与发布框架</li>
<li>订阅消息 mounted时 this.pubId = pubsub.subscribe(‘消息名称’, (消息名称, 消息传递数据) =&gt; {}); 消息传递数据可以是字符串、数据、数据或对象</li>
<li>取消订阅消息  beforeDestroy时 pubsub.unsubscribe(this.pubId)</li>
<li>组件发布消息 pubsub.publish(‘消息名称’,消息传递数据})</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>app.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        消息订阅与发布</span><br><span class="line">        1. yarn add pubsub-js 安装消息订阅与发布框架</span><br><span class="line">        2. 订阅消息 mounted时 this.pubId = pubsub.subscribe(&#x27;消息名称&#x27;, (消息名称, 消息传递数据) =&gt; &#123;&#125;); 消息传递数据可以是字符串、数据、数据或对象</span><br><span class="line">        3. 取消订阅消息  beforeDestroy时 pubsub.unsubscribe(this.pubId)</span><br><span class="line">        4. 组件发布消息 pubsub.publish(&#x27;消息名称&#x27;,消息传递数据&#125;)</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;&lt;br/&gt;</span><br><span class="line">    &lt;span&gt;学生的姓名是:&#123;&#123;stuName&#125;&#125;&lt;/span&gt; &lt;br/&gt;</span><br><span class="line">    &lt;Student ref=&quot;stu&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.pubId = pubsub.subscribe(&#x27;subMessage&#x27;, (messasgeName, param) =&gt; &#123;</span><br><span class="line">            console.log(&#x27;messasgeName&#x27;,messasgeName);</span><br><span class="line">            this.stuName = param.stuName</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">        pubsub.unsubscribe(this.pubId)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;publishMessageClick&quot;&gt;发布消息传递数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;odinsam&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        publishMessageClick() &#123;</span><br><span class="line">            pubsub.publish(&#x27;subMessage&#x27;,&#123;stuName:this.stuName&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>消息订阅</tag>
        <tag>消息发布</tag>
        <tag>subscribe</tag>
        <tag>unsubscribe</tag>
        <tag>publish</tag>
        <tag>pubsub-js</tag>
      </tags>
  </entry>
  <entry>
    <title>OdinLog 组件</title>
    <url>//articles/86b2.html</url>
    <content><![CDATA[<p>自定义简单的一个日志组件。可以存储本地文件，也可以存储到数据库(目前仅支持 mysql 和 sqlServer 数据库)。后期扩展和ELK结合。具体源代码在github可以查看。</p>
<span id="more"></span>
<h4 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1. 简介</h4>
<p>组件可以生成对应日志文件( bin 目录下)，可用于winform、webapi项目。如果存储在本地，以日志级别 Info、Debug、Error生成文件夹，内部以 yyyy-MM-dd 格式生成文件夹。日志文件以数字标识，如果单个日志文件大小超过5M则另生成日志文件。</p>
<h4 id="2-组件使用"><a class="markdownIt-Anchor" href="#2-组件使用"></a> 2. 组件使用</h4>
<p>可以使用依赖注入，也可以在配置Config后直接使用</p>
<pre><code><figure class="highlight csharp"><figcaption><span>依赖注入</span></figcaption><table><tr><td class="code"><pre><span class="line">builder.Services.AddOdinSingletonOdinLogs(opt=&gt;</span><br><span class="line">  opt.Config=<span class="keyword">new</span> LogConfig &#123;</span><br><span class="line">      LogSaveType=<span class="keyword">new</span> EnumLogSaveType[]&#123;EnumLogSaveType.All&#125;,</span><br><span class="line">      ConnectionString = <span class="string">&quot;server=xxxx;Database=xxxx;Uid=xxx;Pwd=xxx;&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
   <figure class="highlight csharp"><figcaption><span>直接配置</span></figcaption><table><tr><td class="code"><pre><span class="line">OdinLog.Core.OdinLogs = <span class="keyword">new</span> OdinLogs(<span class="keyword">new</span> LogConfig &#123;</span><br><span class="line">       LogSaveType=<span class="keyword">new</span> EnumLogSaveType[]&#123;EnumLogSaveType.All&#125;,</span><br><span class="line">       ConnectionString = <span class="string">&quot;server=xxxx;Database=xxxx;Uid=xxx;Pwd=xxx;&quot;</span>&#125;);)</span><br></pre></td></tr></table></figure>
   <figure class="highlight csharp"><figcaption><span>调用</span></figcaption><table><tr><td class="code"><pre><span class="line">OdinLogs.Info(<span class="keyword">new</span> LogInfo()&#123;LogContent = <span class="string">&quot;log info test&quot;</span>,LogMark=<span class="string">&quot;log mark&quot;</span>, &#125;);</span><br><span class="line">     OdinLogs.Error(</span><br><span class="line">         <span class="keyword">new</span> ExceptionLog()&#123;</span><br><span class="line">             LogContent = <span class="string">&quot;log exception test&quot;</span>,</span><br><span class="line">             LogMark=<span class="string">&quot;log mark&quot;</span>,</span><br><span class="line">             LogException = <span class="keyword">new</span> Exception(<span class="string">&quot;custom exceptioni&quot;</span>)&#125;);</span><br></pre></td></tr></table></figure>
<pre><code>具体配置参看 LogConfig 结构
</code></pre>
<h4 id="3-存储表结构"><a class="markdownIt-Anchor" href="#3-存储表结构"></a> 3. 存储表结构</h4>
<p><a href="https://github.com/odinsam/OdinLog/tree/master/OdinLog/doc/DDL/scripts">https://github.com/odinsam/OdinLog/tree/master/OdinLog/doc/DDL/scripts</a></p>
<h4 id="4-文件夹结构-文件内容格式如下"><a class="markdownIt-Anchor" href="#4-文件夹结构-文件内容格式如下"></a> 4. 文件夹结构、文件内容格式如下：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- logs</span><br><span class="line">	--Info</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">			0.txt</span><br><span class="line">			1.txt</span><br><span class="line">	--Debug</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">			0.txt</span><br><span class="line">	--Error</span><br><span class="line">      -- 2022-06-01</span><br><span class="line">			0.txt</span><br></pre></td></tr></table></figure>
<p>Info、Debug 文件内容格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【 LogId 】: 766c769d349d494daf82fca503666d5d </span><br><span class="line">【 Log Level 】: Info </span><br><span class="line">【 LogTime 】: 2022-07-03 17:59:44 </span><br><span class="line">【 LogContent 】:</span><br><span class="line">log info test</span><br><span class="line">****************************************************************************************************</span><br></pre></td></tr></table></figure>
<p>Error 文件内容格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【 LogId 】: 57c2978db92a44959e613f7a1e733d8b </span><br><span class="line">【 Log Level 】: Error </span><br><span class="line">【 LogTime 】: 2022-07-03 18:10:51 </span><br><span class="line">【 Exception Message 】: custom exceptioni</span><br><span class="line">【 Exception Info 】: </span><br><span class="line">&#123;</span><br><span class="line">    &quot;ClassName&quot;: &quot;System.Exception&quot;,</span><br><span class="line">    &quot;Message&quot;: &quot;custom exceptioni&quot;,</span><br><span class="line">    &quot;Data&quot;: null,</span><br><span class="line">    &quot;InnerException&quot;: null,</span><br><span class="line">    &quot;HelpURL&quot;: null,</span><br><span class="line">    &quot;StackTraceString&quot;: null,</span><br><span class="line">    &quot;RemoteStackTraceString&quot;: null,</span><br><span class="line">    &quot;RemoteStackIndex&quot;: 0,</span><br><span class="line">    &quot;ExceptionMethod&quot;: null,</span><br><span class="line">    &quot;HResult&quot;: -2146233088,</span><br><span class="line">    &quot;Source&quot;: null,</span><br><span class="line">    &quot;WatsonBuckets&quot;: null</span><br><span class="line">&#125;</span><br><span class="line">****************************************************************************************************</span><br></pre></td></tr></table></figure>
<p>具体的代码在 <a href="https://github.com/odinsam/OdinLog">GitHub</a> <a href="https://www.nuget.org/packages/OdinLog"><img src="https://img.shields.io/nuget/v/OdinLog" alt></a></p>
]]></content>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 01. ref属性</title>
    <url>//articles/821d.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 01 章: ref属性</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="ref属性"><a class="markdownIt-Anchor" href="#ref属性"></a> ref属性</h4>
<ol>
<li>被用来给元素或者子组件注册引用信息(id的替代)</li>
<li>应用在html标签上获取到的是真实的dom元素，应用在组件标签上获取到的是组件对象实例vc</li>
<li>使用方法 &lt;h1 ref=“title”&gt;…&lt;/h1&gt;  或者 &lt;Student ref=“stu”&gt;&lt;/Student&gt;</li>
<li>获取 this.refs.title 真实dom对象 或者 this.refs.stu stu组件对象实例</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        ref属性</span><br><span class="line">        1. 被用来给元素或者子组件注册引用信息(id的替代)</span><br><span class="line">        2. 应用在html标签上获取到的是真实的dom元素，应用在组件标签上获取到的是组件对象实例vc</span><br><span class="line">        3. 使用方法 &lt;h1 ref=&quot;title&quot;&gt;.....&lt;/h1&gt;  或者 &lt;Student ref=&quot;stu&quot;&gt;&lt;/Student&gt;</span><br><span class="line">        4. 获取 this.$refs.title 真实dom对象 或者 this.$refs.stu stu组件对象实例</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title&quot;&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;Student ref=&quot;stu&quot;&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;button @click=&quot;getDomClick&quot;&gt;使用ref获取dom元素&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getDomClick() &#123;</span><br><span class="line">            console.log(&#x27;function getDomClick&#x27;);</span><br><span class="line">            console.log(this.$refs.title);  //获取到真实的dom元素</span><br><span class="line">            console.log(this.$refs.stu);    // student组件对象 vc</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>ref</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶学习</title>
    <url>//articles/e255.html</url>
    <content><![CDATA[<p>Vue2.0进阶学习目录. <a href="da3d.html">vue2.0 基础学习目录</a></p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2>
<h4 id="01-ref属性"><a class="markdownIt-Anchor" href="#01-ref属性"></a> <a href="821d.html">[01] ref属性</a></h4>
<h4 id="02-props配置项"><a class="markdownIt-Anchor" href="#02-props配置项"></a> <a href="40e6.html">[02] props配置项</a></h4>
<h4 id="03-mixin混入配置项"><a class="markdownIt-Anchor" href="#03-mixin混入配置项"></a> <a href="6426.html">[03] mixin混入配置项</a></h4>
<h4 id="04-plugins插件"><a class="markdownIt-Anchor" href="#04-plugins插件"></a> <a href="ec79.html">[04] plugins插件</a></h4>
<h4 id="05-vue的style"><a class="markdownIt-Anchor" href="#05-vue的style"></a> <a href="4576.html">[05] vue的style</a></h4>
<h4 id="06-webstorage浏览器的本地存储"><a class="markdownIt-Anchor" href="#06-webstorage浏览器的本地存储"></a> <a href="fef3.html">[06] webStorage浏览器的本地存储</a></h4>
<h4 id="07-vue自定义事件"><a class="markdownIt-Anchor" href="#07-vue自定义事件"></a> <a href="e1f2.html">[07] vue自定义事件</a></h4>
<h4 id="08-全局事件总线"><a class="markdownIt-Anchor" href="#08-全局事件总线"></a> <a href="10d9.html">[08] 全局事件总线</a></h4>
<h4 id="09-消息订阅与发布"><a class="markdownIt-Anchor" href="#09-消息订阅与发布"></a> <a href="ac9b.html">[09] 消息订阅与发布</a></h4>
<h4 id="10-nexttick与props传递函数"><a class="markdownIt-Anchor" href="#10-nexttick与props传递函数"></a> <a href="fc6a.html">[10] nextTick与props传递函数</a></h4>
]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 - 18.1 vue组件-非单文件组件</title>
    <url>//articles/fd0a.html</url>
    <content><![CDATA[<p><a href="da3d.html">【Vue2.0】学习系列</a> 第 18.1 章: vue组件-非单文件组件</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="1-使用vue组件的步骤"><a class="markdownIt-Anchor" href="#1-使用vue组件的步骤"></a> 1. 使用vue组件的步骤:</h4>
<ol>
<li>创建组件 单文件组件、非单位件组件</li>
<li>注册组件</li>
<li>使用组件（组件标签）</li>
</ol>
<p>定义组件:</p>
<ol>
<li>使用Vue.extend({options}) 或者 const cpt = {options} 创建,其中options和new Vue({options})传入的options略有区别<br>
组件的 options 不需要el， 最终的el由new Vue({options})决定<br>
data必须写成函数，避免组件被服用时，数据存在引用关系。示例代码如下:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data=&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> x1 = data</span><br><span class="line"><span class="keyword">const</span> x2 = data</span><br><span class="line"><span class="comment">// 以上代码会导致数据存在引用关系，当x1修改 a或b 的值，x2也会改变</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> x1 = data()</span><br><span class="line"><span class="keyword">const</span> x2 = data()</span><br><span class="line"><span class="comment">//通过函数形式可以巧妙的避开上边代码的问题  x1修改 x2不会改变</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 template:<code></code> 来配置组件结构</li>
<li>关于组件名<br>
一个单词组成: 首字母小写 student 或者 首字母大写 School<br>
多个单词组成: kebab-case命名  my-school  或者 CamelCase大驼峰  MyStudent(需要vue脚手架支持)<br>
不可以使用 html已有元素名称  h1 div  span 等<br>
尽量使用 name 配置项指定组件在开发者工具中呈现的名字</li>
</ol>
<h4 id="2-注册组件"><a class="markdownIt-Anchor" href="#2-注册组件"></a> 2. 注册组件</h4>
<ol>
<li>局部注册  new Vue({ components:{ 组件名:组件 } })</li>
<li>全局注册  Vue.component(‘组件名’，组件)</li>
</ol>
<h4 id="3-使用组件"><a class="markdownIt-Anchor" href="#3-使用组件"></a> 3. 使用组件</h4>
<ol>
<li>&lt;组件 /&gt; 或者 &lt;组件&gt;&lt;/组件&gt;</li>
<li>&lt;组件 /&gt; 不使用脚手架，会导致后续组件无法渲染</li>
</ol>
<h4 id="4-说明"><a class="markdownIt-Anchor" href="#4-说明"></a> 4. 说明:</h4>
<ol>
<li>组件本质是VueComponent的构造函数，并且是由Vue.extend生成的</li>
<li>当使用组件时，vue会帮助我们创建组件的对象实例（自动调用方法new VueComponent(options)创建组件实例）</li>
<li>每次调用Vue.extend返回的都是一个全新的VueComponent</li>
<li>this指向：<br>
1.组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数都指向VueComponent对象实例<br>
2.new Vue配置中：data函数、methods中的函数、watch中的函数、computed中的函数都指向Vue对象实例</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>18.1.非单文件组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            使用vue组件的步骤:</span></span><br><span class="line"><span class="comment">            1. 创建组件 单文件组件、非单位件组件</span></span><br><span class="line"><span class="comment">            2. 注册组件</span></span><br><span class="line"><span class="comment">            3. 使用组件（组件标签）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            定义组件:</span></span><br><span class="line"><span class="comment">            1. 使用Vue.extend(&#123;options&#125;) 或者 const cpt = &#123;options&#125; 创建,其中options和new Vue(&#123;options&#125;)传入的options略有区别</span></span><br><span class="line"><span class="comment">                组件的 options 不需要el， 最终的el由new Vue(&#123;options&#125;)决定</span></span><br><span class="line"><span class="comment">                data必须写成函数，避免组件被服用时，数据存在引用关系。示例代码如下:</span></span><br><span class="line"><span class="comment">                let data=&#123;a:1,b:2&#125;</span></span><br><span class="line"><span class="comment">                const x1 = data</span></span><br><span class="line"><span class="comment">                const x2 = data</span></span><br><span class="line"><span class="comment">                // 以上代码会导致数据存在引用关系，当x1修改 a或b 的值，x2也会改变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                function data()&#123;</span></span><br><span class="line"><span class="comment">                    return &#123;a:1,b:2&#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                const x1 = data()</span></span><br><span class="line"><span class="comment">                const x2 = data()</span></span><br><span class="line"><span class="comment">                //通过函数形式可以巧妙的避开上边代码的问题  x1修改 x2不会改变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            2. 使用 template:`` 来配置组件结构</span></span><br><span class="line"><span class="comment">            3. 关于组件名</span></span><br><span class="line"><span class="comment">                一个单词组成: 首字母小写 student 或者 首字母大写 School</span></span><br><span class="line"><span class="comment">                多个单词组成: kebab-case命名  my-school  或者 CamelCase大驼峰  MyStudent(需要vue脚手架支持)</span></span><br><span class="line"><span class="comment">                不可以使用 html已有元素名称  h1 div  span 等</span></span><br><span class="line"><span class="comment">                尽量使用 name 配置项指定组件在开发者工具中呈现的名字 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            注册组件</span></span><br><span class="line"><span class="comment">            1. 局部注册  new Vue(&#123; components:&#123; 组件名:组件 &#125; &#125;)</span></span><br><span class="line"><span class="comment">            2. 全局注册  Vue.component(&#x27;组件名&#x27;，组件)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            使用组件</span></span><br><span class="line"><span class="comment">            1. &lt;组件 /&gt; 或者 &lt;组件&gt;&lt;/组件&gt;</span></span><br><span class="line"><span class="comment">            2. &lt;组件 /&gt; 不使用脚手架，会导致后续组件无法渲染</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            说明:</span></span><br><span class="line"><span class="comment">            1. 组件本质是VueComponent的构造函数，并且是由Vue.extend生成的</span></span><br><span class="line"><span class="comment">            2. 当使用组件时，vue会帮助我们创建组件的对象实例（自动调用方法new VueComponent(options)创建组件实例）</span></span><br><span class="line"><span class="comment">            3. 每次调用Vue.extend返回的都是一个全新的VueComponent</span></span><br><span class="line"><span class="comment">            4. this指向：  </span></span><br><span class="line"><span class="comment">                1.组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数都指向VueComponent对象实例</span></span><br><span class="line"><span class="comment">                2.new Vue配置中：data函数、methods中的函数、watch中的函数、computed中的函数都指向Vue对象实例</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Student</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        Vue.config.productionTip = false;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        const Student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            name: &#x27;Student&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    stuName: &#x27;odinsam&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    stuAge: 20</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Student组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓名：</span><span class="template-variable">&#123;&#123;<span class="name">stuName</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;<span class="name">stuAge</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        const School = &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            name: &#x27;school&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            data() &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    schName: &#x27;vue学校&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    schAddress: &#x27;南京&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            template: `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>School组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>课程：</span><span class="template-variable">&#123;&#123;<span class="name">schName</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>地址：</span><span class="template-variable">&#123;&#123;<span class="name">schAddress</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            `</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            el: &#x27;#root&#x27;, // 直接指定vue对应的容器</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            components: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                Student,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                school: School</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>component</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0进阶 - 10. nextTick与props传递函数</title>
    <url>//articles/fc6a.html</url>
    <content><![CDATA[<p><a href="e255.html">【Vue2.0】进阶学习系列</a> Vue2.0进阶第 10 章: nextTick与props传递函数</p>
<span id="more"></span>
<p>完整代码可以在 <a href="https://github.com/odinsam/learn-vue2.0">GitHub</a> 。</p>
<h4 id="nexttick与props传递函数"><a class="markdownIt-Anchor" href="#nexttick与props传递函数"></a> nextTick与props传递函数</h4>
<ol>
<li>this.$nextTick(回调函数) 下一次dom更新结束后执行回调函数</li>
<li>使用时机： 当改变数据后，要基于更新后的新dom进行某些操作时，使用nextTick利用回调函数执行操作</li>
<li>父组件可以通过props给子组件传递函数，当子组件执行函数回调时，回传数据达到子组件向父组件传递数据的目的</li>
</ol>
<figure class="highlight plaintext"><figcaption><span>student.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        nextTick与props传递函数</span><br><span class="line">        1. this.$nextTick(回调函数) 下一次dom更新结束后执行回调函数</span><br><span class="line">        2. 使用时机： 当改变数据后，要基于更新后的新dom进行某些操作时，使用nextTick利用回调函数执行操作</span><br><span class="line">        3. 父组件可以通过props给子组件传递函数，当子组件执行函数回调时，回传数据达到子组件向父组件传递数据的目的</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;div class=&quot;studv&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Student组件&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">        &lt;span v-if=&quot;!isEdit&quot;&gt;姓名：&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span v-else&gt;&lt;input ref=&quot;txtStuName&quot; type=&quot;text&quot; v-model=&quot;stuName&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;editOrOkClick&quot;&gt;&#123;&#123;btnText[isEdit]&#125;&#125;&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isEdit:false,</span><br><span class="line">            stuName: &#x27;odinsam&#x27;,</span><br><span class="line">            btnText:&#123;true:&#x27;确定&#x27;,false:&#x27;编辑&#x27;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //app组件传递的回调函数</span><br><span class="line">    props:[&#x27;getStuName&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        editOrOkClick() &#123;</span><br><span class="line">            if (this.isEdit)</span><br><span class="line">            &#123;</span><br><span class="line">                //子组件调用父组件通过props传递的回调函数向父组件传递数据</span><br><span class="line">                this.getStuName(&#123;stuName:this.stuName&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            this.isEdit = !this.isEdit;</span><br><span class="line">            // 在本次操作执行完成dom修改后，执行回调函数，使新出现的文本框获得焦点</span><br><span class="line">            this.$nextTick(function () &#123;</span><br><span class="line">                if (this.isEdit) &#123;</span><br><span class="line">                    this.$refs.txtStuName.focus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">.studv&#123;</span><br><span class="line">    background-color:bisque;</span><br><span class="line">    width:200px;</span><br><span class="line">    padding:50px;</span><br><span class="line">    margin-left:50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dvapp&quot;&gt;</span><br><span class="line">    &lt;h2&gt;app组件&lt;/h2&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;span&gt;学生的姓名是:&#123;&#123;stuName&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;Student :getStuName=&quot;getStuName&quot;&gt;&lt;/Student&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            stuName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Student</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getStuName(param) &#123;</span><br><span class="line">            console.log(param);</span><br><span class="line">            this.stuName = param.stuName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">.dvapp</span><br><span class="line">&#123;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>props</tag>
        <tag>nextTick</tag>
      </tags>
  </entry>
  <entry>
    <title>macos 小指令</title>
    <url>//articles/ade6.html</url>
    <content><![CDATA[<p>macos 中的一些小指令</p>
<span id="more"></span>
<h4 id="生成markdownde的目录树"><a class="markdownIt-Anchor" href="#生成markdownde的目录树"></a> 生成markdownde的目录树</h4>
<p>find . -print | sed -e ‘s;[^/]*/;|<strong><strong>;g;s;</strong></strong>|; |;g’</p>
]]></content>
      <categories>
        <category>macos</category>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>vscode控制台中文乱码</title>
    <url>//articles/cda.html</url>
    <content><![CDATA[<blockquote>
<p>vscode是现在较为流行的一款开发工具，他可以按照用户对应需要的语言插件进行自定义安装和配置，在使用vscode的过程中发现终端输出控制台输出稳重会出现中文乱码的情况，网上搜索很多的解决方案都是修改系统的GBK，但是发现在修改了GBK以后可能会造成其他程序出现中文乱码以及其他的一些问题，这里我们使用修改PowerShell的OutputEncoding来解决这个问题。仅win10系统测试有效。</p>
</blockquote>
<span id="more"></span>
<p>正确方法：</p>
<blockquote>
<p>1.打开 Windows PowerShell (管理员)，执行命令：</p>
</blockquote>
<pre><code>Set-ExecutionPolicy Unrestricted
</code></pre>
<blockquote>
<p>2.新建文档 profile.ps1</p>
</blockquote>
<blockquote>
<p>3.用记事本编辑，粘贴以下代码并保存：</p>
</blockquote>
<pre><code>$OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding
</code></pre>
<blockquote>
<p>4.把 profile.ps1 保存到以下路径：</p>
</blockquote>
<pre><code>C:\Windows\System32\WindowsPowerShell\v1.0
</code></pre>
<blockquote>
<p>5.完成。</p>
</blockquote>
<blockquote>
<p>6.检测是否成功</p>
</blockquote>
<pre><code>打开 PowerShell，执行：chcp 结果为 Active code page: 65001，说明设置成功了</code></pre>
]]></content>
      <categories>
        <category>VsCode</category>
      </categories>
      <tags>
        <tag>中文乱码</tag>
        <tag>VsCode</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 BackgroundService 类在微服务中实现后台任务</title>
    <url>//articles/2893.html</url>
    <content><![CDATA[<blockquote>
<p>任何应用程序中都可能需要使用后台任务和计划作业，无论应用程序是否遵循微服务体系结构模式均是如此。 使用微服务体系结构的区别在于，你可以在一个单独的用于托管的进程/容器中实现后台任务。一般在 .NET 中，我们将这些类型的任务称为托管服务，因为它们是托管在主机/应用程序/微服务中的服务/逻辑。 请注意，在这种情况下，托管服务仅表示具有后台任务逻辑的类。</p>
</blockquote>
<span id="more"></span>
<h4 id="1-ihostedservice介绍"><a class="markdownIt-Anchor" href="#1-ihostedservice介绍"></a> 1. IHostedService介绍</h4>
<p>自 .NET Core 2.0 开始，该框架提供名为 IHostedService 的新接口，有助于轻松实现托管服务。 基本理念是，可以注册多个后台任务（托管服务），在 Web 主机或主机运行时在后台运行具体介绍如下图：</p>
<p><img src="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/multi-container-microservice-net-applications/media/background-tasks-with-ihostedservice/ihosted-service-webhost-vs-host.png" alt="IHostedService介绍"></p>
<p>但是，由于大多数后台任务在取消令牌管理和其他典型操作方面都有类似的需求，因此有一个非常方便且可以从中进行派生的抽象基类，名为 BackgroundService（自 .NET Core 2.1 起提供），该类提供设置后台任务所需的主要工作。从抽象基类派生时，只需在自定义的托管服务类中实现 ExecuteAsync() 方法，结合 <a href="https://www.odinsam.com/articles/a3b9.html">利用Canal集合RabbitMQ实现数据和缓存同步</a> 这篇文章，就可以搭建Canal + RabbitMQ + CacheManager 的基本架构，从而实现由 Canal 监控和发现 mysql 数据库的增量信息并推送到 RabbitMQ ，而我们使用BackgroundSerivce 搭建的后台托管服务消费 RabbitMQ 信息修改 Redis 中的缓存数据，而 CacheManager 设定 Redis 缓存为缓存挡板，故而内存中的二级缓存也会得到对应修改。</p>
<h4 id="2-具体实现"><a class="markdownIt-Anchor" href="#2-具体实现"></a> 2. 具体实现</h4>
<p>这里是以 ErrorCode 错误码为例，实现一系列操作。首先是 实现 BackgroundService 的子类 OdinBackgroundService ：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinBackgroundService</span> : <span class="title">BackgroundService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ProjectExtendsOptions apiOptions;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ReceiveRabbitMQHelper receiveRabbitMQHelper;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> executionCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Timer _timer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OdinBackgroundService</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.apiOptions = OdinInjectHelper.GetService&lt;IOptionsSnapshot&lt;ProjectExtendsOptions&gt;&gt;().Value;</span><br><span class="line">        <span class="keyword">this</span>.receiveRabbitMQHelper = <span class="keyword">new</span> ReceiveRabbitMQHelper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        receiveRabbitMQHelper.ReceiveMQ(apiOptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">StartAsync</span>(<span class="params">CancellationToken cancellationToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ExecuteAsync(cancellationToken);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 Run 】\tTime:【<span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line">        _timer = <span class="keyword">new</span> Timer(DoWork, <span class="literal">null</span>, TimeSpan.Zero, TimeSpan.FromMilliseconds(<span class="number">300</span>));</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">StopAsync</span>(<span class="params">CancellationToken cancellationToken</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 Stop 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line">        _timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.StopAsync(cancellationToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _timer?.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里采用轮询机制，每300ms消费一次 RabbitMQ 的信息，具体的消费代码 ReceiveRabbitMQHelper 如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReceiveRabbitMQHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IRabbitMQReceiveServer rabbitMQReceiveServer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOdinCanalHelper canalHelper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOdinCacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReceiveRabbitMQHelper</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitMQReceiveServer = OdinInjectHelper.GetService&lt;IRabbitMQReceiveServer&gt;();</span><br><span class="line">        <span class="keyword">this</span>.canalHelper = OdinInjectHelper.GetService&lt;IOdinCanalHelper&gt;();</span><br><span class="line">        <span class="keyword">this</span>.cacheManager = OdinInjectHelper.GetService&lt;IOdinCacheManager&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceiveMQ</span>(<span class="params">ProjectExtendsOptions apiOptions</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        rabbitMQReceiveServer.ReceiveJsonMessage(</span><br><span class="line">            apiOptions.RabbitMQ,</span><br><span class="line">            <span class="keyword">new</span> RabbitMQReceivedModel</span><br><span class="line">            &#123;</span><br><span class="line">                ExchangeName = <span class="string">&quot;canal-exchange&quot;</span>,</span><br><span class="line">                QueueName = <span class="string">&quot;canal-queues&quot;</span>,</span><br><span class="line">                AutoAck = <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            (BasicGetResult result, IModel channel) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> msg = RabbitMQReceiveHandler.ReceiveJsonMessageHandler(result, channel);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(msg))</span><br><span class="line">                &#123;</span><br><span class="line">                    System.Console.WriteLine(<span class="string">$&quot;Canal-WorkService:【 Run 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line">                    System.Console.WriteLine(msg);</span><br><span class="line">                    <span class="comment">// 这里用来处理获取到的 RabbitMQ 的增量信息</span></span><br><span class="line">                    ErrorCodeHelper.ErrorCodeCanalHandler(canalHelper, cacheManager, msg);</span><br><span class="line">                    System.Console.WriteLine(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ErrorCodeCanalHandler用来处理获取到的 RabbitMQ 的增量信息，具体封装如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ErrorCodeHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ErrorCodeCanalHandler</span>(<span class="params">IOdinCanalHelper canalHelper, IOdinCacheManager cacheManager, <span class="built_in">string</span> canalString</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> obj = canalHelper.GetCanalInfo(canalString);</span><br><span class="line">        <span class="keyword">var</span> type = obj.type;</span><br><span class="line">        <span class="keyword">switch</span> (type.ToLower())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;insert&quot;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> model = ConvertCanalDataToErrorCodeModel(obj);</span><br><span class="line">                    <span class="keyword">var</span> flag = cacheManager.Add(model.ErrorCode, model);</span><br><span class="line">                    <span class="keyword">if</span> (flag)</span><br><span class="line">                        System.Console.WriteLine(<span class="string">&quot;cacheManager add success&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        System.Console.WriteLine(<span class="string">&quot;cacheManager add fail&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;update&quot;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> model = ConvertCanalDataToErrorCodeModel(obj);</span><br><span class="line">                    cacheManager.Cover&lt;ErrorCode_Model&gt;(model.ErrorCode, model);</span><br><span class="line">                    System.Console.WriteLine(<span class="string">&quot;cacheManager Cover success&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> errorCode = GetErrorCode(obj);</span><br><span class="line">                    <span class="built_in">bool</span> flag = cacheManager.Delete(errorCode);</span><br><span class="line">                    <span class="keyword">if</span> (flag)</span><br><span class="line">                        System.Console.WriteLine(<span class="string">&quot;cacheManager delete success&quot;</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        System.Console.WriteLine(<span class="string">&quot;cacheManager delete fail&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetErrorCode</span>(<span class="params">OdinCanalModel obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> errorCode = obj.data[<span class="number">0</span>].GetValue(<span class="string">&quot;ErrorCode&quot;</span>).ToString();</span><br><span class="line">        <span class="keyword">return</span> errorCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ErrorCode_Model <span class="title">ConvertCanalDataToErrorCodeModel</span>(<span class="params">OdinCanalModel obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> errorCode = obj.data[<span class="number">0</span>].GetValue(<span class="string">&quot;ErrorCode&quot;</span>).ToString();</span><br><span class="line">        <span class="keyword">var</span> codeShowMessage = obj.data[<span class="number">0</span>].GetValue(<span class="string">&quot;CodeShowMessage&quot;</span>).ToString();</span><br><span class="line">        <span class="keyword">var</span> codeErrorMessage = obj.data[<span class="number">0</span>].GetValue(<span class="string">&quot;CodeErrorMessage&quot;</span>).ToString();</span><br><span class="line">        ErrorCode_Model model = <span class="keyword">new</span> ErrorCode_Model()</span><br><span class="line">        &#123;</span><br><span class="line">            ErrorCode = errorCode,</span><br><span class="line">            ErrorMessage = codeErrorMessage,</span><br><span class="line">            ShowMessage = codeErrorMessage,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样基本的搭建就完成了，完整代码可以在 <a href="https://github.com/odinsam/OdinMA">GitHub</a> 。</p>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>.Net Core</tag>
        <tag>微服务</tag>
        <tag>BackgroundService</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql8 远程连接解决办法</title>
    <url>//articles/8b92.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; ;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode无法使用nuget的小问题</title>
    <url>//articles/80b6.html</url>
    <content><![CDATA[<blockquote>
<p>在使用vscode的过程使用NuGet Package Manager插件安装Package包的时候会出现 <font color="red">&quot;Versioning information could not be retrieved from the NuGet package repository. &quot;</font> 的错误导致无法安装Package包，可以修改fetchPackageVersions.js解决问题。</p>
</blockquote>
<span id="more"></span>
<p>问题：</p>
<blockquote>
<p>“Versioning information could not be retrieved from the NuGet package repository. Please try again later.”</p>
</blockquote>
<p>解决方式：</p>
<blockquote>
<p>打开 /Users/用户名/.vscode/extensions/jmrog.vscode-nuget-package-manager-1.1.6/out/src/actions/add-methods/fetchPackageVersions.js 修改后的代码 加上 <font color="#FF0000">.toLowerCase()</font></p>
</blockquote>
   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...node_fetch_1.default(<span class="string">`<span class="subst">$&#123;versionsUrl&#125;</span><span class="subst">$&#123;selectedPackageName.toLowerCase()&#125;</span>/index.json`</span>, utils_1.getFetchOptions(vscode.workspace.getConfiguration(<span class="string">&#x27;http&#x27;</span>)))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>VsCode</category>
      </categories>
      <tags>
        <tag>VsCode</tag>
        <tag>Nuget</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 使用 git-commit-plugin 插件规范提交 Git</title>
    <url>//articles/34fe.html</url>
    <content><![CDATA[<blockquote>
<p>在团队协作开发时，每个人提交代码时都会写 commit message。每个人都有自己的书写风格，翻看我们组的git log, 可以说是五花八门，十分不利于阅读和维护。本文将介绍 Git 提交的规范以及如何利用 git-commit-plugin 插件快速提交规范的commit。</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>一般来说，大厂都有一套的自己的提交规范，尤其是在一些大型开源项目中，commit message 都是十分一致的。因此，我们需要制定统一标准，促使团队形成一致的代码提交风格，更好的提高工作效率，成为一名有追求的工程师。其中 AngularJS 在 github 上 的提交记录被业内许多人认可，逐渐被大家引用。</p>
</blockquote>
<p><strong>Commit message 的格式</strong></p>
<p>每次提交，Commit message 都包括三个部分：header，body 和 footer。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type(scope):空格subject</span><br><span class="line">换行</span><br><span class="line">[body]</span><br><span class="line">换行</span><br><span class="line">[footer]</span><br></pre></td></tr></table></figure>
<p><strong>1. type 类型</strong></p>
<p>type 是 commit 的类别，只允许如下几种标识：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 主要type</span><br><span class="line">feat:     增加新功能</span><br><span class="line">fix:      修复bug</span><br><span class="line"></span><br><span class="line"># 特殊type</span><br><span class="line"> docs:    只改动了文档相关的内容</span><br><span class="line">style:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span><br><span class="line">build:    构造工具的或者外部依赖的改动，例如webpack，npm</span><br><span class="line">refactor:  代码重构时使用</span><br><span class="line">revert:   执行git revert打印的message</span><br><span class="line"></span><br><span class="line"># 暂不使用type</span><br><span class="line">test:     添加测试或者修改现有测试</span><br><span class="line">perf:     提高性能的改动</span><br><span class="line">ci:       与CI（持续集成服务）有关的改动</span><br><span class="line">chore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure>
<p><strong>2. scope</strong></p>
<pre><code>scope也为必填项，用于描述改动的范围，格式为项目名/模块名，例如：xxxServices 。如果一次commit修改多个模块，建议拆分成多次commit，以便更好追踪和维护。
</code></pre>
<p><strong>3. subject</strong></p>
<pre><code>commit 目的的简短描述，不超过50个字符。结尾一般是 #33224 这样的超链接。链接到本次提交的 url 但不强制
</code></pre>
<p><strong>4. body</strong></p>
<pre><code>对本次 commit 的详细描述
</code></pre>
<p><strong>5. footer</strong></p>
<pre><code>Footer 部分只用于以下两种情况：
</code></pre>
<blockquote>
<p>5.1. 不兼容变动: 如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。例如下边这样：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;attribute&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: &#x27;@&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>5.2. 关闭 Issue: 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>
</blockquote>
<p>完整的提交demo如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fix(dev-infra): remove bots from special thanks section</span><br><span class="line"></span><br><span class="line">With this change we remove known used bots from special thanks section in the changelog.</span><br><span class="line"></span><br><span class="line">PR Close #42697</span><br></pre></td></tr></table></figure>
<blockquote>
<p>那么每次都这样编写提交的内容，还要注意对应的格式。我们有没有简单方便的办法呢，那就是使用对应工具的插件。<a href="https://github.com/odinsam/git-commit-plugin">git-commit-plugin</a> 插件可以帮助我们快速的边写提交的信息，但是插件本身并不支持格式化。所以，我在该插件的基础上做了二次开发，具体使用如下：</p>
</blockquote>
<ol>
<li>
<p>下载安装对应的插件：<a href="https://github.com/odinsam/git-commit-plugin/releases/download/1.0.6/git-commit-plugin-1.0.6.vsix">git-commit-plugin-1.0.6.vsix</a></p>
</li>
<li>
<p>在插件的扩展配置中，进行对应的提交模板配置。可以配置多个，这是因为我公司和我自己的提交格式都不一样。具体可以参见项目的 <a href="https://github.com/odinsam/git-commit-plugin/blob/master/README.md">readme.md</a></p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;GitCommitPlugin.Templates&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;templateName&quot;</span>: <span class="string">&quot;Angular&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;templateContent&quot;</span>: <span class="string">&quot;&lt;icon&gt;&lt;space&gt;&lt;type&gt;(&lt;scope&gt;):&lt;space&gt;&lt;subject&gt;&lt;enter&gt;&lt;body&gt;&lt;enter&gt;&lt;footer&gt;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;templateName&quot;</span>: <span class="string">&quot;git-cz&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;templateContent&quot;</span>: <span class="string">&quot;&lt;type&gt;(&lt;scope&gt;):&lt;space&gt;&lt;icon&gt;&lt;space&gt;&lt;subject&gt;&lt;enter&gt;&lt;body&gt;&lt;enter&gt;&lt;footer&gt;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>配置插件是否启用图标</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;GitCommitPlugin.ShowEmoji&quot;</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>最后就可以方便的提交使用了。</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>VsCode</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Mapster对象映射器的封装和使用</title>
    <url>//articles/9cc8.html</url>
    <content><![CDATA[<p>说到 .NET 中的对象映射框架，大部分人的第一映像就是 AutoMapper ，而 Mapster 相对知道的人较少。但其实 Mapster 是一个高性能的对象映射框架，与 AutoMapper 相比，Mapster 在速度和内存占用方面表现更加优秀，可以在只使用1/3内存的情况下获得4倍的性能提升。</p>
<span id="more"></span>
<ol>
<li>基础类</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StuName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StuAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student_DbModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> StudentAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Startup.cs 注册全局映射Config，也可以不注册</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 OdinInjectCore 注入</span></span><br><span class="line">services.AddOdinTypeAdapter(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ForType&lt;ErrorCode_DbModel, ErrorCode_Model&gt;()</span><br><span class="line">                .Map(dest =&gt; dest.ShowMessage, src =&gt; src.CodeShowMessage);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 使用 .net core DI 注入</span></span><br><span class="line">services.AddSingleton&lt;ITypeAdapterMapster&gt;(provider =&gt; <span class="keyword">new</span> TypeAdapterMapster(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ForType&lt;ErrorCode_DbModel, ErrorCode_Model&gt;()</span><br><span class="line">                .Map(dest =&gt; dest.ShowMessage, src =&gt; src.CodeShowMessage);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>使用时获取全局注册Config</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 OdinInjectCore 获取 TypeAdapterMapster</span></span><br><span class="line"><span class="keyword">var</span> mapsterConfig = OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig();</span><br><span class="line"><span class="comment">// 使用 .net core 默认 DI 获取 TypeAdapterMapster</span></span><br><span class="line"><span class="keyword">var</span> mapsterConfig = services.BuildServiceProvider().GetService&lt;ITypeAdapterMapster&gt;().GetConfig();</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>获取数据准备映射转换对象</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 SqlSugar 获取数据库中的数据</span></span><br><span class="line">List&lt;Student_DbModel&gt; stuDbModels = DbScoped.Sugar.Queryable&lt;Student_DbModel&gt;().ToList();</span><br><span class="line">Student_DbModel stuDbModel = stuDbModels[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>对象映射转换</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用全局映射配置转换目标对象类型</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射配置转换目标对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为没有传全局映射配置, 此时虽然全局配置也有 StudentName 属性映射 StuName 的配置，但是会以当前自定义配置为准</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射+全局映射配置转换目标对象对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为全局映射配置中有 StudentName 属性映射 StuName 的配置，所以当自定义配置与全局配置都存在时，以全局配置为准</span></span><br><span class="line"><span class="keyword">var</span> stu = stuDbModel.OdinTypeAdapterBuilder&lt;Student_DbModel, Student&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">            opt.Map(dest =&gt; dest.StuAddress, src =&gt; src.StudentAddress);</span><br><span class="line">        &#125;,</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>
<p>集合映射转换</p>
<p>将 stuDbModels List&lt;ErrorCode_DbModel&gt; 集合映射转换为 stuLst List<Student> 类型的集合</Student></p>
</li>
</ol>
<p>泛型参数说明:</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数名称</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Student_DbModel</td>
<td style="text-align:left">映射的源类型</td>
</tr>
<tr>
<td style="text-align:left">Student</td>
<td style="text-align:left">转换的目标类型</td>
</tr>
<tr>
<td style="text-align:left">List<Student></Student></td>
<td style="text-align:left">最终转换后的集合类型</td>
</tr>
</tbody>
</table>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用全局映射配置转换目标对象类型</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射配置转换目标对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为没有传全局映射配置, 此时虽然全局配置也有 StudentName 属性映射 StuName 的配置，但是会以当前自定义配置为准</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义映射+全局映射配置转换目标对象对象类型</span></span><br><span class="line"><span class="comment">// 需要注意的是: 因为全局映射配置中有 StudentName 属性映射 StuName 的配置，所以当自定义配置与全局配置都存在时，以全局配置为准</span></span><br><span class="line"><span class="keyword">var</span> stuLst = stuDbModels.OdinTypeAdapterBuilder&lt;Student_DbModel, Student, List&lt;Student&gt;&gt;(</span><br><span class="line">        opt =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            opt.Map(dest =&gt; dest.StuName, src =&gt; src.StudentName);</span><br><span class="line">            opt.Map(dest =&gt; dest.StuAddress, src =&gt; src.StudentAddress);</span><br><span class="line">        &#125;,</span><br><span class="line">        OdinInjectCore.GetService&lt;ITypeAdapterMapster&gt;().GetConfig()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<p>关于 Mapster 更详细的用法，请参照 <a href="https://github.com/MapsterMapper/Mapster">Mapster</a> 官网。</p>
<p>具体封装代码详见 <a href="https://github.com/odinsam/OdinPlugs.Utils">Github</a></p>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>.Net Core</tag>
        <tag>Mapster</tag>
      </tags>
  </entry>
  <entry>
    <title>关于net core动态加载配置文件的小问题</title>
    <url>//articles/8950.html</url>
    <content><![CDATA[<blockquote>
<p>在我的项目当中配置文件较多，例如包括 <font color="blue">项目自身的配置文件</font>、<font color="blue">consul.config</font>、<font color="blue">redis.cofing</font>、<font color="blue">identityServer.config</font> 等等，要在项目启动的时候动态加载所有的配置文件。在我的项目中有 serverConfig 文件夹中有对应的所有的配置文件需要动态加载所有文件，在加载过程中发现按照文件路径无法加载 win10 环境。最后发现加载时不能使用绝对路径需要使用相对路径。</p>
</blockquote>
<span id="more"></span>
<h4 id="需求场景"><a class="markdownIt-Anchor" href="#需求场景"></a> 需求场景:</h4>
<blockquote>
<p>serverConfig 中有对应的一系列配置文件。其中 cnf.json 为主配置文件,里边有当前项目的运行环境的配置，还有其他的文件夹以及对应的其他的配置文件。</p>
</blockquote>
<pre><code>现在需要在Config Builder之前递归加载所有的配置文件。
</code></pre>
<h4 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题:</h4>
<blockquote>
<p>在编码后运行发现，总是找不对对应的配置文件（win 10 环境），代码如下:</p>
</blockquote>
<pre><code><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadConfigFiles</span>(<span class="params"><span class="built_in">string</span> currentPath, IConfigurationBuilder config</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Directory.GetFiles(currentPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Path.GetFileName(item) != <span class="string">&quot;cnf.json&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (File.Exists(item))</span><br><span class="line">                config.Add(<span class="keyword">new</span> JsonConfigurationSource &#123; Path = item, Optional = <span class="literal">false</span>, ReloadOnChange = <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dir = Directory.GetDirectories(currentPath);</span><br><span class="line">    <span class="keyword">if</span> (dir != <span class="literal">null</span> &amp;&amp; dir.Length &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> dirItem <span class="keyword">in</span> dir)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Path.GetDirectoryName(dirItem).EndsWith(Path.Combine(FileHelper.DirectorySeparatorChar, <span class="string">&quot;envConfig&quot;</span>)))</span><br><span class="line">                LoadConfigFiles(dirItem, config);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
代码总是报错，提示找不对config文件
</code></pre>
<h4 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决:</h4>
<blockquote>
<p>最后发现 config.add 加载的文件路径需要是相对路径而不能是绝对路径，解决代码如下:</p>
</blockquote>
<pre><code><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadConfigFiles</span>(<span class="params"><span class="built_in">string</span> currentPath, IConfigurationBuilder config, <span class="built_in">string</span> rootPath</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Directory.GetFiles(currentPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Path.GetFileName(item) != <span class="string">&quot;cnf.json&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> configPath = item.Replace(rootPath, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (File.Exists(item))</span><br><span class="line">                config.Add(<span class="keyword">new</span> JsonConfigurationSource &#123; Path = configPath, Optional = <span class="literal">false</span>, ReloadOnChange = <span class="literal">true</span> &#125;);     <span class="comment">//config.add 加载的文件 路径需要是相对路径 而不能是绝对路径</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dir = Directory.GetDirectories(currentPath);</span><br><span class="line">    <span class="keyword">if</span> (dir != <span class="literal">null</span> &amp;&amp; dir.Length &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> dirItem <span class="keyword">in</span> dir)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Path.GetDirectoryName(dirItem).EndsWith(Path.Combine(FileHelper.DirectorySeparatorChar, <span class="string">&quot;envConfig&quot;</span>)))</span><br><span class="line">                LoadConfigFiles(dirItem, config, rootPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>.Net Core</tag>
      </tags>
  </entry>
  <entry>
    <title>利用BackgroundService封装后台服务</title>
    <url>//articles/c075.html</url>
    <content><![CDATA[<p>在之前的文章 <a href="https://odinsam.com/articles/2893.html">使用 BackgroundService 类在微服务中实现后台任务</a> 中有介绍到如何利用 BackgroundService 来实现后台服务，这里我们依旧利用 BackgroundService 来进行类似 hangfire 的封装。</p>
<span id="more"></span>
<h1 id="odinplugsodinhostedservice"><a class="markdownIt-Anchor" href="#odinplugsodinhostedservice"></a> OdinPlugs.OdinHostedService</h1>
<h3 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h3>
<p>1.1 后台任务 - 普通任务，立即执行，只执行一次</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddOdinBgServiceNomalJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - Nomal - Job - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>1.2 后台任务 - 延迟调用，只执行一次</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>1.3 后台任务 - 循环任务执行：重复执行的任务，使用常见的时间循环模式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>1.4 后台任务 - 循环任务执行：重复执行的任务(任务执行完后继续自动执行)</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddOdinBgServiceLoopJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    opt.ActionJob = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - LoopJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>1.5 后台任务 - 自定义任务</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddOdinBgServiceJob(opt =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Timer timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">worker</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">        Log.Information(<span class="string">$&quot;Service:【 BgService - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    opt.StartAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer = <span class="keyword">new</span> Timer(worker, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">2000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    opt.ExecuteAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    opt.StopAsyncAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    opt.DisposeAction = () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        timer?.Dispose();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>1.6 后台任务 - 多任务执行</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services</span><br><span class="line">    .AddOdinBgServiceJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Timer timer = <span class="literal">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">worker</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        opt.StartAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer = <span class="keyword">new</span> Timer(worker, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">2000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        opt.ExecuteAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        opt.StopAsyncAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer?.Change(Timeout.Infinite, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        opt.DisposeAction = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            timer?.Dispose();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceLoopJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// new ReceiveRabbitMQHelper().ReceiveMQ(_Options);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - LoopJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceRecurringJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.Period = TimeSpan.FromSeconds(<span class="number">1</span>);</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// new ReceiveRabbitMQHelper().ReceiveMQ(_Options);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - RecurringJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceNomalJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - Nomal- Job - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOdinBgServiceScheduleJob(opt =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        opt.DueTime = <span class="number">5000</span>;</span><br><span class="line">        opt.ActionJob = () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">            Log.Information(<span class="string">$&quot;Service:【 BgService - ScheduleJob - Running 】\tTime:【 <span class="subst">&#123;DateTime.Now.ToString(<span class="string">&quot;yyyy-dd-MM hh:mm:ss&quot;</span>)&#125;</span> 】&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>具体的代码在 <a href="https://github.com/odinsam/OdinPlugs.OdinHostedService">GitHub</a> <a href="https://www.nuget.org/packages/OdinPlugs.OdinHostedService"><img src="https://img.shields.io/nuget/v/OdinPlugs.OdinHostedService" alt></a></p>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>.Net Core</tag>
        <tag>微服务</tag>
        <tag>BackgroundService</tag>
        <tag>后台服务</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Canal集合RabbitMQ实现数据和缓存同步</title>
    <url>//articles/a3b9.html</url>
    <content><![CDATA[<blockquote>
<p>Canal的主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。他可以模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议。MySQL master收到dump请求，开始推送 binary log 给 slave (即canal)，canal解析binary log 对象(原始为 byte 流)。</p>
</blockquote>
<span id="more"></span>
<h4 id="canal介绍"><a class="markdownIt-Anchor" href="#canal介绍"></a> Canal介绍</h4>
<blockquote>
<p>Canal 的 Github：<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a> 里边有详细介绍说明以及安装方法。具体不在叙述。</p>
</blockquote>
<h4 id="mysql改动"><a class="markdownIt-Anchor" href="#mysql改动"></a> MySql改动</h4>
<blockquote>
<p>首先需要给mysql创建对应的canal用户</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;canal&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其次修改 my.cnf 文件并 <font color="red">重启数据库</font></p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin <span class="comment"># 开启 binlog</span></span><br><span class="line"><span class="attr">binlog-format</span>=ROW <span class="comment"># 选择 ROW 模式</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="number">1</span> <span class="comment"># 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span></span><br></pre></td></tr></table></figure>
<h4 id="canal配置"><a class="markdownIt-Anchor" href="#canal配置"></a> Canal配置</h4>
<blockquote>
<p>Canal单机环境(开发代码测试)主要配置两个文件，分别是 conf/canal.properties 文件和 conf/example/instance.properties 文件。具体配置如下:</p>
</blockquote>
<p>canal.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##################################################################################################</span><br><span class="line">####### 这部分结构是配置文件自带的 只需要写清楚即可，其中 exchange 为 rabbitMQ的exchange的名字</span><br><span class="line">####### username 和 password 是 rabbitMQ 的 用户名和密码 (我自己新建了一个rabbitMQ用户)</span><br><span class="line">##################################################################################################</span><br><span class="line">    </span><br><span class="line">#########                   RabbitMQ         #############</span><br><span class="line">##################################################</span><br><span class="line">rabbitmq.host = 127.0.0.1</span><br><span class="line">rabbitmq.virtual.host = /</span><br><span class="line">rabbitmq.exchange = canal-exchange</span><br><span class="line">rabbitmq.username = canalConsumer</span><br><span class="line">rabbitmq.password = canalConsumer</span><br><span class="line">rabbitmq.deliveryMode =</span><br></pre></td></tr></table></figure>
<p>最为主要的是要找到配置文件中 <font color="red">canal.serverMode = rabbitMQ</font> 他的默认值是 tcp 切记要改为 <font color="red">rabbitMQ</font></p>
<p>instance.properties</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canal.instance.master.address=127.0.0.1:3306  #数据库的 ip:port</span><br><span class="line">    </span><br><span class="line">canal.instance.dbUsername=canal 	#数据库的 用户名</span><br><span class="line">canal.instance.dbPassword=173Canal~	#数据库的 密码 </span><br><span class="line">    </span><br><span class="line">canal.instance.tsdb.dir=$&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span><br><span class="line">canal.instance.tsdb.url=jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;/h2;CACHE_SIZE=1000;MODE=MYSQL;</span><br><span class="line">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb</span><br><span class="line">    </span><br><span class="line"># canal.instance.filter.regex=.*\\..*	# https://github.com/alibaba/canal/wiki/AdminGuide 搜索 canal.instance.filter.regex 有详细说明</span><br><span class="line">canal.instance.filter.regex=db_OdinOIS.Logs  # 要监控的库和表  https://github.com/alibaba/canal/wiki/AdminGuide 搜索 </span><br><span class="line">canal.instance.filter.regex 有详细说明</span><br><span class="line">    </span><br><span class="line">canal.mq.topic=canal-routingkey # rabbitMQ 创建 queues 时的 routing key 的值</span><br></pre></td></tr></table></figure>
<h4 id="数据解析"><a class="markdownIt-Anchor" href="#数据解析"></a> 数据解析</h4>
<blockquote>
<p>至此如果以上步骤都没有问题的话，执行 ./bin/startup.sh 启动，并在你监控的表中设置增量数据，rabbitMQ 就会有对应数据。获取到的数据为json格式，具体说明如下:</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">// data内为获取到的增量数据 key是数据库对应的字段 value是数据库的值</span></span><br><span class="line">	<span class="attr">&quot;data&quot;</span>: [&#123;</span><br><span class="line">		<span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1487&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Timestamp&quot;</span>: <span class="string">&quot;2021-06-09 05:23:12.538+08:00&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Level&quot;</span>: <span class="string">&quot;Information&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;Entity Framework Core&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Exception&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">		<span class="attr">&quot;Properties&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;_ts&quot;</span>: <span class="literal">null</span></span><br><span class="line">	&#125;],</span><br><span class="line">	<span class="comment">// 库名</span></span><br><span class="line">	<span class="attr">&quot;database&quot;</span>: <span class="string">&quot;db_OdinOIS&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;es&quot;</span>: <span class="number">1623187400000</span>,</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">&quot;isDdl&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="comment">// 字段对应mysql的数据类型</span></span><br><span class="line">	<span class="attr">&quot;mysqlType&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;id&quot;</span>: <span class="string">&quot;int&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Timestamp&quot;</span>: <span class="string">&quot;varchar(100)&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Level&quot;</span>: <span class="string">&quot;varchar(15)&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Message&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Exception&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Properties&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;_ts&quot;</span>: <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">// 如果是 update 操作这里会是更新前的数据</span></span><br><span class="line">	<span class="attr">&quot;old&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">	<span class="comment">// 主键</span></span><br><span class="line">	<span class="attr">&quot;pkNames&quot;</span>: [<span class="string">&quot;id&quot;</span>],</span><br><span class="line">	<span class="attr">&quot;sql&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;sqlType&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">		<span class="attr">&quot;Timestamp&quot;</span>: <span class="number">12</span>,</span><br><span class="line">		<span class="attr">&quot;Level&quot;</span>: <span class="number">12</span>,</span><br><span class="line">		<span class="attr">&quot;Message&quot;</span>: <span class="number">2005</span>,</span><br><span class="line">		<span class="attr">&quot;Exception&quot;</span>: <span class="number">-4</span>,</span><br><span class="line">		<span class="attr">&quot;Properties&quot;</span>: <span class="number">2005</span>,</span><br><span class="line">		<span class="attr">&quot;_ts&quot;</span>: <span class="number">93</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="comment">// 表名字</span></span><br><span class="line">	<span class="attr">&quot;table&quot;</span>: <span class="string">&quot;Logs&quot;</span>,</span><br><span class="line">	<span class="comment">// 时间戳</span></span><br><span class="line">	<span class="attr">&quot;ts&quot;</span>: <span class="number">1623187530269</span>,</span><br><span class="line">	<span class="comment">// 操作类型</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;INSERT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以利用代码从 rabbitMQ 中消费对应的信息，然后再做其他操作。当然也可以利用 Canal 结合 redis 实现 mysql 和缓存数据同步，在利用CacheManager类库，利用redis做挡板，就可以同时实现 redis 缓存和内存缓存同步。这样整个分布式项目就可以实现读写分离、缓存同步。</p>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>.Net Core</tag>
        <tag>Canal</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>基于HttpClientFactory的封装和使用</title>
    <url>//articles/4ff6.html</url>
    <content><![CDATA[<blockquote>
<p>.Net Core2.0 版本以前 HttpClient 还是挺坑的，我们需要操心怎么建立如何释放，而且代码质量不好还会影响 HttpClient 的性能和访问速度。2.0版本以后 HttpClientFactory 的出现解决了我们所有的痛点，我们不须要关心如何建立 HttpClient 又如何释放它。经过它能够建立具备特定业务的HttpClient，并且能够很友好的和 DI 容器结合使用。</p>
</blockquote>
<span id="more"></span>
<h4 id="1-首先在-startupcs-文件的-configureservices-方法中注入-httpclient"><a class="markdownIt-Anchor" href="#1-首先在-startupcs-文件的-configureservices-方法中注入-httpclient"></a> 1. 首先在 Startup.cs 文件的 ConfigureServices 方法中注入 HttpClient</h4>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="keyword">new</span> HttpClientHandler();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> cerItem <span class="keyword">in</span> _Options.SslCers)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(cerItem.CerPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clientCertificate = <span class="keyword">new</span> X509Certificate2(cerItem.CerPath, cerItem.CerPassword);</span><br><span class="line">        handler.ClientCertificates.Add(clientCertificate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> handlerWithCer = <span class="keyword">new</span> HttpClientHandler();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> cerItem <span class="keyword">in</span> _Options.SslCers)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(cerItem.CerPath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clientCertificate = <span class="keyword">new</span> X509Certificate2(cerItem.CerPath, cerItem.CerPassword);</span><br><span class="line">        handlerWithCer.ClientCertificates.Add(clientCertificate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">services.AddHttpClient(<span class="string">&quot;OdinClient&quot;</span>, c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;).ConfigurePrimaryHttpMessageHandler(() =&gt; handler);</span><br><span class="line">services.AddHttpClient(<span class="string">&quot;OdinClientCer&quot;</span>, c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;).ConfigurePrimaryHttpMessageHandler(() =&gt; handlerWithCer);</span><br></pre></td></tr></table></figure>
<p>这里我注入了两个 HttpClient，一个是没有证书的，一个是有证书的。<font color="red">如何在 Post 和 Get 的时候动态传递证书，有知道的小伙伴可以留言告诉我一下（我没找到这个解决的办法）。</font></p>
<h4 id="2-接下来可以在拦截器里开启-requestbody-重复读取"><a class="markdownIt-Anchor" href="#2-接下来可以在拦截器里开启-requestbody-重复读取"></a> 2. 接下来可以在拦截器里开启 Request.Body 重复读取。</h4>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">context.HttpContext.Request.EnableBuffering();</span><br></pre></td></tr></table></figure>
<h4 id="3-封装获取requestbody的方法"><a class="markdownIt-Anchor" href="#3-封装获取requestbody的方法"></a> 3. 封装获取Request.Body的方法</h4>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">HttpRequestExtends</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ReadRequestBody</span>(<span class="params"><span class="keyword">this</span> HttpRequest request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(request.Body);</span><br><span class="line">        <span class="keyword">var</span> data = reader.ReadToEndAsync();</span><br><span class="line">        request.Body.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">        <span class="keyword">return</span> data.Result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-封装httpclient方法这里只是封装了-get-和-post-作为演示"><a class="markdownIt-Anchor" href="#4-封装httpclient方法这里只是封装了-get-和-post-作为演示"></a> 4. 封装HttpClient方法(这里只是封装了 Get 和 Post 作为演示)</h4>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OdinHttpClientFactory</span> : <span class="title">IOdinHttpClientFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">GetRequestAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> clientName, <span class="built_in">string</span> uri, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; customHeaders = <span class="literal">null</span>, <span class="built_in">string</span> mediaType = <span class="string">&quot;application/json&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clientFactory = OdinInjectHelper.GetService&lt;IHttpClientFactory&gt;();</span><br><span class="line">        <span class="keyword">var</span> client = clientFactory.CreateClient(clientName);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage()</span><br><span class="line">        &#123;</span><br><span class="line">            RequestUri = <span class="keyword">new</span> Uri(uri),</span><br><span class="line">            Method = HttpMethod.Get,</span><br><span class="line">        &#125;;</span><br><span class="line">        RequestHeaderAdd(request, customHeaders);</span><br><span class="line">        request.Headers.Accept.Add(<span class="keyword">new</span> MediaTypeWithQualityHeaderValue(mediaType));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> GetResponseResult&lt;T&gt;(client, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">PostRequestAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> clientName, <span class="built_in">string</span> uri, Object obj, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; customHeaders = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                <span class="built_in">string</span> mediaType = <span class="string">&quot;application/json&quot;</span>, Encoding encoder = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> clientFactory = OdinInjectHelper.GetService&lt;IHttpClientFactory&gt;();</span><br><span class="line">        <span class="keyword">var</span> client = clientFactory.CreateClient(clientName);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> HttpRequestMessage()</span><br><span class="line">        &#123;</span><br><span class="line">            RequestUri = <span class="keyword">new</span> Uri(uri),</span><br><span class="line">            Method = HttpMethod.Post,</span><br><span class="line">        &#125;;</span><br><span class="line">        RequestHeaderAdd(request, customHeaders);</span><br><span class="line">        request.Content = GenerateContent(obj, mediaType, encoder);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> GetResponseResult&lt;T&gt;(client, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpContent <span class="title">GenerateContent</span>(<span class="params">Object obj, <span class="built_in">string</span> mediaType, Encoding encoder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(String) == obj.GetType())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GenerateContent&lt;String&gt;(obj.ToString(), mediaType, encoder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GenerateContent&lt;Object&gt;(obj, mediaType, encoder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpContent <span class="title">GenerateContent</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj, <span class="built_in">string</span> mediaType, Encoding encoder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder jsonContent = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="built_in">string</span> sendContent = <span class="built_in">string</span>.Empty;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic = ConvertPostDataToDictionary&lt;T&gt;(obj, encoder);</span><br><span class="line">        <span class="keyword">if</span> (mediaType == <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sendContent = JsonConvert.SerializeObject(dic);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sendContent = ConvertDictionaryToPostFormData(dic).ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringContent(</span><br><span class="line">                        sendContent,</span><br><span class="line">                        encoder == <span class="literal">null</span> ? Encoding.UTF8 : encoder,</span><br><span class="line">                        mediaType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">static</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">PostResponseResult</span>&lt;<span class="title">T</span>&gt;(<span class="params">HttpClient client, HttpRequestMessage request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line">        <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetResult&lt;T&gt;(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;请求出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">static</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">GetResponseResult</span>&lt;<span class="title">T</span>&gt;(<span class="params">HttpClient client, HttpRequestMessage request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(request);</span><br><span class="line">        <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetResult&lt;T&gt;(response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;请求出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RequestHeaderAdd</span>(<span class="params">HttpRequestMessage request, Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; customHeaders</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (customHeaders != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; customHeader <span class="keyword">in</span> customHeaders)</span><br><span class="line">            &#123;</span><br><span class="line">                request.Headers.Add(customHeader.Key, customHeader.Value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> T <span class="title">GetResult</span>&lt;<span class="title">T</span>&gt;(<span class="params">HttpResponseMessage httpResponseMessage</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 确认响应成功，否则抛出异常</span></span><br><span class="line">        <span class="comment">// result.EnsureSuccessStatusCode();</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(<span class="built_in">byte</span>[]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)Convert.ChangeType(httpResponseMessage.Content.ReadAsByteArrayAsync(), <span class="keyword">typeof</span>(T));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(Stream))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)Convert.ChangeType(httpResponseMessage.Content.ReadAsStreamAsync().Result, <span class="keyword">typeof</span>(T));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">                <span class="keyword">return</span> (T)Convert.ChangeType(httpResponseMessage.Content.ReadAsStringAsync().Result, <span class="keyword">typeof</span>(T));</span><br><span class="line">            <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;T&gt;(httpResponseMessage.Content.ReadAsStringAsync().Result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Dictionary</span>&lt;<span class="title">string</span>, <span class="title">string</span>&gt; <span class="title">ConvertPostDataToDictionary</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj, Encoding encoder = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(T) == <span class="keyword">typeof</span>(String))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> obj.ToString().Split(<span class="string">&#x27;&amp;&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                dic.Add(</span><br><span class="line">                    item.Split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">                    encoder == <span class="literal">null</span> || encoder == Encoding.UTF8 ?</span><br><span class="line">                    item.Split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                    :</span><br><span class="line">                    item.Split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].ConvertStringEncode(Encoding.UTF8, encoder)</span><br><span class="line">                    );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> obj.GetType().GetRuntimeProperties())</span><br><span class="line">            &#123;</span><br><span class="line">                dic.Add(item.Name,</span><br><span class="line">                        encoder == <span class="literal">null</span> || encoder == Encoding.UTF8 ?</span><br><span class="line">                        item.GetValue(obj).ToString()</span><br><span class="line">                        :</span><br><span class="line">                        item.GetValue(obj).ToString().ConvertStringEncode(Encoding.UTF8, encoder)</span><br><span class="line">                        );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StringBuilder <span class="title">ConvertDictionaryToPostFormData</span>(<span class="params">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (dic != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">bool</span> hasParam = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; kv <span class="keyword">in</span> dic)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> name = kv.Key;</span><br><span class="line">                <span class="built_in">string</span> <span class="keyword">value</span> = kv.Value;</span><br><span class="line">                <span class="comment">// 忽略参数名或参数值为空的参数</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(name) &amp;&amp; !<span class="built_in">string</span>.IsNullOrEmpty(<span class="keyword">value</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (hasParam)</span><br><span class="line">                    &#123;</span><br><span class="line">                        builder.Append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    builder.Append(name);</span><br><span class="line">                    builder.Append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                    builder.Append(<span class="keyword">value</span>);</span><br><span class="line">                    hasParam = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-最后封装获取requestbody内容后二次封装的方法因为我会遇到-一个-post-请求但是-url-还带有参数的情况所以这里封装的稍微复杂一些"><a class="markdownIt-Anchor" href="#5-最后封装获取requestbody内容后二次封装的方法因为我会遇到-一个-post-请求但是-url-还带有参数的情况所以这里封装的稍微复杂一些"></a> 5. 最后封装获取Request.Body内容后二次封装的方法，因为我会遇到 一个 Post 请求但是 Url 还带有参数的情况，所以这里封装的稍微复杂一些</h4>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestParamsModel <span class="title">GetRequestParams</span>(<span class="params"><span class="keyword">this</span> Controller controller, <span class="built_in">string</span> paramFormat = <span class="literal">null</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HttpContext context = controller.HttpContext;</span><br><span class="line">    <span class="keyword">var</span> request = context.Request;</span><br><span class="line">    JObject jobj = <span class="keyword">new</span> JObject();</span><br><span class="line">    RequestParamsModel requestParams = <span class="keyword">new</span> RequestParamsModel();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(context.Request.QueryString.ToString()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> param = request.QueryString.ToString().Substring(<span class="number">1</span>);</span><br><span class="line">        requestParams.RequestQueryString = JsonConvert.DeserializeObject&lt;JObject&gt;(JsonConvert.SerializeObject(OdinHttpClientFactory.ConvertPostDataToDictionary&lt;<span class="built_in">string</span>&gt;(param)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.ContentType != <span class="literal">null</span> &amp;&amp; request.ContentType.StartsWith(<span class="string">&quot;application/json&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> param = request.ReadRequestBody();</span><br><span class="line">        requestParams.RequestFormData = JsonConvert.DeserializeObject&lt;JObject&gt;(param);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.ContentType != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            (request.ContentType.StartsWith(<span class="string">&quot;text/plain&quot;</span>) || request.ContentType.StartsWith(<span class="string">&quot;application/javascript&quot;</span>) ||</span><br><span class="line">            request.ContentType.StartsWith(<span class="string">&quot;text/html&quot;</span>) || request.ContentType.StartsWith(<span class="string">&quot;application/xml&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> param = request.ReadRequestBody();</span><br><span class="line">        requestParams.RequestFormDataString = param.Replace(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.ContentType != <span class="literal">null</span> &amp;&amp; request.ContentType.StartsWith(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> param = request.ReadRequestBody();</span><br><span class="line">        requestParams.RequestFormData = JsonConvert.DeserializeObject&lt;JObject&gt;(JsonConvert.SerializeObject(OdinHttpClientFactory.ConvertPostDataToDictionary&lt;<span class="built_in">string</span>&gt;(param)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.ContentType != <span class="literal">null</span> &amp;&amp; request.ContentType.StartsWith(<span class="string">&quot;multipart/form-data&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> kv <span class="keyword">in</span> request.Form)</span><br><span class="line">        &#123;</span><br><span class="line">            dic.Add(kv.Key, kv.Value);</span><br><span class="line">        &#125;</span><br><span class="line">        requestParams.RequestFormData = JsonConvert.DeserializeObject&lt;JObject&gt;(JsonConvert.SerializeObject(dic));</span><br><span class="line">        List&lt;Dictionary&lt;<span class="built_in">string</span>, MemoryStream&gt;&gt; files = <span class="keyword">new</span> List&lt;Dictionary&lt;<span class="built_in">string</span>, MemoryStream&gt;&gt;();</span><br><span class="line">        <span class="built_in">long</span> filesize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> file <span class="keyword">in</span> request.Form.Files)</span><br><span class="line">        &#123;</span><br><span class="line">            filesize += file.Length;</span><br><span class="line">            <span class="keyword">if</span> (filesize &gt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">4</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;文件过大无法上传，请联系管理员申请使用大文件上传服务器&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> fileBytes = <span class="keyword">new</span> Byte[file.Length];</span><br><span class="line">            MemoryStream fileStream = <span class="keyword">new</span> MemoryStream(fileBytes);</span><br><span class="line">            file.CopyTo(fileStream);</span><br><span class="line">            files.Add(<span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, MemoryStream&gt;() &#123; &#123; file.Name, fileStream &#125; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        requestParams.RequestUploadFile = files;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> requestParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>其中文件上传大小可以通过配置文件限制，现在及时我们遇到有Get请求，但是带着FormData文件的情况，我们也可以正常获取所有信息，其中信息内容格式如下：
</code></pre>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RequestParamsModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Url 地址栏参数信息 自动转化为 JObject</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;value&gt;</span><span class="doctag">&lt;/value&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> JObject RequestQueryString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当 请求内容包含 application/text application/xml text/plain 和 application/javascript 是，获取内容一律视为 string，后期再自行处理</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;value&gt;</span><span class="doctag">&lt;/value&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> String RequestFormDataString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> FormData 请求时所有的键值对，自动转化为 JObject</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;value&gt;</span><span class="doctag">&lt;/value&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> JObject RequestFormData &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> FormData 请求时附带的文件，key为文件名 value为文件的stream格式</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;value&gt;</span><span class="doctag">&lt;/value&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dictionary&lt;<span class="built_in">string</span>, MemoryStream&gt;&gt; RequestUploadFile &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6-其中这个封装并没有处理body包含-binary-格式和-graphql-格式如有需要可以自行扩展-此时当我们遇到"><a class="markdownIt-Anchor" href="#6-其中这个封装并没有处理body包含-binary-格式和-graphql-格式如有需要可以自行扩展-此时当我们遇到"></a> 6. 其中，这个封装并没有处理Body包含 binary 格式和 GraphQL 格式，如有需要可以自行扩展。此时，当我们遇到</h4>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = OdinHttpClientFactory.PostRequestAsync&lt;OdinActionResult&gt;(<span class="string">&quot;OdinClient&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;http://127.0.0.1:20303/api/v1/LinkTrack/pfda?id=4&amp;name=admin&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> &#123; User = <span class="string">&quot;odinsam&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>
<pre><code>这样的请求时，我们就会得到如下内容:(OdinActionResult是我自己定义的一个统一返回格式而已)
</code></pre>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">RequestQueryString - <span class="literal">null</span></span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;4&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">RequestFormDataString - <span class="literal">null</span></span><br><span class="line">RequestFormData</span><br><span class="line">&#123;<span class="string">&quot;User&quot;</span>:<span class="string">&quot;odinsam&quot;</span>&#125;</span><br><span class="line">RequestUploadFile - <span class="literal">null</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>.Net Core</category>
      </categories>
      <tags>
        <tag>.Net Core</tag>
        <tag>HttpClientFactory</tag>
      </tags>
  </entry>
</search>
